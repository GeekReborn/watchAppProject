(global["webpackJsonp"] = global["webpackJsonp"] || []).push([["common/vendor"],{

/***/ 1:
/*!************************************************************!*\
  !*** ./node_modules/@dcloudio/uni-mp-weixin/dist/index.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, "__esModule", { value: true });exports.createApp = createApp;exports.createComponent = createComponent;exports.createPage = createPage;exports.createPlugin = createPlugin;exports.createSubpackageApp = createSubpackageApp;exports.default = void 0;var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));
var _uniI18n = __webpack_require__(/*! @dcloudio/uni-i18n */ 4);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {_defineProperty(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _iterableToArrayLimit(arr, i) {if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"] != null) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _iterableToArray(iter) {if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) return _arrayLikeToArray(arr);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}

var realAtob;

var b64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
var b64re = /^(?:[A-Za-z\d+/]{4})*?(?:[A-Za-z\d+/]{2}(?:==)?|[A-Za-z\d+/]{3}=?)?$/;

if (typeof atob !== 'function') {
  realAtob = function realAtob(str) {
    str = String(str).replace(/[\t\n\f\r ]+/g, '');
    if (!b64re.test(str)) {throw new Error("Failed to execute 'atob' on 'Window': The string to be decoded is not correctly encoded.");}

    // Adding the padding if missing, for semplicity
    str += '=='.slice(2 - (str.length & 3));
    var bitmap;var result = '';var r1;var r2;var i = 0;
    for (; i < str.length;) {
      bitmap = b64.indexOf(str.charAt(i++)) << 18 | b64.indexOf(str.charAt(i++)) << 12 |
      (r1 = b64.indexOf(str.charAt(i++))) << 6 | (r2 = b64.indexOf(str.charAt(i++)));

      result += r1 === 64 ? String.fromCharCode(bitmap >> 16 & 255) :
      r2 === 64 ? String.fromCharCode(bitmap >> 16 & 255, bitmap >> 8 & 255) :
      String.fromCharCode(bitmap >> 16 & 255, bitmap >> 8 & 255, bitmap & 255);
    }
    return result;
  };
} else {
  // 注意atob只能在全局对象上调用，例如：`const Base64 = {atob};Base64.atob('xxxx')`是错误的用法
  realAtob = atob;
}

function b64DecodeUnicode(str) {
  return decodeURIComponent(realAtob(str).split('').map(function (c) {
    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
  }).join(''));
}

function getCurrentUserInfo() {
  var token = wx.getStorageSync('uni_id_token') || '';
  var tokenArr = token.split('.');
  if (!token || tokenArr.length !== 3) {
    return {
      uid: null,
      role: [],
      permission: [],
      tokenExpired: 0 };

  }
  var userInfo;
  try {
    userInfo = JSON.parse(b64DecodeUnicode(tokenArr[1]));
  } catch (error) {
    throw new Error('获取当前用户信息出错，详细错误信息为：' + error.message);
  }
  userInfo.tokenExpired = userInfo.exp * 1000;
  delete userInfo.exp;
  delete userInfo.iat;
  return userInfo;
}

function uniIdMixin(Vue) {
  Vue.prototype.uniIDHasRole = function (roleId) {var _getCurrentUserInfo =


    getCurrentUserInfo(),role = _getCurrentUserInfo.role;
    return role.indexOf(roleId) > -1;
  };
  Vue.prototype.uniIDHasPermission = function (permissionId) {var _getCurrentUserInfo2 =


    getCurrentUserInfo(),permission = _getCurrentUserInfo2.permission;
    return this.uniIDHasRole('admin') || permission.indexOf(permissionId) > -1;
  };
  Vue.prototype.uniIDTokenValid = function () {var _getCurrentUserInfo3 =


    getCurrentUserInfo(),tokenExpired = _getCurrentUserInfo3.tokenExpired;
    return tokenExpired > Date.now();
  };
}

var _toString = Object.prototype.toString;
var hasOwnProperty = Object.prototype.hasOwnProperty;

function isFn(fn) {
  return typeof fn === 'function';
}

function isStr(str) {
  return typeof str === 'string';
}

function isPlainObject(obj) {
  return _toString.call(obj) === '[object Object]';
}

function hasOwn(obj, key) {
  return hasOwnProperty.call(obj, key);
}

function noop() {}

/**
                    * Create a cached version of a pure function.
                    */
function cached(fn) {
  var cache = Object.create(null);
  return function cachedFn(str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str));
  };
}

/**
   * Camelize a hyphen-delimited string.
   */
var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) {return c ? c.toUpperCase() : '';});
});

var HOOKS = [
'invoke',
'success',
'fail',
'complete',
'returnValue'];


var globalInterceptors = {};
var scopedInterceptors = {};

function mergeHook(parentVal, childVal) {
  var res = childVal ?
  parentVal ?
  parentVal.concat(childVal) :
  Array.isArray(childVal) ?
  childVal : [childVal] :
  parentVal;
  return res ?
  dedupeHooks(res) :
  res;
}

function dedupeHooks(hooks) {
  var res = [];
  for (var i = 0; i < hooks.length; i++) {
    if (res.indexOf(hooks[i]) === -1) {
      res.push(hooks[i]);
    }
  }
  return res;
}

function removeHook(hooks, hook) {
  var index = hooks.indexOf(hook);
  if (index !== -1) {
    hooks.splice(index, 1);
  }
}

function mergeInterceptorHook(interceptor, option) {
  Object.keys(option).forEach(function (hook) {
    if (HOOKS.indexOf(hook) !== -1 && isFn(option[hook])) {
      interceptor[hook] = mergeHook(interceptor[hook], option[hook]);
    }
  });
}

function removeInterceptorHook(interceptor, option) {
  if (!interceptor || !option) {
    return;
  }
  Object.keys(option).forEach(function (hook) {
    if (HOOKS.indexOf(hook) !== -1 && isFn(option[hook])) {
      removeHook(interceptor[hook], option[hook]);
    }
  });
}

function addInterceptor(method, option) {
  if (typeof method === 'string' && isPlainObject(option)) {
    mergeInterceptorHook(scopedInterceptors[method] || (scopedInterceptors[method] = {}), option);
  } else if (isPlainObject(method)) {
    mergeInterceptorHook(globalInterceptors, method);
  }
}

function removeInterceptor(method, option) {
  if (typeof method === 'string') {
    if (isPlainObject(option)) {
      removeInterceptorHook(scopedInterceptors[method], option);
    } else {
      delete scopedInterceptors[method];
    }
  } else if (isPlainObject(method)) {
    removeInterceptorHook(globalInterceptors, method);
  }
}

function wrapperHook(hook) {
  return function (data) {
    return hook(data) || data;
  };
}

function isPromise(obj) {
  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';
}

function queue(hooks, data) {
  var promise = false;
  for (var i = 0; i < hooks.length; i++) {
    var hook = hooks[i];
    if (promise) {
      promise = Promise.resolve(wrapperHook(hook));
    } else {
      var res = hook(data);
      if (isPromise(res)) {
        promise = Promise.resolve(res);
      }
      if (res === false) {
        return {
          then: function then() {} };

      }
    }
  }
  return promise || {
    then: function then(callback) {
      return callback(data);
    } };

}

function wrapperOptions(interceptor) {var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  ['success', 'fail', 'complete'].forEach(function (name) {
    if (Array.isArray(interceptor[name])) {
      var oldCallback = options[name];
      options[name] = function callbackInterceptor(res) {
        queue(interceptor[name], res).then(function (res) {
          /* eslint-disable no-mixed-operators */
          return isFn(oldCallback) && oldCallback(res) || res;
        });
      };
    }
  });
  return options;
}

function wrapperReturnValue(method, returnValue) {
  var returnValueHooks = [];
  if (Array.isArray(globalInterceptors.returnValue)) {
    returnValueHooks.push.apply(returnValueHooks, _toConsumableArray(globalInterceptors.returnValue));
  }
  var interceptor = scopedInterceptors[method];
  if (interceptor && Array.isArray(interceptor.returnValue)) {
    returnValueHooks.push.apply(returnValueHooks, _toConsumableArray(interceptor.returnValue));
  }
  returnValueHooks.forEach(function (hook) {
    returnValue = hook(returnValue) || returnValue;
  });
  return returnValue;
}

function getApiInterceptorHooks(method) {
  var interceptor = Object.create(null);
  Object.keys(globalInterceptors).forEach(function (hook) {
    if (hook !== 'returnValue') {
      interceptor[hook] = globalInterceptors[hook].slice();
    }
  });
  var scopedInterceptor = scopedInterceptors[method];
  if (scopedInterceptor) {
    Object.keys(scopedInterceptor).forEach(function (hook) {
      if (hook !== 'returnValue') {
        interceptor[hook] = (interceptor[hook] || []).concat(scopedInterceptor[hook]);
      }
    });
  }
  return interceptor;
}

function invokeApi(method, api, options) {for (var _len = arguments.length, params = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {params[_key - 3] = arguments[_key];}
  var interceptor = getApiInterceptorHooks(method);
  if (interceptor && Object.keys(interceptor).length) {
    if (Array.isArray(interceptor.invoke)) {
      var res = queue(interceptor.invoke, options);
      return res.then(function (options) {
        return api.apply(void 0, [wrapperOptions(interceptor, options)].concat(params));
      });
    } else {
      return api.apply(void 0, [wrapperOptions(interceptor, options)].concat(params));
    }
  }
  return api.apply(void 0, [options].concat(params));
}

var promiseInterceptor = {
  returnValue: function returnValue(res) {
    if (!isPromise(res)) {
      return res;
    }
    return new Promise(function (resolve, reject) {
      res.then(function (res) {
        if (res[0]) {
          reject(res[0]);
        } else {
          resolve(res[1]);
        }
      });
    });
  } };


var SYNC_API_RE =
/^\$|Window$|WindowStyle$|sendHostEvent|sendNativeEvent|restoreGlobal|getCurrentSubNVue|getMenuButtonBoundingClientRect|^report|interceptors|Interceptor$|getSubNVueById|requireNativePlugin|upx2px|hideKeyboard|canIUse|^create|Sync$|Manager$|base64ToArrayBuffer|arrayBufferToBase64|getLocale|setLocale/;

var CONTEXT_API_RE = /^create|Manager$/;

// Context例外情况
var CONTEXT_API_RE_EXC = ['createBLEConnection'];

// 同步例外情况
var ASYNC_API = ['createBLEConnection'];

var CALLBACK_API_RE = /^on|^off/;

function isContextApi(name) {
  return CONTEXT_API_RE.test(name) && CONTEXT_API_RE_EXC.indexOf(name) === -1;
}
function isSyncApi(name) {
  return SYNC_API_RE.test(name) && ASYNC_API.indexOf(name) === -1;
}

function isCallbackApi(name) {
  return CALLBACK_API_RE.test(name) && name !== 'onPush';
}

function handlePromise(promise) {
  return promise.then(function (data) {
    return [null, data];
  }).
  catch(function (err) {return [err];});
}

function shouldPromise(name) {
  if (
  isContextApi(name) ||
  isSyncApi(name) ||
  isCallbackApi(name))
  {
    return false;
  }
  return true;
}

/* eslint-disable no-extend-native */
if (!Promise.prototype.finally) {
  Promise.prototype.finally = function (callback) {
    var promise = this.constructor;
    return this.then(
    function (value) {return promise.resolve(callback()).then(function () {return value;});},
    function (reason) {return promise.resolve(callback()).then(function () {
        throw reason;
      });});

  };
}

function promisify(name, api) {
  if (!shouldPromise(name)) {
    return api;
  }
  return function promiseApi() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {params[_key2 - 1] = arguments[_key2];}
    if (isFn(options.success) || isFn(options.fail) || isFn(options.complete)) {
      return wrapperReturnValue(name, invokeApi.apply(void 0, [name, api, options].concat(params)));
    }
    return wrapperReturnValue(name, handlePromise(new Promise(function (resolve, reject) {
      invokeApi.apply(void 0, [name, api, Object.assign({}, options, {
        success: resolve,
        fail: reject })].concat(
      params));
    })));
  };
}

var EPS = 1e-4;
var BASE_DEVICE_WIDTH = 750;
var isIOS = false;
var deviceWidth = 0;
var deviceDPR = 0;

function checkDeviceWidth() {var _wx$getSystemInfoSync =




  wx.getSystemInfoSync(),platform = _wx$getSystemInfoSync.platform,pixelRatio = _wx$getSystemInfoSync.pixelRatio,windowWidth = _wx$getSystemInfoSync.windowWidth; // uni=>wx runtime 编译目标是 uni 对象，内部不允许直接使用 uni

  deviceWidth = windowWidth;
  deviceDPR = pixelRatio;
  isIOS = platform === 'ios';
}

function upx2px(number, newDeviceWidth) {
  if (deviceWidth === 0) {
    checkDeviceWidth();
  }

  number = Number(number);
  if (number === 0) {
    return 0;
  }
  var result = number / BASE_DEVICE_WIDTH * (newDeviceWidth || deviceWidth);
  if (result < 0) {
    result = -result;
  }
  result = Math.floor(result + EPS);
  if (result === 0) {
    if (deviceDPR === 1 || !isIOS) {
      result = 1;
    } else {
      result = 0.5;
    }
  }
  return number < 0 ? -result : result;
}

function getLocale() {
  // 优先使用 $locale
  var app = getApp({
    allowDefault: true });

  if (app && app.$vm) {
    return app.$vm.$locale;
  }
  return wx.getSystemInfoSync().language || 'zh-Hans';
}

function setLocale(locale) {
  var app = getApp();
  if (!app) {
    return false;
  }
  var oldLocale = app.$vm.$locale;
  if (oldLocale !== locale) {
    app.$vm.$locale = locale;
    onLocaleChangeCallbacks.forEach(function (fn) {return fn({
        locale: locale });});

    return true;
  }
  return false;
}

var onLocaleChangeCallbacks = [];
function onLocaleChange(fn) {
  if (onLocaleChangeCallbacks.indexOf(fn) === -1) {
    onLocaleChangeCallbacks.push(fn);
  }
}

if (typeof global !== 'undefined') {
  global.getLocale = getLocale;
}

var interceptors = {
  promiseInterceptor: promiseInterceptor };


var baseApi = /*#__PURE__*/Object.freeze({
  __proto__: null,
  upx2px: upx2px,
  getLocale: getLocale,
  setLocale: setLocale,
  onLocaleChange: onLocaleChange,
  addInterceptor: addInterceptor,
  removeInterceptor: removeInterceptor,
  interceptors: interceptors });


function findExistsPageIndex(url) {
  var pages = getCurrentPages();
  var len = pages.length;
  while (len--) {
    var page = pages[len];
    if (page.$page && page.$page.fullPath === url) {
      return len;
    }
  }
  return -1;
}

var redirectTo = {
  name: function name(fromArgs) {
    if (fromArgs.exists === 'back' && fromArgs.delta) {
      return 'navigateBack';
    }
    return 'redirectTo';
  },
  args: function args(fromArgs) {
    if (fromArgs.exists === 'back' && fromArgs.url) {
      var existsPageIndex = findExistsPageIndex(fromArgs.url);
      if (existsPageIndex !== -1) {
        var delta = getCurrentPages().length - 1 - existsPageIndex;
        if (delta > 0) {
          fromArgs.delta = delta;
        }
      }
    }
  } };


var previewImage = {
  args: function args(fromArgs) {
    var currentIndex = parseInt(fromArgs.current);
    if (isNaN(currentIndex)) {
      return;
    }
    var urls = fromArgs.urls;
    if (!Array.isArray(urls)) {
      return;
    }
    var len = urls.length;
    if (!len) {
      return;
    }
    if (currentIndex < 0) {
      currentIndex = 0;
    } else if (currentIndex >= len) {
      currentIndex = len - 1;
    }
    if (currentIndex > 0) {
      fromArgs.current = urls[currentIndex];
      fromArgs.urls = urls.filter(
      function (item, index) {return index < currentIndex ? item !== urls[currentIndex] : true;});

    } else {
      fromArgs.current = urls[0];
    }
    return {
      indicator: false,
      loop: false };

  } };


var UUID_KEY = '__DC_STAT_UUID';
var deviceId;
function addUuid(result) {
  deviceId = deviceId || wx.getStorageSync(UUID_KEY);
  if (!deviceId) {
    deviceId = Date.now() + '' + Math.floor(Math.random() * 1e7);
    wx.setStorage({
      key: UUID_KEY,
      data: deviceId });

  }
  result.deviceId = deviceId;
}

function addSafeAreaInsets(result) {
  if (result.safeArea) {
    var safeArea = result.safeArea;
    result.safeAreaInsets = {
      top: safeArea.top,
      left: safeArea.left,
      right: result.windowWidth - safeArea.right,
      bottom: result.windowHeight - safeArea.bottom };

  }
}

var getSystemInfo = {
  returnValue: function returnValue(result) {
    addUuid(result);
    addSafeAreaInsets(result);
  } };


// import navigateTo from 'uni-helpers/navigate-to'

var protocols = {
  redirectTo: redirectTo,
  // navigateTo,  // 由于在微信开发者工具的页面参数，会显示__id__参数，因此暂时关闭mp-weixin对于navigateTo的AOP
  previewImage: previewImage,
  getSystemInfo: getSystemInfo,
  getSystemInfoSync: getSystemInfo };

var todos = [
'vibrate',
'preloadPage',
'unPreloadPage',
'loadSubPackage'];

var canIUses = [];

var CALLBACKS = ['success', 'fail', 'cancel', 'complete'];

function processCallback(methodName, method, returnValue) {
  return function (res) {
    return method(processReturnValue(methodName, res, returnValue));
  };
}

function processArgs(methodName, fromArgs) {var argsOption = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};var returnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};var keepFromArgs = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
  if (isPlainObject(fromArgs)) {// 一般 api 的参数解析
    var toArgs = keepFromArgs === true ? fromArgs : {}; // returnValue 为 false 时，说明是格式化返回值，直接在返回值对象上修改赋值
    if (isFn(argsOption)) {
      argsOption = argsOption(fromArgs, toArgs) || {};
    }
    for (var key in fromArgs) {
      if (hasOwn(argsOption, key)) {
        var keyOption = argsOption[key];
        if (isFn(keyOption)) {
          keyOption = keyOption(fromArgs[key], fromArgs, toArgs);
        }
        if (!keyOption) {// 不支持的参数
          console.warn("The '".concat(methodName, "' method of platform '\u5FAE\u4FE1\u5C0F\u7A0B\u5E8F' does not support option '").concat(key, "'"));
        } else if (isStr(keyOption)) {// 重写参数 key
          toArgs[keyOption] = fromArgs[key];
        } else if (isPlainObject(keyOption)) {// {name:newName,value:value}可重新指定参数 key:value
          toArgs[keyOption.name ? keyOption.name : key] = keyOption.value;
        }
      } else if (CALLBACKS.indexOf(key) !== -1) {
        if (isFn(fromArgs[key])) {
          toArgs[key] = processCallback(methodName, fromArgs[key], returnValue);
        }
      } else {
        if (!keepFromArgs) {
          toArgs[key] = fromArgs[key];
        }
      }
    }
    return toArgs;
  } else if (isFn(fromArgs)) {
    fromArgs = processCallback(methodName, fromArgs, returnValue);
  }
  return fromArgs;
}

function processReturnValue(methodName, res, returnValue) {var keepReturnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  if (isFn(protocols.returnValue)) {// 处理通用 returnValue
    res = protocols.returnValue(methodName, res);
  }
  return processArgs(methodName, res, returnValue, {}, keepReturnValue);
}

function wrapper(methodName, method) {
  if (hasOwn(protocols, methodName)) {
    var protocol = protocols[methodName];
    if (!protocol) {// 暂不支持的 api
      return function () {
        console.error("Platform '\u5FAE\u4FE1\u5C0F\u7A0B\u5E8F' does not support '".concat(methodName, "'."));
      };
    }
    return function (arg1, arg2) {// 目前 api 最多两个参数
      var options = protocol;
      if (isFn(protocol)) {
        options = protocol(arg1);
      }

      arg1 = processArgs(methodName, arg1, options.args, options.returnValue);

      var args = [arg1];
      if (typeof arg2 !== 'undefined') {
        args.push(arg2);
      }
      if (isFn(options.name)) {
        methodName = options.name(arg1);
      } else if (isStr(options.name)) {
        methodName = options.name;
      }
      var returnValue = wx[methodName].apply(wx, args);
      if (isSyncApi(methodName)) {// 同步 api
        return processReturnValue(methodName, returnValue, options.returnValue, isContextApi(methodName));
      }
      return returnValue;
    };
  }
  return method;
}

var todoApis = Object.create(null);

var TODOS = [
'onTabBarMidButtonTap',
'subscribePush',
'unsubscribePush',
'onPush',
'offPush',
'share'];


function createTodoApi(name) {
  return function todoApi(_ref)


  {var fail = _ref.fail,complete = _ref.complete;
    var res = {
      errMsg: "".concat(name, ":fail method '").concat(name, "' not supported") };

    isFn(fail) && fail(res);
    isFn(complete) && complete(res);
  };
}

TODOS.forEach(function (name) {
  todoApis[name] = createTodoApi(name);
});

var providers = {
  oauth: ['weixin'],
  share: ['weixin'],
  payment: ['wxpay'],
  push: ['weixin'] };


function getProvider(_ref2)




{var service = _ref2.service,success = _ref2.success,fail = _ref2.fail,complete = _ref2.complete;
  var res = false;
  if (providers[service]) {
    res = {
      errMsg: 'getProvider:ok',
      service: service,
      provider: providers[service] };

    isFn(success) && success(res);
  } else {
    res = {
      errMsg: 'getProvider:fail service not found' };

    isFn(fail) && fail(res);
  }
  isFn(complete) && complete(res);
}

var extraApi = /*#__PURE__*/Object.freeze({
  __proto__: null,
  getProvider: getProvider });


var getEmitter = function () {
  var Emitter;
  return function getUniEmitter() {
    if (!Emitter) {
      Emitter = new _vue.default();
    }
    return Emitter;
  };
}();

function apply(ctx, method, args) {
  return ctx[method].apply(ctx, args);
}

function $on() {
  return apply(getEmitter(), '$on', Array.prototype.slice.call(arguments));
}
function $off() {
  return apply(getEmitter(), '$off', Array.prototype.slice.call(arguments));
}
function $once() {
  return apply(getEmitter(), '$once', Array.prototype.slice.call(arguments));
}
function $emit() {
  return apply(getEmitter(), '$emit', Array.prototype.slice.call(arguments));
}

var eventApi = /*#__PURE__*/Object.freeze({
  __proto__: null,
  $on: $on,
  $off: $off,
  $once: $once,
  $emit: $emit });


var api = /*#__PURE__*/Object.freeze({
  __proto__: null });


var MPPage = Page;
var MPComponent = Component;

var customizeRE = /:/g;

var customize = cached(function (str) {
  return camelize(str.replace(customizeRE, '-'));
});

function initTriggerEvent(mpInstance) {
  var oldTriggerEvent = mpInstance.triggerEvent;
  var newTriggerEvent = function newTriggerEvent(event) {for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {args[_key3 - 1] = arguments[_key3];}
    return oldTriggerEvent.apply(mpInstance, [customize(event)].concat(args));
  };
  try {
    // 京东小程序 triggerEvent 为只读
    mpInstance.triggerEvent = newTriggerEvent;
  } catch (error) {
    mpInstance._triggerEvent = newTriggerEvent;
  }
}

function initHook(name, options, isComponent) {
  var oldHook = options[name];
  if (!oldHook) {
    options[name] = function () {
      initTriggerEvent(this);
    };
  } else {
    options[name] = function () {
      initTriggerEvent(this);for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {args[_key4] = arguments[_key4];}
      return oldHook.apply(this, args);
    };
  }
}
if (!MPPage.__$wrappered) {
  MPPage.__$wrappered = true;
  Page = function Page() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    initHook('onLoad', options);
    return MPPage(options);
  };
  Page.after = MPPage.after;

  Component = function Component() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    initHook('created', options);
    return MPComponent(options);
  };
}

var PAGE_EVENT_HOOKS = [
'onPullDownRefresh',
'onReachBottom',
'onAddToFavorites',
'onShareTimeline',
'onShareAppMessage',
'onPageScroll',
'onResize',
'onTabItemTap'];


function initMocks(vm, mocks) {
  var mpInstance = vm.$mp[vm.mpType];
  mocks.forEach(function (mock) {
    if (hasOwn(mpInstance, mock)) {
      vm[mock] = mpInstance[mock];
    }
  });
}

function hasHook(hook, vueOptions) {
  if (!vueOptions) {
    return true;
  }

  if (_vue.default.options && Array.isArray(_vue.default.options[hook])) {
    return true;
  }

  vueOptions = vueOptions.default || vueOptions;

  if (isFn(vueOptions)) {
    if (isFn(vueOptions.extendOptions[hook])) {
      return true;
    }
    if (vueOptions.super &&
    vueOptions.super.options &&
    Array.isArray(vueOptions.super.options[hook])) {
      return true;
    }
    return false;
  }

  if (isFn(vueOptions[hook])) {
    return true;
  }
  var mixins = vueOptions.mixins;
  if (Array.isArray(mixins)) {
    return !!mixins.find(function (mixin) {return hasHook(hook, mixin);});
  }
}

function initHooks(mpOptions, hooks, vueOptions) {
  hooks.forEach(function (hook) {
    if (hasHook(hook, vueOptions)) {
      mpOptions[hook] = function (args) {
        return this.$vm && this.$vm.__call_hook(hook, args);
      };
    }
  });
}

function initVueComponent(Vue, vueOptions) {
  vueOptions = vueOptions.default || vueOptions;
  var VueComponent;
  if (isFn(vueOptions)) {
    VueComponent = vueOptions;
  } else {
    VueComponent = Vue.extend(vueOptions);
  }
  vueOptions = VueComponent.options;
  return [VueComponent, vueOptions];
}

function initSlots(vm, vueSlots) {
  if (Array.isArray(vueSlots) && vueSlots.length) {
    var $slots = Object.create(null);
    vueSlots.forEach(function (slotName) {
      $slots[slotName] = true;
    });
    vm.$scopedSlots = vm.$slots = $slots;
  }
}

function initVueIds(vueIds, mpInstance) {
  vueIds = (vueIds || '').split(',');
  var len = vueIds.length;

  if (len === 1) {
    mpInstance._$vueId = vueIds[0];
  } else if (len === 2) {
    mpInstance._$vueId = vueIds[0];
    mpInstance._$vuePid = vueIds[1];
  }
}

function initData(vueOptions, context) {
  var data = vueOptions.data || {};
  var methods = vueOptions.methods || {};

  if (typeof data === 'function') {
    try {
      data = data.call(context); // 支持 Vue.prototype 上挂的数据
    } catch (e) {
      if (Object({"NODE_ENV":"development","VUE_APP_NAME":"watchapp-frontend","VUE_APP_PLATFORM":"mp-weixin","BASE_URL":"/"}).VUE_APP_DEBUG) {
        console.warn('根据 Vue 的 data 函数初始化小程序 data 失败，请尽量确保 data 函数中不访问 vm 对象，否则可能影响首次数据渲染速度。', data);
      }
    }
  } else {
    try {
      // 对 data 格式化
      data = JSON.parse(JSON.stringify(data));
    } catch (e) {}
  }

  if (!isPlainObject(data)) {
    data = {};
  }

  Object.keys(methods).forEach(function (methodName) {
    if (context.__lifecycle_hooks__.indexOf(methodName) === -1 && !hasOwn(data, methodName)) {
      data[methodName] = methods[methodName];
    }
  });

  return data;
}

var PROP_TYPES = [String, Number, Boolean, Object, Array, null];

function createObserver(name) {
  return function observer(newVal, oldVal) {
    if (this.$vm) {
      this.$vm[name] = newVal; // 为了触发其他非 render watcher
    }
  };
}

function initBehaviors(vueOptions, initBehavior) {
  var vueBehaviors = vueOptions.behaviors;
  var vueExtends = vueOptions.extends;
  var vueMixins = vueOptions.mixins;

  var vueProps = vueOptions.props;

  if (!vueProps) {
    vueOptions.props = vueProps = [];
  }

  var behaviors = [];
  if (Array.isArray(vueBehaviors)) {
    vueBehaviors.forEach(function (behavior) {
      behaviors.push(behavior.replace('uni://', "wx".concat("://")));
      if (behavior === 'uni://form-field') {
        if (Array.isArray(vueProps)) {
          vueProps.push('name');
          vueProps.push('value');
        } else {
          vueProps.name = {
            type: String,
            default: '' };

          vueProps.value = {
            type: [String, Number, Boolean, Array, Object, Date],
            default: '' };

        }
      }
    });
  }
  if (isPlainObject(vueExtends) && vueExtends.props) {
    behaviors.push(
    initBehavior({
      properties: initProperties(vueExtends.props, true) }));


  }
  if (Array.isArray(vueMixins)) {
    vueMixins.forEach(function (vueMixin) {
      if (isPlainObject(vueMixin) && vueMixin.props) {
        behaviors.push(
        initBehavior({
          properties: initProperties(vueMixin.props, true) }));


      }
    });
  }
  return behaviors;
}

function parsePropType(key, type, defaultValue, file) {
  // [String]=>String
  if (Array.isArray(type) && type.length === 1) {
    return type[0];
  }
  return type;
}

function initProperties(props) {var isBehavior = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;var file = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  var properties = {};
  if (!isBehavior) {
    properties.vueId = {
      type: String,
      value: '' };

    // 用于字节跳动小程序模拟抽象节点
    properties.generic = {
      type: Object,
      value: null };

    // scopedSlotsCompiler auto
    properties.scopedSlotsCompiler = {
      type: String,
      value: '' };

    properties.vueSlots = { // 小程序不能直接定义 $slots 的 props，所以通过 vueSlots 转换到 $slots
      type: null,
      value: [],
      observer: function observer(newVal, oldVal) {
        var $slots = Object.create(null);
        newVal.forEach(function (slotName) {
          $slots[slotName] = true;
        });
        this.setData({
          $slots: $slots });

      } };

  }
  if (Array.isArray(props)) {// ['title']
    props.forEach(function (key) {
      properties[key] = {
        type: null,
        observer: createObserver(key) };

    });
  } else if (isPlainObject(props)) {// {title:{type:String,default:''},content:String}
    Object.keys(props).forEach(function (key) {
      var opts = props[key];
      if (isPlainObject(opts)) {// title:{type:String,default:''}
        var value = opts.default;
        if (isFn(value)) {
          value = value();
        }

        opts.type = parsePropType(key, opts.type);

        properties[key] = {
          type: PROP_TYPES.indexOf(opts.type) !== -1 ? opts.type : null,
          value: value,
          observer: createObserver(key) };

      } else {// content:String
        var type = parsePropType(key, opts);
        properties[key] = {
          type: PROP_TYPES.indexOf(type) !== -1 ? type : null,
          observer: createObserver(key) };

      }
    });
  }
  return properties;
}

function wrapper$1(event) {
  // TODO 又得兼容 mpvue 的 mp 对象
  try {
    event.mp = JSON.parse(JSON.stringify(event));
  } catch (e) {}

  event.stopPropagation = noop;
  event.preventDefault = noop;

  event.target = event.target || {};

  if (!hasOwn(event, 'detail')) {
    event.detail = {};
  }

  if (hasOwn(event, 'markerId')) {
    event.detail = typeof event.detail === 'object' ? event.detail : {};
    event.detail.markerId = event.markerId;
  }

  if (isPlainObject(event.detail)) {
    event.target = Object.assign({}, event.target, event.detail);
  }

  return event;
}

function getExtraValue(vm, dataPathsArray) {
  var context = vm;
  dataPathsArray.forEach(function (dataPathArray) {
    var dataPath = dataPathArray[0];
    var value = dataPathArray[2];
    if (dataPath || typeof value !== 'undefined') {// ['','',index,'disable']
      var propPath = dataPathArray[1];
      var valuePath = dataPathArray[3];

      var vFor;
      if (Number.isInteger(dataPath)) {
        vFor = dataPath;
      } else if (!dataPath) {
        vFor = context;
      } else if (typeof dataPath === 'string' && dataPath) {
        if (dataPath.indexOf('#s#') === 0) {
          vFor = dataPath.substr(3);
        } else {
          vFor = vm.__get_value(dataPath, context);
        }
      }

      if (Number.isInteger(vFor)) {
        context = value;
      } else if (!propPath) {
        context = vFor[value];
      } else {
        if (Array.isArray(vFor)) {
          context = vFor.find(function (vForItem) {
            return vm.__get_value(propPath, vForItem) === value;
          });
        } else if (isPlainObject(vFor)) {
          context = Object.keys(vFor).find(function (vForKey) {
            return vm.__get_value(propPath, vFor[vForKey]) === value;
          });
        } else {
          console.error('v-for 暂不支持循环数据：', vFor);
        }
      }

      if (valuePath) {
        context = vm.__get_value(valuePath, context);
      }
    }
  });
  return context;
}

function processEventExtra(vm, extra, event) {
  var extraObj = {};

  if (Array.isArray(extra) && extra.length) {
    /**
                                              *[
                                              *    ['data.items', 'data.id', item.data.id],
                                              *    ['metas', 'id', meta.id]
                                              *],
                                              *[
                                              *    ['data.items', 'data.id', item.data.id],
                                              *    ['metas', 'id', meta.id]
                                              *],
                                              *'test'
                                              */
    extra.forEach(function (dataPath, index) {
      if (typeof dataPath === 'string') {
        if (!dataPath) {// model,prop.sync
          extraObj['$' + index] = vm;
        } else {
          if (dataPath === '$event') {// $event
            extraObj['$' + index] = event;
          } else if (dataPath === 'arguments') {
            if (event.detail && event.detail.__args__) {
              extraObj['$' + index] = event.detail.__args__;
            } else {
              extraObj['$' + index] = [event];
            }
          } else if (dataPath.indexOf('$event.') === 0) {// $event.target.value
            extraObj['$' + index] = vm.__get_value(dataPath.replace('$event.', ''), event);
          } else {
            extraObj['$' + index] = vm.__get_value(dataPath);
          }
        }
      } else {
        extraObj['$' + index] = getExtraValue(vm, dataPath);
      }
    });
  }

  return extraObj;
}

function getObjByArray(arr) {
  var obj = {};
  for (var i = 1; i < arr.length; i++) {
    var element = arr[i];
    obj[element[0]] = element[1];
  }
  return obj;
}

function processEventArgs(vm, event) {var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];var extra = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];var isCustom = arguments.length > 4 ? arguments[4] : undefined;var methodName = arguments.length > 5 ? arguments[5] : undefined;
  var isCustomMPEvent = false; // wxcomponent 组件，传递原始 event 对象
  if (isCustom) {// 自定义事件
    isCustomMPEvent = event.currentTarget &&
    event.currentTarget.dataset &&
    event.currentTarget.dataset.comType === 'wx';
    if (!args.length) {// 无参数，直接传入 event 或 detail 数组
      if (isCustomMPEvent) {
        return [event];
      }
      return event.detail.__args__ || event.detail;
    }
  }

  var extraObj = processEventExtra(vm, extra, event);

  var ret = [];
  args.forEach(function (arg) {
    if (arg === '$event') {
      if (methodName === '__set_model' && !isCustom) {// input v-model value
        ret.push(event.target.value);
      } else {
        if (isCustom && !isCustomMPEvent) {
          ret.push(event.detail.__args__[0]);
        } else {// wxcomponent 组件或内置组件
          ret.push(event);
        }
      }
    } else {
      if (Array.isArray(arg) && arg[0] === 'o') {
        ret.push(getObjByArray(arg));
      } else if (typeof arg === 'string' && hasOwn(extraObj, arg)) {
        ret.push(extraObj[arg]);
      } else {
        ret.push(arg);
      }
    }
  });

  return ret;
}

var ONCE = '~';
var CUSTOM = '^';

function isMatchEventType(eventType, optType) {
  return eventType === optType ||

  optType === 'regionchange' && (

  eventType === 'begin' ||
  eventType === 'end');


}

function getContextVm(vm) {
  var $parent = vm.$parent;
  // 父组件是 scoped slots 或者其他自定义组件时继续查找
  while ($parent && $parent.$parent && ($parent.$options.generic || $parent.$parent.$options.generic || $parent.$scope._$vuePid)) {
    $parent = $parent.$parent;
  }
  return $parent && $parent.$parent;
}

function handleEvent(event) {var _this = this;
  event = wrapper$1(event);

  // [['tap',[['handle',[1,2,a]],['handle1',[1,2,a]]]]]
  var dataset = (event.currentTarget || event.target).dataset;
  if (!dataset) {
    return console.warn('事件信息不存在');
  }
  var eventOpts = dataset.eventOpts || dataset['event-opts']; // 支付宝 web-view 组件 dataset 非驼峰
  if (!eventOpts) {
    return console.warn('事件信息不存在');
  }

  // [['handle',[1,2,a]],['handle1',[1,2,a]]]
  var eventType = event.type;

  var ret = [];

  eventOpts.forEach(function (eventOpt) {
    var type = eventOpt[0];
    var eventsArray = eventOpt[1];

    var isCustom = type.charAt(0) === CUSTOM;
    type = isCustom ? type.slice(1) : type;
    var isOnce = type.charAt(0) === ONCE;
    type = isOnce ? type.slice(1) : type;

    if (eventsArray && isMatchEventType(eventType, type)) {
      eventsArray.forEach(function (eventArray) {
        var methodName = eventArray[0];
        if (methodName) {
          var handlerCtx = _this.$vm;
          if (handlerCtx.$options.generic) {// mp-weixin,mp-toutiao 抽象节点模拟 scoped slots
            handlerCtx = getContextVm(handlerCtx) || handlerCtx;
          }
          if (methodName === '$emit') {
            handlerCtx.$emit.apply(handlerCtx,
            processEventArgs(
            _this.$vm,
            event,
            eventArray[1],
            eventArray[2],
            isCustom,
            methodName));

            return;
          }
          var handler = handlerCtx[methodName];
          if (!isFn(handler)) {
            throw new Error(" _vm.".concat(methodName, " is not a function"));
          }
          if (isOnce) {
            if (handler.once) {
              return;
            }
            handler.once = true;
          }
          var params = processEventArgs(
          _this.$vm,
          event,
          eventArray[1],
          eventArray[2],
          isCustom,
          methodName);

          params = Array.isArray(params) ? params : [];
          // 参数尾部增加原始事件对象用于复杂表达式内获取额外数据
          if (/=\s*\S+\.eventParams\s*\|\|\s*\S+\[['"]event-params['"]\]/.test(handler.toString())) {
            // eslint-disable-next-line no-sparse-arrays
            params = params.concat([,,,,,,,,,, event]);
          }
          ret.push(handler.apply(handlerCtx, params));
        }
      });
    }
  });

  if (
  eventType === 'input' &&
  ret.length === 1 &&
  typeof ret[0] !== 'undefined')
  {
    return ret[0];
  }
}

var messages = {};

var locale;

{
  locale = wx.getSystemInfoSync().language;
}

function initI18nMessages() {
  if (!isEnableLocale()) {
    return;
  }
  var localeKeys = Object.keys(__uniConfig.locales);
  if (localeKeys.length) {
    localeKeys.forEach(function (locale) {
      var curMessages = messages[locale];
      var userMessages = __uniConfig.locales[locale];
      if (curMessages) {
        Object.assign(curMessages, userMessages);
      } else {
        messages[locale] = userMessages;
      }
    });
  }
}

initI18nMessages();

var i18n = (0, _uniI18n.initVueI18n)(
locale,
{});

var t = i18n.t;
var i18nMixin = i18n.mixin = {
  beforeCreate: function beforeCreate() {var _this2 = this;
    var unwatch = i18n.i18n.watchLocale(function () {
      _this2.$forceUpdate();
    });
    this.$once('hook:beforeDestroy', function () {
      unwatch();
    });
  },
  methods: {
    $$t: function $$t(key, values) {
      return t(key, values);
    } } };


var setLocale$1 = i18n.setLocale;
var getLocale$1 = i18n.getLocale;

function initAppLocale(Vue, appVm, locale) {
  var state = Vue.observable({
    locale: locale || i18n.getLocale() });

  var localeWatchers = [];
  appVm.$watchLocale = function (fn) {
    localeWatchers.push(fn);
  };
  Object.defineProperty(appVm, '$locale', {
    get: function get() {
      return state.locale;
    },
    set: function set(v) {
      state.locale = v;
      localeWatchers.forEach(function (watch) {return watch(v);});
    } });

}

function isEnableLocale() {
  return typeof __uniConfig !== 'undefined' && __uniConfig.locales && !!Object.keys(__uniConfig.locales).length;
}

// export function initI18n() {
//   const localeKeys = Object.keys(__uniConfig.locales || {})
//   if (localeKeys.length) {
//     localeKeys.forEach((locale) =>
//       i18n.add(locale, __uniConfig.locales[locale])
//     )
//   }
// }

var eventChannels = {};

var eventChannelStack = [];

function getEventChannel(id) {
  if (id) {
    var eventChannel = eventChannels[id];
    delete eventChannels[id];
    return eventChannel;
  }
  return eventChannelStack.shift();
}

var hooks = [
'onShow',
'onHide',
'onError',
'onPageNotFound',
'onThemeChange',
'onUnhandledRejection'];


function initEventChannel() {
  _vue.default.prototype.getOpenerEventChannel = function () {
    // 微信小程序使用自身getOpenerEventChannel
    {
      return this.$scope.getOpenerEventChannel();
    }
  };
  var callHook = _vue.default.prototype.__call_hook;
  _vue.default.prototype.__call_hook = function (hook, args) {
    if (hook === 'onLoad' && args && args.__id__) {
      this.__eventChannel__ = getEventChannel(args.__id__);
      delete args.__id__;
    }
    return callHook.call(this, hook, args);
  };
}

function initScopedSlotsParams() {
  var center = {};
  var parents = {};

  _vue.default.prototype.$hasScopedSlotsParams = function (vueId) {
    var has = center[vueId];
    if (!has) {
      parents[vueId] = this;
      this.$on('hook:destroyed', function () {
        delete parents[vueId];
      });
    }
    return has;
  };

  _vue.default.prototype.$getScopedSlotsParams = function (vueId, name, key) {
    var data = center[vueId];
    if (data) {
      var object = data[name] || {};
      return key ? object[key] : object;
    } else {
      parents[vueId] = this;
      this.$on('hook:destroyed', function () {
        delete parents[vueId];
      });
    }
  };

  _vue.default.prototype.$setScopedSlotsParams = function (name, value) {
    var vueIds = this.$options.propsData.vueId;
    if (vueIds) {
      var vueId = vueIds.split(',')[0];
      var object = center[vueId] = center[vueId] || {};
      object[name] = value;
      if (parents[vueId]) {
        parents[vueId].$forceUpdate();
      }
    }
  };

  _vue.default.mixin({
    destroyed: function destroyed() {
      var propsData = this.$options.propsData;
      var vueId = propsData && propsData.vueId;
      if (vueId) {
        delete center[vueId];
        delete parents[vueId];
      }
    } });

}

function parseBaseApp(vm, _ref3)


{var mocks = _ref3.mocks,initRefs = _ref3.initRefs;
  initEventChannel();
  {
    initScopedSlotsParams();
  }
  if (vm.$options.store) {
    _vue.default.prototype.$store = vm.$options.store;
  }
  uniIdMixin(_vue.default);

  _vue.default.prototype.mpHost = "mp-weixin";

  _vue.default.mixin({
    beforeCreate: function beforeCreate() {
      if (!this.$options.mpType) {
        return;
      }

      this.mpType = this.$options.mpType;

      this.$mp = _defineProperty({
        data: {} },
      this.mpType, this.$options.mpInstance);


      this.$scope = this.$options.mpInstance;

      delete this.$options.mpType;
      delete this.$options.mpInstance;
      if (this.mpType === 'page' && typeof getApp === 'function') {// hack vue-i18n
        var app = getApp();
        if (app.$vm && app.$vm.$i18n) {
          this._i18n = app.$vm.$i18n;
        }
      }
      if (this.mpType !== 'app') {
        initRefs(this);
        initMocks(this, mocks);
      }
    } });


  var appOptions = {
    onLaunch: function onLaunch(args) {
      if (this.$vm) {// 已经初始化过了，主要是为了百度，百度 onShow 在 onLaunch 之前
        return;
      }
      {
        if (wx.canIUse && !wx.canIUse('nextTick')) {// 事实 上2.2.3 即可，简单使用 2.3.0 的 nextTick 判断
          console.error('当前微信基础库版本过低，请将 微信开发者工具-详情-项目设置-调试基础库版本 更换为`2.3.0`以上');
        }
      }

      this.$vm = vm;

      this.$vm.$mp = {
        app: this };


      this.$vm.$scope = this;
      // vm 上也挂载 globalData
      this.$vm.globalData = this.globalData;

      this.$vm._isMounted = true;
      this.$vm.__call_hook('mounted', args);

      this.$vm.__call_hook('onLaunch', args);
    } };


  // 兼容旧版本 globalData
  appOptions.globalData = vm.$options.globalData || {};
  // 将 methods 中的方法挂在 getApp() 中
  var methods = vm.$options.methods;
  if (methods) {
    Object.keys(methods).forEach(function (name) {
      appOptions[name] = methods[name];
    });
  }

  initAppLocale(_vue.default, vm, wx.getSystemInfoSync().language || 'zh-Hans');

  initHooks(appOptions, hooks);

  return appOptions;
}

var mocks = ['__route__', '__wxExparserNodeId__', '__wxWebviewId__'];

function findVmByVueId(vm, vuePid) {
  var $children = vm.$children;
  // 优先查找直属(反向查找:https://github.com/dcloudio/uni-app/issues/1200)
  for (var i = $children.length - 1; i >= 0; i--) {
    var childVm = $children[i];
    if (childVm.$scope._$vueId === vuePid) {
      return childVm;
    }
  }
  // 反向递归查找
  var parentVm;
  for (var _i = $children.length - 1; _i >= 0; _i--) {
    parentVm = findVmByVueId($children[_i], vuePid);
    if (parentVm) {
      return parentVm;
    }
  }
}

function initBehavior(options) {
  return Behavior(options);
}

function isPage() {
  return !!this.route;
}

function initRelation(detail) {
  this.triggerEvent('__l', detail);
}

function selectAllComponents(mpInstance, selector, $refs) {
  var components = mpInstance.selectAllComponents(selector);
  components.forEach(function (component) {
    var ref = component.dataset.ref;
    $refs[ref] = component.$vm || component;
    {
      if (component.dataset.vueGeneric === 'scoped') {
        component.selectAllComponents('.scoped-ref').forEach(function (scopedComponent) {
          selectAllComponents(scopedComponent, selector, $refs);
        });
      }
    }
  });
}

function initRefs(vm) {
  var mpInstance = vm.$scope;
  Object.defineProperty(vm, '$refs', {
    get: function get() {
      var $refs = {};
      selectAllComponents(mpInstance, '.vue-ref', $refs);
      // TODO 暂不考虑 for 中的 scoped
      var forComponents = mpInstance.selectAllComponents('.vue-ref-in-for');
      forComponents.forEach(function (component) {
        var ref = component.dataset.ref;
        if (!$refs[ref]) {
          $refs[ref] = [];
        }
        $refs[ref].push(component.$vm || component);
      });
      return $refs;
    } });

}

function handleLink(event) {var _ref4 =



  event.detail || event.value,vuePid = _ref4.vuePid,vueOptions = _ref4.vueOptions; // detail 是微信,value 是百度(dipatch)

  var parentVm;

  if (vuePid) {
    parentVm = findVmByVueId(this.$vm, vuePid);
  }

  if (!parentVm) {
    parentVm = this.$vm;
  }

  vueOptions.parent = parentVm;
}

function parseApp(vm) {
  return parseBaseApp(vm, {
    mocks: mocks,
    initRefs: initRefs });

}

function createApp(vm) {
  App(parseApp(vm));
  return vm;
}

var encodeReserveRE = /[!'()*]/g;
var encodeReserveReplacer = function encodeReserveReplacer(c) {return '%' + c.charCodeAt(0).toString(16);};
var commaRE = /%2C/g;

// fixed encodeURIComponent which is more conformant to RFC3986:
// - escapes [!'()*]
// - preserve commas
var encode = function encode(str) {return encodeURIComponent(str).
  replace(encodeReserveRE, encodeReserveReplacer).
  replace(commaRE, ',');};

function stringifyQuery(obj) {var encodeStr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : encode;
  var res = obj ? Object.keys(obj).map(function (key) {
    var val = obj[key];

    if (val === undefined) {
      return '';
    }

    if (val === null) {
      return encodeStr(key);
    }

    if (Array.isArray(val)) {
      var result = [];
      val.forEach(function (val2) {
        if (val2 === undefined) {
          return;
        }
        if (val2 === null) {
          result.push(encodeStr(key));
        } else {
          result.push(encodeStr(key) + '=' + encodeStr(val2));
        }
      });
      return result.join('&');
    }

    return encodeStr(key) + '=' + encodeStr(val);
  }).filter(function (x) {return x.length > 0;}).join('&') : null;
  return res ? "?".concat(res) : '';
}

function parseBaseComponent(vueComponentOptions)


{var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},isPage = _ref5.isPage,initRelation = _ref5.initRelation;var _initVueComponent =
  initVueComponent(_vue.default, vueComponentOptions),_initVueComponent2 = _slicedToArray(_initVueComponent, 2),VueComponent = _initVueComponent2[0],vueOptions = _initVueComponent2[1];

  var options = _objectSpread({
    multipleSlots: true,
    addGlobalClass: true },
  vueOptions.options || {});


  {
    // 微信 multipleSlots 部分情况有 bug，导致内容顺序错乱 如 u-list，提供覆盖选项
    if (vueOptions['mp-weixin'] && vueOptions['mp-weixin'].options) {
      Object.assign(options, vueOptions['mp-weixin'].options);
    }
  }

  var componentOptions = {
    options: options,
    data: initData(vueOptions, _vue.default.prototype),
    behaviors: initBehaviors(vueOptions, initBehavior),
    properties: initProperties(vueOptions.props, false, vueOptions.__file),
    lifetimes: {
      attached: function attached() {
        var properties = this.properties;

        var options = {
          mpType: isPage.call(this) ? 'page' : 'component',
          mpInstance: this,
          propsData: properties };


        initVueIds(properties.vueId, this);

        // 处理父子关系
        initRelation.call(this, {
          vuePid: this._$vuePid,
          vueOptions: options });


        // 初始化 vue 实例
        this.$vm = new VueComponent(options);

        // 处理$slots,$scopedSlots（暂不支持动态变化$slots）
        initSlots(this.$vm, properties.vueSlots);

        // 触发首次 setData
        this.$vm.$mount();
      },
      ready: function ready() {
        // 当组件 props 默认值为 true，初始化时传入 false 会导致 created,ready 触发, 但 attached 不触发
        // https://developers.weixin.qq.com/community/develop/doc/00066ae2844cc0f8eb883e2a557800
        if (this.$vm) {
          this.$vm._isMounted = true;
          this.$vm.__call_hook('mounted');
          this.$vm.__call_hook('onReady');
        }
      },
      detached: function detached() {
        this.$vm && this.$vm.$destroy();
      } },

    pageLifetimes: {
      show: function show(args) {
        this.$vm && this.$vm.__call_hook('onPageShow', args);
      },
      hide: function hide() {
        this.$vm && this.$vm.__call_hook('onPageHide');
      },
      resize: function resize(size) {
        this.$vm && this.$vm.__call_hook('onPageResize', size);
      } },

    methods: {
      __l: handleLink,
      __e: handleEvent } };


  // externalClasses
  if (vueOptions.externalClasses) {
    componentOptions.externalClasses = vueOptions.externalClasses;
  }

  if (Array.isArray(vueOptions.wxsCallMethods)) {
    vueOptions.wxsCallMethods.forEach(function (callMethod) {
      componentOptions.methods[callMethod] = function (args) {
        return this.$vm[callMethod](args);
      };
    });
  }

  if (isPage) {
    return componentOptions;
  }
  return [componentOptions, VueComponent];
}

function parseComponent(vueComponentOptions) {
  return parseBaseComponent(vueComponentOptions, {
    isPage: isPage,
    initRelation: initRelation });

}

var hooks$1 = [
'onShow',
'onHide',
'onUnload'];


hooks$1.push.apply(hooks$1, PAGE_EVENT_HOOKS);

function parseBasePage(vuePageOptions, _ref6)


{var isPage = _ref6.isPage,initRelation = _ref6.initRelation;
  var pageOptions = parseComponent(vuePageOptions);

  initHooks(pageOptions.methods, hooks$1, vuePageOptions);

  pageOptions.methods.onLoad = function (query) {
    this.options = query;
    var copyQuery = Object.assign({}, query);
    delete copyQuery.__id__;
    this.$page = {
      fullPath: '/' + (this.route || this.is) + stringifyQuery(copyQuery) };

    this.$vm.$mp.query = query; // 兼容 mpvue
    this.$vm.__call_hook('onLoad', query);
  };

  return pageOptions;
}

function parsePage(vuePageOptions) {
  return parseBasePage(vuePageOptions, {
    isPage: isPage,
    initRelation: initRelation });

}

function createPage(vuePageOptions) {
  {
    return Component(parsePage(vuePageOptions));
  }
}

function createComponent(vueOptions) {
  {
    return Component(parseComponent(vueOptions));
  }
}

function createSubpackageApp(vm) {
  var appOptions = parseApp(vm);
  var app = getApp({
    allowDefault: true });

  vm.$scope = app;
  var globalData = app.globalData;
  if (globalData) {
    Object.keys(appOptions.globalData).forEach(function (name) {
      if (!hasOwn(globalData, name)) {
        globalData[name] = appOptions.globalData[name];
      }
    });
  }
  Object.keys(appOptions).forEach(function (name) {
    if (!hasOwn(app, name)) {
      app[name] = appOptions[name];
    }
  });
  if (isFn(appOptions.onShow) && wx.onAppShow) {
    wx.onAppShow(function () {for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {args[_key5] = arguments[_key5];}
      vm.__call_hook('onShow', args);
    });
  }
  if (isFn(appOptions.onHide) && wx.onAppHide) {
    wx.onAppHide(function () {for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {args[_key6] = arguments[_key6];}
      vm.__call_hook('onHide', args);
    });
  }
  if (isFn(appOptions.onLaunch)) {
    var args = wx.getLaunchOptionsSync && wx.getLaunchOptionsSync();
    vm.__call_hook('onLaunch', args);
  }
  return vm;
}

function createPlugin(vm) {
  var appOptions = parseApp(vm);
  if (isFn(appOptions.onShow) && wx.onAppShow) {
    wx.onAppShow(function () {for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {args[_key7] = arguments[_key7];}
      vm.__call_hook('onShow', args);
    });
  }
  if (isFn(appOptions.onHide) && wx.onAppHide) {
    wx.onAppHide(function () {for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {args[_key8] = arguments[_key8];}
      vm.__call_hook('onHide', args);
    });
  }
  if (isFn(appOptions.onLaunch)) {
    var args = wx.getLaunchOptionsSync && wx.getLaunchOptionsSync();
    vm.__call_hook('onLaunch', args);
  }
  return vm;
}

todos.forEach(function (todoApi) {
  protocols[todoApi] = false;
});

canIUses.forEach(function (canIUseApi) {
  var apiName = protocols[canIUseApi] && protocols[canIUseApi].name ? protocols[canIUseApi].name :
  canIUseApi;
  if (!wx.canIUse(apiName)) {
    protocols[canIUseApi] = false;
  }
});

var uni = {};

if (typeof Proxy !== 'undefined' && "mp-weixin" !== 'app-plus') {
  uni = new Proxy({}, {
    get: function get(target, name) {
      if (hasOwn(target, name)) {
        return target[name];
      }
      if (baseApi[name]) {
        return baseApi[name];
      }
      if (api[name]) {
        return promisify(name, api[name]);
      }
      {
        if (extraApi[name]) {
          return promisify(name, extraApi[name]);
        }
        if (todoApis[name]) {
          return promisify(name, todoApis[name]);
        }
      }
      if (eventApi[name]) {
        return eventApi[name];
      }
      if (!hasOwn(wx, name) && !hasOwn(protocols, name)) {
        return;
      }
      return promisify(name, wrapper(name, wx[name]));
    },
    set: function set(target, name, value) {
      target[name] = value;
      return true;
    } });

} else {
  Object.keys(baseApi).forEach(function (name) {
    uni[name] = baseApi[name];
  });

  {
    Object.keys(todoApis).forEach(function (name) {
      uni[name] = promisify(name, todoApis[name]);
    });
    Object.keys(extraApi).forEach(function (name) {
      uni[name] = promisify(name, todoApis[name]);
    });
  }

  Object.keys(eventApi).forEach(function (name) {
    uni[name] = eventApi[name];
  });

  Object.keys(api).forEach(function (name) {
    uni[name] = promisify(name, api[name]);
  });

  Object.keys(wx).forEach(function (name) {
    if (hasOwn(wx, name) || hasOwn(protocols, name)) {
      uni[name] = promisify(name, wrapper(name, wx[name]));
    }
  });
}

wx.createApp = createApp;
wx.createPage = createPage;
wx.createComponent = createComponent;
wx.createSubpackageApp = createSubpackageApp;
wx.createPlugin = createPlugin;

var uni$1 = uni;var _default =

uni$1;exports.default = _default;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ 2)))

/***/ }),

/***/ 11:
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js ***!
  \**********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return normalizeComponent; });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent (
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier, /* server only */
  shadowMode, /* vue-cli only */
  components, // fixed by xxxxxx auto components
  renderjs // fixed by xxxxxx renderjs
) {
  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // fixed by xxxxxx auto components
  if (components) {
    if (!options.components) {
      options.components = {}
    }
    var hasOwn = Object.prototype.hasOwnProperty
    for (var name in components) {
      if (hasOwn.call(components, name) && !hasOwn.call(options.components, name)) {
        options.components[name] = components[name]
      }
    }
  }
  // fixed by xxxxxx renderjs
  if (renderjs) {
    (renderjs.beforeCreate || (renderjs.beforeCreate = [])).unshift(function() {
      this[renderjs.__module] = this
    });
    (options.mixins || (options.mixins = [])).push(renderjs)
  }

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functioal component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ }),

/***/ 12:
/*!**********************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/watchapp-frontend/common/user-info-utils.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(uni) {var LOGIN_USER_INFO = 'LOGIN_USER_INFO';

function updateUserInfo(refreshInfo) {
  var userInfo = getUserInfo();
  userInfo.accessToken = refreshInfo['access_token'];
  userInfo.expiresIn = refreshInfo['expires_in'];
  userInfo.lastLoginDatetime = new Date();
  uni.setStorageSync(LOGIN_USER_INFO, userInfo);
}

function setUserInfo(userInfo) {
  uni.setStorageSync(LOGIN_USER_INFO, userInfo);
}

function getUserInfo() {
  return uni.getStorageSync(LOGIN_USER_INFO);
}

function getAccessToken() {
  var userInfo = getUserInfo();
  if (userInfo) {
    return userInfo.accessToken;
  }
  return null;
}

function removeUserInfo() {
  uni.removeStorageSync(LOGIN_USER_INFO);
}

function isMasterOrShopOwner() {
  var userInfo = getUserInfo();
  var roles = userInfo.roles;
  if (roles) {
    for (var i = 0; i < roles.length; i++) {
      var role = roles[i];
      if (role.name == 'ROLE_MASTER' || role.name == 'ROLE_SHOPOWNER') {
        return true;
      }
    }
  }
  return false;
}

function updateLoginStatus(loginStatus) {
  var userInfo = getUserInfo();
  userInfo['loginStatus'] = loginStatus;
  uni.setStorageSync(LOGIN_USER_INFO, userInfo);
}
module.exports = {
  updateUserInfo: updateUserInfo,
  setUserInfo: setUserInfo,
  getUserInfo: getUserInfo,
  getAccessToken: getAccessToken,
  removeUserInfo: removeUserInfo,
  isMasterOrShopOwner: isMasterOrShopOwner,
  updateLoginStatus: updateLoginStatus };
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-mp-weixin/dist/index.js */ 1)["default"]))

/***/ }),

/***/ 13:
/*!**********************************************************************!*\
  !*** C:/Users/Administrator/Desktop/watchapp-frontend/common/api.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(uni) {var _regenerator = _interopRequireDefault(__webpack_require__(/*! ./node_modules/@babel/runtime/regenerator */ 14));var _userInfoUtils = _interopRequireDefault(__webpack_require__(/*! @/common/user-info-utils.js */ 12));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function _iterableToArrayLimit(arr, i) {if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"] != null) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {Promise.resolve(value).then(_next, _throw);}}function _asyncToGenerator(fn) {return function () {var self = this,args = arguments;return new Promise(function (resolve, reject) {var gen = fn.apply(self, args);function _next(value) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);}function _throw(err) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);}_next(undefined);});};}
var REQUEST_METHOD = {
  GET: 'GET',
  POST: 'POST',
  PUT: 'PUT',
  DELETE: 'DELETE' };


var defaultSetting = {
  baseUrl: '',
  url: '',
  data: {},
  method: REQUEST_METHOD.GET,
  header: {
    'content-type': 'application/x-www-form-urlencoded' },

  dataType: 'json',
  isLocalResult: true, // RestResult, statusCode == 200 && data.code == 200
  isApiRequest: false // true: ?access_token=xx, false: /
};

function request(options) {
  options = initOptions(options);
  return sendRequest(options);
}

function get(options) {
  options.method = REQUEST_METHOD.GET;
  return request(options);
}

function post(options) {
  options.method = REQUEST_METHOD.POST;
  return request(options);
}


function apiGet(options) {
  options.isApiRequest = true;
  return get(options);
}

function apiPost(options) {
  options.isApiRequest = true;
  return post(options);
}

function sendRequest(options) {
  return new Promise( /*#__PURE__*/function () {var _ref = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee(resolve, reject) {var _yield$uni$request, _yield$uni$request2, error, res;return _regenerator.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:_context.next = 2;return (
                uni.request(options));case 2:_yield$uni$request = _context.sent;_yield$uni$request2 = _slicedToArray(_yield$uni$request, 2);error = _yield$uni$request2[0];res = _yield$uni$request2[1];
              if (options.isLocalResult && checkLocalResponseSuccess(res) ||
              !options.isLocalResult && checkResponseSuccess(res)) {
                console.log('request sucess');
                resolve(res);
              } else {
                console.log('request fail');
                reject(res);
              }case 7:case "end":return _context.stop();}}}, _callee);}));return function (_x, _x2) {return _ref.apply(this, arguments);};}());

}

function initOptions(options) {
  if (options) {
    options.baseUrl = options.baseUrl || defaultSetting.baseUrl;
    // url: /login, baseUrl: null, defaultSetting.baseUrl = http://localhost:90
    // 自动拼接baseUrl, http://localhost:90/login
    options.url = (options.baseUrl ? options.baseUrl : '') + (
    options.url ? options.url : defaultSetting.url);

    options.method = options.method || defaultSetting.method;
    options.header = options.header || defaultSetting.header;
    options.dataType = options.dataType || defaultSetting.dataType;
    options.data = options.data || defaultSetting.data;
    options.isLocalResult = typeof options.isLocalResult != 'undefined' ? options.isLocalResult : defaultSetting.isLocalResult;
    options.isApiRequest = typeof options.isApiRequest != 'undefined' ? options.isApiRequest : defaultSetting.isApiRequest;
    // 自动携带access_token参数
    if (options.isApiRequest) {
      options.data['access_token'] = _userInfoUtils.default.getAccessToken();
    } else {
      delete options.data['access_token'];
    }
    // 
    // if (!options.baseUrl) {
    // 	options.baseUrl = defaultSetting.baseUrl
    // }
  }
  return options;
}

function checkLocalResponseSuccess(res) {
  // statusCode == 200 && data.code == 200
  return checkResponseSuccess(res) && res.data && res.data.code == 200;
}

function checkResponseSuccess(res) {
  // statusCode == 200
  return res && res.statusCode == 200;
}

module.exports = {
  defaultSetting: defaultSetting,
  request: request,
  get: get,
  post: post,
  apiGet: apiGet,
  apiPost: apiPost,
  checkLocalResponseSuccess: checkLocalResponseSuccess,
  checkResponseSuccess: checkResponseSuccess };
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-mp-weixin/dist/index.js */ 1)["default"]))

/***/ }),

/***/ 14:
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! regenerator-runtime */ 15);

/***/ }),

/***/ 15:
/*!************************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime-module.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// This method of obtaining a reference to the global object needs to be
// kept identical to the way it is obtained in runtime.js
var g = (function() {
  return this || (typeof self === "object" && self);
})() || Function("return this")();

// Use `getOwnPropertyNames` because not all browsers support calling
// `hasOwnProperty` on the global `self` object in a worker. See #183.
var hadRuntime = g.regeneratorRuntime &&
  Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;

// Save the old regeneratorRuntime in case it needs to be restored later.
var oldRuntime = hadRuntime && g.regeneratorRuntime;

// Force reevalutation of runtime.js.
g.regeneratorRuntime = undefined;

module.exports = __webpack_require__(/*! ./runtime */ 16);

if (hadRuntime) {
  // Restore the original runtime.
  g.regeneratorRuntime = oldRuntime;
} else {
  // Remove the global property added by runtime.js.
  try {
    delete g.regeneratorRuntime;
  } catch(e) {
    g.regeneratorRuntime = undefined;
  }
}


/***/ }),

/***/ 16:
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
})(
  // In sloppy mode, unbound `this` refers to the global object, fallback to
  // Function constructor if we're in global strict mode. That is sadly a form
  // of indirect eval which violates Content Security Policy.
  (function() {
    return this || (typeof self === "object" && self);
  })() || Function("return this")()
);


/***/ }),

/***/ 17:
/*!******************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/watchapp-frontend/common/login-utils.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(uni) {var _api = _interopRequireDefault(__webpack_require__(/*! @/common/api.js */ 13));
var _userInfoUtils = _interopRequireDefault(__webpack_require__(/*! @/common/user-info-utils.js */ 12));
var _websocketUtils = _interopRequireDefault(__webpack_require__(/*! @/common/websocket-utils.js */ 18));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

var CLIENT_ID = 'wxmp';
var CLIENT_SECRET = '123456';

function checkTokenValidity() {
  var userInfo = _userInfoUtils.default.getUserInfo();
  return new Promise(function (resolve, reject) {
    if (userInfo && userInfo.expiresIn && userInfo.lastLoginDatetime) {
      console.log('expiresIn check');
      var currentDatetime = new Date().getTime();
      var lastLoginDatetime = new Date(userInfo.lastLoginDatetime).getTime();

      if (currentDatetime - userInfo.expiresIn * 1000 > lastLoginDatetime) {
        console.log('token expire');
        // openLoginPage()
        // reject(refreshAccessToken())
        refreshAccessToken().
        then(function (res) {
          _userInfoUtils.default.updateUserInfo(res.data);
          console.log('refreshAccessToken success');
          // setTimeout(function(){
          // WebSocketUtils.reconnet()
          // },1000)
          resolve();
        }).
        catch(function (res) {
          console.log('refreshAccessToken fail');
          reject();
        });
      } else {
        resolve();
      }

    } else {
      openLoginPage();
      reject();
    }
  });
}

function refreshAccessToken() {
  var refreshToken = _userInfoUtils.default.getUserInfo().refreshToken;
  // 字符ES6 撇号``, 引号''
  // /oauth/token？
  return _api.default.post({
    url: "/oauth/token?grant_type=refresh_token&refresh_token=".concat(refreshToken, "&client_id=").concat(CLIENT_ID, "&client_secret=").concat(CLIENT_SECRET),
    isLocalResult: false });


}

function openLoginPage() {
  uni.navigateTo({
    url: '/pages/my/login/login' });

}

var LoginUtils = {
  checkTokenValidity: checkTokenValidity,
  openLoginPage: openLoginPage };


module.exports = LoginUtils;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-mp-weixin/dist/index.js */ 1)["default"]))

/***/ }),

/***/ 18:
/*!**********************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/watchapp-frontend/common/websocket-utils.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(uni) {var _api = _interopRequireDefault(__webpack_require__(/*! @/common/api.js */ 13));
var _userInfoUtils = _interopRequireDefault(__webpack_require__(/*! @/common/user-info-utils.js */ 12));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}
// socket设置
var webSocketSetting = {
  // socket地址
  domain: '',
  // socket最大重连次数
  reconnetMax: 3 };

// 心跳间隔时长 单位毫秒
var heartBeatTime = 10000;
// 记录心跳的标志
var heartBeatFlag = 0;
// onMessage需要触发的事件列表
var socketHandles = {
  size: 0 };

// socket对象
var socket = null;
// socket重连次数
var reconnetCount = 0;

/** 连接socket方法 
                        * @param {obj} option 可选: open,error,close
                        */
function connet(option) {
  console.log('socket connet...', webSocketSetting.domain, _userInfoUtils.default.getAccessToken());
  var userInfo = _userInfoUtils.default.getUserInfo();
  if (!userInfo) {
    console.log('socket connet failure...accessToken is null...');
    return 0;
  }
  close();
  return new Promise(function (resolve, reject) {
    var subPath = userInfo.id + "/" + userInfo.accessToken;
    var socketObj = uni.connectSocket({
      url: webSocketSetting.domain + subPath,
      success: function success(res) {
        //开启心跳
        console.log("打开websocket链接有效");
        heartBeat();
      },
      fail: function fail(res) {
        console.log("打开websocket链接无效");
      } });

    socket = socketObj;
    // socket打开时的监听事件
    socketOnOpen(option, socketObj, resolve);
    // socket 关闭,出错,推送消息的监听
    socketOnMessage();
    socketOnError(option, reject);
    socketOnClose();
  });
}

function socketOnOpen(option, socketObj, resolve) {
  uni.onSocketOpen(function (res) {
    console.log('WebSocket连接已打开...', socket, socketObj);
    resolve(res);
    reconnetCount = 0;
  });
}

function socketOnMessage() {
  console.log('socketOnMessage...');
  uni.onSocketMessage(function (res) {
    console.log('socketOnMessage...onSocketMessage...', res, socketHandles);

    var resData = JSON.parse(res.data);
    console.log('socketOnMessage...onSocketMessage...res', resData);
    if (!resData || 1 != resData.type) {
      return 0;
    }
    // uni.showToast({
    // 	icon: 'none',
    // 	title:"您有订单发生变化"
    // })
    for (var index in socketHandles) {
      console.log('onSocketMessage socketHandles index...'.index);
      if (index == 'size') {
        continue;
      }
      socketHandles[index](resData.data);
    }
  });
}
function socketOnClose(option, rejectEven) {
  uni.onSocketClose(function (closeRes) {
    console.log('onSocketClose...', closeRes);
    if (1006 != closeRes.code) {
      return;
    }
    socket = null;
    reconnetCount = 0;
    reconnet(option).catch(function (res) {
      if (rejectEven) {
        rejectEven(errorRes);
      }
    });
  });
}
function socketOnError(option, rejectEven) {
  uni.onSocketError(function (errorRes) {
    console.log('errorRes...', errorRes);
    reconnet(option).catch(function (res) {
      if (rejectEven) {
        rejectEven(errorRes);
      }
    });
  });
}

function close() {
  console.log('socket close...', socket);
  if (!socket || socket.readyState != 1) {
    console.log('socket close failure...socket is null...');
    return 0;
  }
  uni.closeSocket({
    success: function success() {
      socket = null;
      heartBeatFlag = 0;
      reconnetCount = 0;
      socketHandles = [];
    } });

}

function reconnet(option) {
  console.log('socket reconnet...');
  return new Promise(function (resolve, reject) {
    console.log('reconnet reconnetCount: ' + reconnetCount);
    if (reconnetCount >= webSocketSetting.reconnetMax) {
      reject();
      return 0;
    }
    setTimeout(function () {
      console.log('reconnet setTimeout reconnetCount: ' + reconnetCount);
      // debugger
      reconnetCount++;
      connet(option).then(function (res) {
        console.log('重连成功...');
        resolve(res);
      }).catch(function (res) {
        console.log('重连失败...');
        reconnet(option).catch(function (res) {
          reject(res);
        });
      });
    }, 1000);
  });
}

function sendMsg(data) {
  console.log('socket sendMsg...');
  uni.sendSocketMessage({
    data: data });

}

function sendData(data) {
  console.log('socket sendData...');
  var dataStr = generateStationNotice(data);
  if (dataStr) {
    sendMsg(dataStr);
  }
}

function generateStationNotice(data) {
  var orderStationNoticeStructure = {
    orderId: 0,
    orderStep: 0,
    isRead: false,
    notifyShopId: 0,
    notifyCustomerId: 0,
    message: "",
    createdDatetime: new Date().getTime(),
    createdBy: 0,
    readDatetime: "",
    readBy: 0 };

  if (data.orderId) {
    orderStationNoticeStructure.orderId = data.orderId;
  }
  if (data.orderStep) {
    orderStationNoticeStructure.orderStep = data.orderStep;
  }
  if (data.notifyShopId) {
    orderStationNoticeStructure.notifyShopId = data.notifyShopId;
  }
  if (data.notifyCustomerId) {
    orderStationNoticeStructure.notifyCustomerId = data.notifyCustomerId;
  }
  return JSON.stringify({
    data: orderStationNoticeStructure,
    type: 1 });

}

function heartBeat() {
  console.log("heartBeat...");
  if (!socket || socket.readyState != 1) {
    return 0;
  }
  console.log("heartBeat...心跳包发送...");
  heartBeatFlag = setTimeout(function () {
    sendMsg(JSON.stringify({
      type: 0,
      message: "HeartbeatHandle" }));

    heartBeat();
  }, heartBeatTime);
}

function countHandles() {
  console.log("countHandles...len...", socketHandles.length);
  return socketHandles.size;
}

function addHandle(key, func) {
  console.log('addHandle ... func ', func, typeof func);
  if (typeof func != 'function') {
    console.log('func is not function...');
    return 0;
  }
  socketHandles['size'] += 1;
  socketHandles[key] = func;
}

function deleteHandle(key) {
  if (socketHandles.size <= 0) {
    return 0;
  }
  delete socketHandles[key];
}

function clearHandles() {
  socketHandles = {
    size: 0 };

}

module.exports = {
  webSocketSetting: webSocketSetting,
  heartBeat: heartBeat,
  connet: connet,
  close: close,
  reconnet: reconnet,
  sendMsg: sendMsg,
  sendData: sendData,
  countHandles: countHandles,
  clearHandles: clearHandles,
  addHandle: addHandle,
  deleteHandle: deleteHandle };
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-mp-weixin/dist/index.js */ 1)["default"]))

/***/ }),

/***/ 19:
/*!********************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/watchapp-frontend/common/message-utils.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(uni) {function showMessage(msg) {
  return new Promise(function (resolve, reject) {
    uni.showToast({
      title: msg,
      icon: 'none',
      duration: 2000,
      success: resolve(),
      fail: reject() });

  });
}

function showLoading(msg) {
  return new Promise(function (resolve, reject) {
    uni.showLoading({
      title: msg,
      mask: true,
      success: resolve(),
      fail: reject() });

  });
}
function hideLoading() {
  uni.hideLoading();
}

module.exports = {
  showMessage: showMessage,
  showLoading: showLoading,
  hideLoading: hideLoading };
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-mp-weixin/dist/index.js */ 1)["default"]))

/***/ }),

/***/ 191:
/*!****************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/watchapp-frontend/components/tki-qrcode/qrcode.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(uni) {Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var QRCode = {};
(function () {
  /**
               * 获取单个字符的utf8编码
               * unicode BMP平面约65535个字符
               * @param {num} code
               * return {array}
               */
  function unicodeFormat8(code) {
    // 1 byte
    var c0, c1, c2;
    if (code < 128) {
      return [code];
      // 2 bytes
    } else if (code < 2048) {
      c0 = 192 + (code >> 6);
      c1 = 128 + (code & 63);
      return [c0, c1];
      // 3 bytes
    } else {
      c0 = 224 + (code >> 12);
      c1 = 128 + (code >> 6 & 63);
      c2 = 128 + (code & 63);
      return [c0, c1, c2];
    }
  }
  /**
     * 获取字符串的utf8编码字节串
     * @param {string} string
     * @return {array}
     */
  function getUTF8Bytes(string) {
    var utf8codes = [];
    for (var i = 0; i < string.length; i++) {
      var code = string.charCodeAt(i);
      var utf8 = unicodeFormat8(code);
      for (var j = 0; j < utf8.length; j++) {
        utf8codes.push(utf8[j]);
      }
    }
    return utf8codes;
  }
  /**
     * 二维码算法实现
     * @param {string} data              要编码的信息字符串
     * @param {num} errorCorrectLevel 纠错等级
     */
  function QRCodeAlg(data, errorCorrectLevel) {
    this.typeNumber = -1; //版本
    this.errorCorrectLevel = errorCorrectLevel;
    this.modules = null; //二维矩阵，存放最终结果
    this.moduleCount = 0; //矩阵大小
    this.dataCache = null; //数据缓存
    this.rsBlocks = null; //版本数据信息
    this.totalDataCount = -1; //可使用的数据量
    this.data = data;
    this.utf8bytes = getUTF8Bytes(data);
    this.make();
  }
  QRCodeAlg.prototype = {
    constructor: QRCodeAlg,
    /**
                             * 获取二维码矩阵大小
                             * @return {num} 矩阵大小
                             */
    getModuleCount: function getModuleCount() {
      return this.moduleCount;
    },
    /**
        * 编码
        */
    make: function make() {
      this.getRightType();
      this.dataCache = this.createData();
      this.createQrcode();
    },
    /**
        * 设置二位矩阵功能图形
        * @param  {bool} test 表示是否在寻找最好掩膜阶段
        * @param  {num} maskPattern 掩膜的版本
        */
    makeImpl: function makeImpl(maskPattern) {
      this.moduleCount = this.typeNumber * 4 + 17;
      this.modules = new Array(this.moduleCount);
      for (var row = 0; row < this.moduleCount; row++) {
        this.modules[row] = new Array(this.moduleCount);
      }
      this.setupPositionProbePattern(0, 0);
      this.setupPositionProbePattern(this.moduleCount - 7, 0);
      this.setupPositionProbePattern(0, this.moduleCount - 7);
      this.setupPositionAdjustPattern();
      this.setupTimingPattern();
      this.setupTypeInfo(true, maskPattern);
      if (this.typeNumber >= 7) {
        this.setupTypeNumber(true);
      }
      this.mapData(this.dataCache, maskPattern);
    },
    /**
        * 设置二维码的位置探测图形
        * @param  {num} row 探测图形的中心横坐标
        * @param  {num} col 探测图形的中心纵坐标
        */
    setupPositionProbePattern: function setupPositionProbePattern(row, col) {
      for (var r = -1; r <= 7; r++) {
        if (row + r <= -1 || this.moduleCount <= row + r) continue;
        for (var c = -1; c <= 7; c++) {
          if (col + c <= -1 || this.moduleCount <= col + c) continue;
          if (0 <= r && r <= 6 && (c == 0 || c == 6) || 0 <= c && c <= 6 && (r == 0 || r == 6) || 2 <= r && r <= 4 && 2 <= c && c <= 4) {
            this.modules[row + r][col + c] = true;
          } else {
            this.modules[row + r][col + c] = false;
          }
        }
      }
    },
    /**
        * 创建二维码
        * @return {[type]} [description]
        */
    createQrcode: function createQrcode() {
      var minLostPoint = 0;
      var pattern = 0;
      var bestModules = null;
      for (var i = 0; i < 8; i++) {
        this.makeImpl(i);
        var lostPoint = QRUtil.getLostPoint(this);
        if (i == 0 || minLostPoint > lostPoint) {
          minLostPoint = lostPoint;
          pattern = i;
          bestModules = this.modules;
        }
      }
      this.modules = bestModules;
      this.setupTypeInfo(false, pattern);
      if (this.typeNumber >= 7) {
        this.setupTypeNumber(false);
      }
    },
    /**
        * 设置定位图形
        * @return {[type]} [description]
        */
    setupTimingPattern: function setupTimingPattern() {
      for (var r = 8; r < this.moduleCount - 8; r++) {
        if (this.modules[r][6] != null) {
          continue;
        }
        this.modules[r][6] = r % 2 == 0;
        if (this.modules[6][r] != null) {
          continue;
        }
        this.modules[6][r] = r % 2 == 0;
      }
    },
    /**
        * 设置矫正图形
        * @return {[type]} [description]
        */
    setupPositionAdjustPattern: function setupPositionAdjustPattern() {
      var pos = QRUtil.getPatternPosition(this.typeNumber);
      for (var i = 0; i < pos.length; i++) {
        for (var j = 0; j < pos.length; j++) {
          var row = pos[i];
          var col = pos[j];
          if (this.modules[row][col] != null) {
            continue;
          }
          for (var r = -2; r <= 2; r++) {
            for (var c = -2; c <= 2; c++) {
              if (r == -2 || r == 2 || c == -2 || c == 2 || r == 0 && c == 0) {
                this.modules[row + r][col + c] = true;
              } else {
                this.modules[row + r][col + c] = false;
              }
            }
          }
        }
      }
    },
    /**
        * 设置版本信息（7以上版本才有）
        * @param  {bool} test 是否处于判断最佳掩膜阶段
        * @return {[type]}      [description]
        */
    setupTypeNumber: function setupTypeNumber(test) {
      var bits = QRUtil.getBCHTypeNumber(this.typeNumber);
      for (var i = 0; i < 18; i++) {
        var mod = !test && (bits >> i & 1) == 1;
        this.modules[Math.floor(i / 3)][i % 3 + this.moduleCount - 8 - 3] = mod;
        this.modules[i % 3 + this.moduleCount - 8 - 3][Math.floor(i / 3)] = mod;
      }
    },
    /**
        * 设置格式信息（纠错等级和掩膜版本）
        * @param  {bool} test
        * @param  {num} maskPattern 掩膜版本
        * @return {}
        */
    setupTypeInfo: function setupTypeInfo(test, maskPattern) {
      var data = QRErrorCorrectLevel[this.errorCorrectLevel] << 3 | maskPattern;
      var bits = QRUtil.getBCHTypeInfo(data);
      // vertical
      for (var i = 0; i < 15; i++) {
        var mod = !test && (bits >> i & 1) == 1;
        if (i < 6) {
          this.modules[i][8] = mod;
        } else if (i < 8) {
          this.modules[i + 1][8] = mod;
        } else {
          this.modules[this.moduleCount - 15 + i][8] = mod;
        }
        // horizontal
        var mod = !test && (bits >> i & 1) == 1;
        if (i < 8) {
          this.modules[8][this.moduleCount - i - 1] = mod;
        } else if (i < 9) {
          this.modules[8][15 - i - 1 + 1] = mod;
        } else {
          this.modules[8][15 - i - 1] = mod;
        }
      }
      // fixed module
      this.modules[this.moduleCount - 8][8] = !test;
    },
    /**
        * 数据编码
        * @return {[type]} [description]
        */
    createData: function createData() {
      var buffer = new QRBitBuffer();
      var lengthBits = this.typeNumber > 9 ? 16 : 8;
      buffer.put(4, 4); //添加模式
      buffer.put(this.utf8bytes.length, lengthBits);
      for (var i = 0, l = this.utf8bytes.length; i < l; i++) {
        buffer.put(this.utf8bytes[i], 8);
      }
      if (buffer.length + 4 <= this.totalDataCount * 8) {
        buffer.put(0, 4);
      }
      // padding
      while (buffer.length % 8 != 0) {
        buffer.putBit(false);
      }
      // padding
      while (true) {
        if (buffer.length >= this.totalDataCount * 8) {
          break;
        }
        buffer.put(QRCodeAlg.PAD0, 8);
        if (buffer.length >= this.totalDataCount * 8) {
          break;
        }
        buffer.put(QRCodeAlg.PAD1, 8);
      }
      return this.createBytes(buffer);
    },
    /**
        * 纠错码编码
        * @param  {buffer} buffer 数据编码
        * @return {[type]}
        */
    createBytes: function createBytes(buffer) {
      var offset = 0;
      var maxDcCount = 0;
      var maxEcCount = 0;
      var length = this.rsBlock.length / 3;
      var rsBlocks = new Array();
      for (var i = 0; i < length; i++) {
        var count = this.rsBlock[i * 3 + 0];
        var totalCount = this.rsBlock[i * 3 + 1];
        var dataCount = this.rsBlock[i * 3 + 2];
        for (var j = 0; j < count; j++) {
          rsBlocks.push([dataCount, totalCount]);
        }
      }
      var dcdata = new Array(rsBlocks.length);
      var ecdata = new Array(rsBlocks.length);
      for (var r = 0; r < rsBlocks.length; r++) {
        var dcCount = rsBlocks[r][0];
        var ecCount = rsBlocks[r][1] - dcCount;
        maxDcCount = Math.max(maxDcCount, dcCount);
        maxEcCount = Math.max(maxEcCount, ecCount);
        dcdata[r] = new Array(dcCount);
        for (var i = 0; i < dcdata[r].length; i++) {
          dcdata[r][i] = 0xff & buffer.buffer[i + offset];
        }
        offset += dcCount;
        var rsPoly = QRUtil.getErrorCorrectPolynomial(ecCount);
        var rawPoly = new QRPolynomial(dcdata[r], rsPoly.getLength() - 1);
        var modPoly = rawPoly.mod(rsPoly);
        ecdata[r] = new Array(rsPoly.getLength() - 1);
        for (var i = 0; i < ecdata[r].length; i++) {
          var modIndex = i + modPoly.getLength() - ecdata[r].length;
          ecdata[r][i] = modIndex >= 0 ? modPoly.get(modIndex) : 0;
        }
      }
      var data = new Array(this.totalDataCount);
      var index = 0;
      for (var i = 0; i < maxDcCount; i++) {
        for (var r = 0; r < rsBlocks.length; r++) {
          if (i < dcdata[r].length) {
            data[index++] = dcdata[r][i];
          }
        }
      }
      for (var i = 0; i < maxEcCount; i++) {
        for (var r = 0; r < rsBlocks.length; r++) {
          if (i < ecdata[r].length) {
            data[index++] = ecdata[r][i];
          }
        }
      }
      return data;

    },
    /**
        * 布置模块，构建最终信息
        * @param  {} data
        * @param  {} maskPattern
        * @return {}
        */
    mapData: function mapData(data, maskPattern) {
      var inc = -1;
      var row = this.moduleCount - 1;
      var bitIndex = 7;
      var byteIndex = 0;
      for (var col = this.moduleCount - 1; col > 0; col -= 2) {
        if (col == 6) col--;
        while (true) {
          for (var c = 0; c < 2; c++) {
            if (this.modules[row][col - c] == null) {
              var dark = false;
              if (byteIndex < data.length) {
                dark = (data[byteIndex] >>> bitIndex & 1) == 1;
              }
              var mask = QRUtil.getMask(maskPattern, row, col - c);
              if (mask) {
                dark = !dark;
              }
              this.modules[row][col - c] = dark;
              bitIndex--;
              if (bitIndex == -1) {
                byteIndex++;
                bitIndex = 7;
              }
            }
          }
          row += inc;
          if (row < 0 || this.moduleCount <= row) {
            row -= inc;
            inc = -inc;
            break;
          }
        }
      }
    } };

  /**
          * 填充字段
          */
  QRCodeAlg.PAD0 = 0xEC;
  QRCodeAlg.PAD1 = 0x11;
  //---------------------------------------------------------------------
  // 纠错等级对应的编码
  //---------------------------------------------------------------------
  var QRErrorCorrectLevel = [1, 0, 3, 2];
  //---------------------------------------------------------------------
  // 掩膜版本
  //---------------------------------------------------------------------
  var QRMaskPattern = {
    PATTERN000: 0,
    PATTERN001: 1,
    PATTERN010: 2,
    PATTERN011: 3,
    PATTERN100: 4,
    PATTERN101: 5,
    PATTERN110: 6,
    PATTERN111: 7 };

  //---------------------------------------------------------------------
  // 工具类
  //---------------------------------------------------------------------
  var QRUtil = {
    /*
                 每个版本矫正图形的位置
                  */
    PATTERN_POSITION_TABLE: [
    [],
    [6, 18],
    [6, 22],
    [6, 26],
    [6, 30],
    [6, 34],
    [6, 22, 38],
    [6, 24, 42],
    [6, 26, 46],
    [6, 28, 50],
    [6, 30, 54],
    [6, 32, 58],
    [6, 34, 62],
    [6, 26, 46, 66],
    [6, 26, 48, 70],
    [6, 26, 50, 74],
    [6, 30, 54, 78],
    [6, 30, 56, 82],
    [6, 30, 58, 86],
    [6, 34, 62, 90],
    [6, 28, 50, 72, 94],
    [6, 26, 50, 74, 98],
    [6, 30, 54, 78, 102],
    [6, 28, 54, 80, 106],
    [6, 32, 58, 84, 110],
    [6, 30, 58, 86, 114],
    [6, 34, 62, 90, 118],
    [6, 26, 50, 74, 98, 122],
    [6, 30, 54, 78, 102, 126],
    [6, 26, 52, 78, 104, 130],
    [6, 30, 56, 82, 108, 134],
    [6, 34, 60, 86, 112, 138],
    [6, 30, 58, 86, 114, 142],
    [6, 34, 62, 90, 118, 146],
    [6, 30, 54, 78, 102, 126, 150],
    [6, 24, 50, 76, 102, 128, 154],
    [6, 28, 54, 80, 106, 132, 158],
    [6, 32, 58, 84, 110, 136, 162],
    [6, 26, 54, 82, 110, 138, 166],
    [6, 30, 58, 86, 114, 142, 170]],

    G15: 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0,
    G18: 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0,
    G15_MASK: 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1,
    /*
                                                             BCH编码格式信息
                                                              */
    getBCHTypeInfo: function getBCHTypeInfo(data) {
      var d = data << 10;
      while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15) >= 0) {
        d ^= QRUtil.G15 << QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15);
      }
      return (data << 10 | d) ^ QRUtil.G15_MASK;
    },
    /*
       BCH编码版本信息
        */
    getBCHTypeNumber: function getBCHTypeNumber(data) {
      var d = data << 12;
      while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18) >= 0) {
        d ^= QRUtil.G18 << QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18);
      }
      return data << 12 | d;
    },
    /*
       获取BCH位信息
        */
    getBCHDigit: function getBCHDigit(data) {
      var digit = 0;
      while (data != 0) {
        digit++;
        data >>>= 1;
      }
      return digit;
    },
    /*
       获取版本对应的矫正图形位置
        */
    getPatternPosition: function getPatternPosition(typeNumber) {
      return QRUtil.PATTERN_POSITION_TABLE[typeNumber - 1];
    },
    /*
       掩膜算法
        */
    getMask: function getMask(maskPattern, i, j) {
      switch (maskPattern) {
        case QRMaskPattern.PATTERN000:
          return (i + j) % 2 == 0;
        case QRMaskPattern.PATTERN001:
          return i % 2 == 0;
        case QRMaskPattern.PATTERN010:
          return j % 3 == 0;
        case QRMaskPattern.PATTERN011:
          return (i + j) % 3 == 0;
        case QRMaskPattern.PATTERN100:
          return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 == 0;
        case QRMaskPattern.PATTERN101:
          return i * j % 2 + i * j % 3 == 0;
        case QRMaskPattern.PATTERN110:
          return (i * j % 2 + i * j % 3) % 2 == 0;
        case QRMaskPattern.PATTERN111:
          return (i * j % 3 + (i + j) % 2) % 2 == 0;
        default:
          throw new Error("bad maskPattern:" + maskPattern);}

    },
    /*
       获取RS的纠错多项式
        */
    getErrorCorrectPolynomial: function getErrorCorrectPolynomial(errorCorrectLength) {
      var a = new QRPolynomial([1], 0);
      for (var i = 0; i < errorCorrectLength; i++) {
        a = a.multiply(new QRPolynomial([1, QRMath.gexp(i)], 0));
      }
      return a;
    },
    /*
       获取评价
        */
    getLostPoint: function getLostPoint(qrCode) {
      var moduleCount = qrCode.getModuleCount(),
      lostPoint = 0,
      darkCount = 0;
      for (var row = 0; row < moduleCount; row++) {
        var sameCount = 0;
        var head = qrCode.modules[row][0];
        for (var col = 0; col < moduleCount; col++) {
          var current = qrCode.modules[row][col];
          //level 3 评价
          if (col < moduleCount - 6) {
            if (current && !qrCode.modules[row][col + 1] && qrCode.modules[row][col + 2] && qrCode.modules[row][col + 3] && qrCode.modules[row][col + 4] && !qrCode.modules[row][col + 5] && qrCode.modules[row][col + 6]) {
              if (col < moduleCount - 10) {
                if (qrCode.modules[row][col + 7] && qrCode.modules[row][col + 8] && qrCode.modules[row][col + 9] && qrCode.modules[row][col + 10]) {
                  lostPoint += 40;
                }
              } else if (col > 3) {
                if (qrCode.modules[row][col - 1] && qrCode.modules[row][col - 2] && qrCode.modules[row][col - 3] && qrCode.modules[row][col - 4]) {
                  lostPoint += 40;
                }
              }
            }
          }
          //level 2 评价
          if (row < moduleCount - 1 && col < moduleCount - 1) {
            var count = 0;
            if (current) count++;
            if (qrCode.modules[row + 1][col]) count++;
            if (qrCode.modules[row][col + 1]) count++;
            if (qrCode.modules[row + 1][col + 1]) count++;
            if (count == 0 || count == 4) {
              lostPoint += 3;
            }
          }
          //level 1 评价
          if (head ^ current) {
            sameCount++;
          } else {
            head = current;
            if (sameCount >= 5) {
              lostPoint += 3 + sameCount - 5;
            }
            sameCount = 1;
          }
          //level 4 评价
          if (current) {
            darkCount++;
          }
        }
      }
      for (var col = 0; col < moduleCount; col++) {
        var sameCount = 0;
        var head = qrCode.modules[0][col];
        for (var row = 0; row < moduleCount; row++) {
          var current = qrCode.modules[row][col];
          //level 3 评价
          if (row < moduleCount - 6) {
            if (current && !qrCode.modules[row + 1][col] && qrCode.modules[row + 2][col] && qrCode.modules[row + 3][col] && qrCode.modules[row + 4][col] && !qrCode.modules[row + 5][col] && qrCode.modules[row + 6][col]) {
              if (row < moduleCount - 10) {
                if (qrCode.modules[row + 7][col] && qrCode.modules[row + 8][col] && qrCode.modules[row + 9][col] && qrCode.modules[row + 10][col]) {
                  lostPoint += 40;
                }
              } else if (row > 3) {
                if (qrCode.modules[row - 1][col] && qrCode.modules[row - 2][col] && qrCode.modules[row - 3][col] && qrCode.modules[row - 4][col]) {
                  lostPoint += 40;
                }
              }
            }
          }
          //level 1 评价
          if (head ^ current) {
            sameCount++;
          } else {
            head = current;
            if (sameCount >= 5) {
              lostPoint += 3 + sameCount - 5;
            }
            sameCount = 1;
          }
        }
      }
      // LEVEL4
      var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;
      lostPoint += ratio * 10;
      return lostPoint;
    } };


  //---------------------------------------------------------------------
  // QRMath使用的数学工具
  //---------------------------------------------------------------------
  var QRMath = {
    /*
                 将n转化为a^m
                  */
    glog: function glog(n) {
      if (n < 1) {
        throw new Error("glog(" + n + ")");
      }
      return QRMath.LOG_TABLE[n];
    },
    /*
       将a^m转化为n
        */
    gexp: function gexp(n) {
      while (n < 0) {
        n += 255;
      }
      while (n >= 256) {
        n -= 255;
      }
      return QRMath.EXP_TABLE[n];
    },
    EXP_TABLE: new Array(256),
    LOG_TABLE: new Array(256) };


  for (var i = 0; i < 8; i++) {
    QRMath.EXP_TABLE[i] = 1 << i;
  }
  for (var i = 8; i < 256; i++) {
    QRMath.EXP_TABLE[i] = QRMath.EXP_TABLE[i - 4] ^ QRMath.EXP_TABLE[i - 5] ^ QRMath.EXP_TABLE[i - 6] ^ QRMath.EXP_TABLE[i - 8];
  }
  for (var i = 0; i < 255; i++) {
    QRMath.LOG_TABLE[QRMath.EXP_TABLE[i]] = i;
  }
  //---------------------------------------------------------------------
  // QRPolynomial 多项式
  //---------------------------------------------------------------------
  /**
   * 多项式类
   * @param {Array} num   系数
   * @param {num} shift a^shift
   */
  function QRPolynomial(num, shift) {
    if (num.length == undefined) {
      throw new Error(num.length + "/" + shift);
    }
    var offset = 0;
    while (offset < num.length && num[offset] == 0) {
      offset++;
    }
    this.num = new Array(num.length - offset + shift);
    for (var i = 0; i < num.length - offset; i++) {
      this.num[i] = num[i + offset];
    }
  }
  QRPolynomial.prototype = {
    get: function get(index) {
      return this.num[index];
    },
    getLength: function getLength() {
      return this.num.length;
    },
    /**
        * 多项式乘法
        * @param  {QRPolynomial} e 被乘多项式
        * @return {[type]}   [description]
        */
    multiply: function multiply(e) {
      var num = new Array(this.getLength() + e.getLength() - 1);
      for (var i = 0; i < this.getLength(); i++) {
        for (var j = 0; j < e.getLength(); j++) {
          num[i + j] ^= QRMath.gexp(QRMath.glog(this.get(i)) + QRMath.glog(e.get(j)));
        }
      }
      return new QRPolynomial(num, 0);
    },
    /**
        * 多项式模运算
        * @param  {QRPolynomial} e 模多项式
        * @return {}
        */
    mod: function mod(e) {
      var tl = this.getLength(),
      el = e.getLength();
      if (tl - el < 0) {
        return this;
      }
      var num = new Array(tl);
      for (var i = 0; i < tl; i++) {
        num[i] = this.get(i);
      }
      while (num.length >= el) {
        var ratio = QRMath.glog(num[0]) - QRMath.glog(e.get(0));

        for (var i = 0; i < e.getLength(); i++) {
          num[i] ^= QRMath.gexp(QRMath.glog(e.get(i)) + ratio);
        }
        while (num[0] == 0) {
          num.shift();
        }
      }
      return new QRPolynomial(num, 0);
    } };


  //---------------------------------------------------------------------
  // RS_BLOCK_TABLE
  //---------------------------------------------------------------------
  /*
  二维码各个版本信息[块数, 每块中的数据块数, 每块中的信息块数]
   */
  var RS_BLOCK_TABLE = [
  // L
  // M
  // Q
  // H
  // 1
  [1, 26, 19],
  [1, 26, 16],
  [1, 26, 13],
  [1, 26, 9],

  // 2
  [1, 44, 34],
  [1, 44, 28],
  [1, 44, 22],
  [1, 44, 16],

  // 3
  [1, 70, 55],
  [1, 70, 44],
  [2, 35, 17],
  [2, 35, 13],

  // 4
  [1, 100, 80],
  [2, 50, 32],
  [2, 50, 24],
  [4, 25, 9],

  // 5
  [1, 134, 108],
  [2, 67, 43],
  [2, 33, 15, 2, 34, 16],
  [2, 33, 11, 2, 34, 12],

  // 6
  [2, 86, 68],
  [4, 43, 27],
  [4, 43, 19],
  [4, 43, 15],

  // 7
  [2, 98, 78],
  [4, 49, 31],
  [2, 32, 14, 4, 33, 15],
  [4, 39, 13, 1, 40, 14],

  // 8
  [2, 121, 97],
  [2, 60, 38, 2, 61, 39],
  [4, 40, 18, 2, 41, 19],
  [4, 40, 14, 2, 41, 15],

  // 9
  [2, 146, 116],
  [3, 58, 36, 2, 59, 37],
  [4, 36, 16, 4, 37, 17],
  [4, 36, 12, 4, 37, 13],

  // 10
  [2, 86, 68, 2, 87, 69],
  [4, 69, 43, 1, 70, 44],
  [6, 43, 19, 2, 44, 20],
  [6, 43, 15, 2, 44, 16],

  // 11
  [4, 101, 81],
  [1, 80, 50, 4, 81, 51],
  [4, 50, 22, 4, 51, 23],
  [3, 36, 12, 8, 37, 13],

  // 12
  [2, 116, 92, 2, 117, 93],
  [6, 58, 36, 2, 59, 37],
  [4, 46, 20, 6, 47, 21],
  [7, 42, 14, 4, 43, 15],

  // 13
  [4, 133, 107],
  [8, 59, 37, 1, 60, 38],
  [8, 44, 20, 4, 45, 21],
  [12, 33, 11, 4, 34, 12],

  // 14
  [3, 145, 115, 1, 146, 116],
  [4, 64, 40, 5, 65, 41],
  [11, 36, 16, 5, 37, 17],
  [11, 36, 12, 5, 37, 13],

  // 15
  [5, 109, 87, 1, 110, 88],
  [5, 65, 41, 5, 66, 42],
  [5, 54, 24, 7, 55, 25],
  [11, 36, 12],

  // 16
  [5, 122, 98, 1, 123, 99],
  [7, 73, 45, 3, 74, 46],
  [15, 43, 19, 2, 44, 20],
  [3, 45, 15, 13, 46, 16],

  // 17
  [1, 135, 107, 5, 136, 108],
  [10, 74, 46, 1, 75, 47],
  [1, 50, 22, 15, 51, 23],
  [2, 42, 14, 17, 43, 15],

  // 18
  [5, 150, 120, 1, 151, 121],
  [9, 69, 43, 4, 70, 44],
  [17, 50, 22, 1, 51, 23],
  [2, 42, 14, 19, 43, 15],

  // 19
  [3, 141, 113, 4, 142, 114],
  [3, 70, 44, 11, 71, 45],
  [17, 47, 21, 4, 48, 22],
  [9, 39, 13, 16, 40, 14],

  // 20
  [3, 135, 107, 5, 136, 108],
  [3, 67, 41, 13, 68, 42],
  [15, 54, 24, 5, 55, 25],
  [15, 43, 15, 10, 44, 16],

  // 21
  [4, 144, 116, 4, 145, 117],
  [17, 68, 42],
  [17, 50, 22, 6, 51, 23],
  [19, 46, 16, 6, 47, 17],

  // 22
  [2, 139, 111, 7, 140, 112],
  [17, 74, 46],
  [7, 54, 24, 16, 55, 25],
  [34, 37, 13],

  // 23
  [4, 151, 121, 5, 152, 122],
  [4, 75, 47, 14, 76, 48],
  [11, 54, 24, 14, 55, 25],
  [16, 45, 15, 14, 46, 16],

  // 24
  [6, 147, 117, 4, 148, 118],
  [6, 73, 45, 14, 74, 46],
  [11, 54, 24, 16, 55, 25],
  [30, 46, 16, 2, 47, 17],

  // 25
  [8, 132, 106, 4, 133, 107],
  [8, 75, 47, 13, 76, 48],
  [7, 54, 24, 22, 55, 25],
  [22, 45, 15, 13, 46, 16],

  // 26
  [10, 142, 114, 2, 143, 115],
  [19, 74, 46, 4, 75, 47],
  [28, 50, 22, 6, 51, 23],
  [33, 46, 16, 4, 47, 17],

  // 27
  [8, 152, 122, 4, 153, 123],
  [22, 73, 45, 3, 74, 46],
  [8, 53, 23, 26, 54, 24],
  [12, 45, 15, 28, 46, 16],

  // 28
  [3, 147, 117, 10, 148, 118],
  [3, 73, 45, 23, 74, 46],
  [4, 54, 24, 31, 55, 25],
  [11, 45, 15, 31, 46, 16],

  // 29
  [7, 146, 116, 7, 147, 117],
  [21, 73, 45, 7, 74, 46],
  [1, 53, 23, 37, 54, 24],
  [19, 45, 15, 26, 46, 16],

  // 30
  [5, 145, 115, 10, 146, 116],
  [19, 75, 47, 10, 76, 48],
  [15, 54, 24, 25, 55, 25],
  [23, 45, 15, 25, 46, 16],

  // 31
  [13, 145, 115, 3, 146, 116],
  [2, 74, 46, 29, 75, 47],
  [42, 54, 24, 1, 55, 25],
  [23, 45, 15, 28, 46, 16],

  // 32
  [17, 145, 115],
  [10, 74, 46, 23, 75, 47],
  [10, 54, 24, 35, 55, 25],
  [19, 45, 15, 35, 46, 16],

  // 33
  [17, 145, 115, 1, 146, 116],
  [14, 74, 46, 21, 75, 47],
  [29, 54, 24, 19, 55, 25],
  [11, 45, 15, 46, 46, 16],

  // 34
  [13, 145, 115, 6, 146, 116],
  [14, 74, 46, 23, 75, 47],
  [44, 54, 24, 7, 55, 25],
  [59, 46, 16, 1, 47, 17],

  // 35
  [12, 151, 121, 7, 152, 122],
  [12, 75, 47, 26, 76, 48],
  [39, 54, 24, 14, 55, 25],
  [22, 45, 15, 41, 46, 16],

  // 36
  [6, 151, 121, 14, 152, 122],
  [6, 75, 47, 34, 76, 48],
  [46, 54, 24, 10, 55, 25],
  [2, 45, 15, 64, 46, 16],

  // 37
  [17, 152, 122, 4, 153, 123],
  [29, 74, 46, 14, 75, 47],
  [49, 54, 24, 10, 55, 25],
  [24, 45, 15, 46, 46, 16],

  // 38
  [4, 152, 122, 18, 153, 123],
  [13, 74, 46, 32, 75, 47],
  [48, 54, 24, 14, 55, 25],
  [42, 45, 15, 32, 46, 16],

  // 39
  [20, 147, 117, 4, 148, 118],
  [40, 75, 47, 7, 76, 48],
  [43, 54, 24, 22, 55, 25],
  [10, 45, 15, 67, 46, 16],

  // 40
  [19, 148, 118, 6, 149, 119],
  [18, 75, 47, 31, 76, 48],
  [34, 54, 24, 34, 55, 25],
  [20, 45, 15, 61, 46, 16]];


  /**
                              * 根据数据获取对应版本
                              * @return {[type]} [description]
                              */
  QRCodeAlg.prototype.getRightType = function () {
    for (var typeNumber = 1; typeNumber < 41; typeNumber++) {
      var rsBlock = RS_BLOCK_TABLE[(typeNumber - 1) * 4 + this.errorCorrectLevel];
      if (rsBlock == undefined) {
        throw new Error("bad rs block @ typeNumber:" + typeNumber + "/errorCorrectLevel:" + this.errorCorrectLevel);
      }
      var length = rsBlock.length / 3;
      var totalDataCount = 0;
      for (var i = 0; i < length; i++) {
        var count = rsBlock[i * 3 + 0];
        var dataCount = rsBlock[i * 3 + 2];
        totalDataCount += dataCount * count;
      }
      var lengthBytes = typeNumber > 9 ? 2 : 1;
      if (this.utf8bytes.length + lengthBytes < totalDataCount || typeNumber == 40) {
        this.typeNumber = typeNumber;
        this.rsBlock = rsBlock;
        this.totalDataCount = totalDataCount;
        break;
      }
    }
  };

  //---------------------------------------------------------------------
  // QRBitBuffer
  //---------------------------------------------------------------------
  function QRBitBuffer() {
    this.buffer = new Array();
    this.length = 0;
  }
  QRBitBuffer.prototype = {
    get: function get(index) {
      var bufIndex = Math.floor(index / 8);
      return this.buffer[bufIndex] >>> 7 - index % 8 & 1;
    },
    put: function put(num, length) {
      for (var i = 0; i < length; i++) {
        this.putBit(num >>> length - i - 1 & 1);
      }
    },
    putBit: function putBit(bit) {
      var bufIndex = Math.floor(this.length / 8);
      if (this.buffer.length <= bufIndex) {
        this.buffer.push(0);
      }
      if (bit) {
        this.buffer[bufIndex] |= 0x80 >>> this.length % 8;
      }
      this.length++;
    } };




  // xzedit
  var qrcodeAlgObjCache = [];
  /**
                               * 二维码构造函数，主要用于绘制
                               * @param  {参数列表} opt 传递参数
                               * @return {}
                               */
  QRCode = function QRCode(opt) {
    //设置默认参数
    this.options = {
      text: '',
      size: 256,
      correctLevel: 3,
      background: '#ffffff',
      foreground: '#000000',
      pdground: '#000000',
      image: '',
      imageSize: 30,
      canvasId: opt.canvasId,
      context: opt.context,
      usingComponents: opt.usingComponents,
      showLoading: opt.showLoading,
      loadingText: opt.loadingText };

    if (typeof opt === 'string') {// 只编码ASCII字符串
      opt = {
        text: opt };

    }
    if (opt) {
      for (var i in opt) {
        this.options[i] = opt[i];
      }
    }
    //使用QRCodeAlg创建二维码结构
    var qrCodeAlg = null;
    for (var i = 0, l = qrcodeAlgObjCache.length; i < l; i++) {
      if (qrcodeAlgObjCache[i].text == this.options.text && qrcodeAlgObjCache[i].text.correctLevel == this.options.correctLevel) {
        qrCodeAlg = qrcodeAlgObjCache[i].obj;
        break;
      }
    }
    if (i == l) {
      qrCodeAlg = new QRCodeAlg(this.options.text, this.options.correctLevel);
      qrcodeAlgObjCache.push({
        text: this.options.text,
        correctLevel: this.options.correctLevel,
        obj: qrCodeAlg });

    }
    /**
       * 计算矩阵点的前景色
       * @param {Obj} config
       * @param {Number} config.row 点x坐标
       * @param {Number} config.col 点y坐标
       * @param {Number} config.count 矩阵大小
       * @param {Number} config.options 组件的options
       * @return {String}
       */
    var getForeGround = function getForeGround(config) {
      var options = config.options;
      if (options.pdground && (
      config.row > 1 && config.row < 5 && config.col > 1 && config.col < 5 ||
      config.row > config.count - 6 && config.row < config.count - 2 && config.col > 1 && config.col < 5 ||
      config.row > 1 && config.row < 5 && config.col > config.count - 6 && config.col < config.count - 2))
      {
        return options.pdground;
      }
      return options.foreground;
    };
    // 创建canvas
    var createCanvas = function createCanvas(options) {
      if (options.showLoading) {
        uni.showLoading({
          title: options.loadingText,
          mask: true });

      }
      var ctx = uni.createCanvasContext(options.canvasId, options.context);
      var count = qrCodeAlg.getModuleCount();
      var ratioSize = options.size;
      var ratioImgSize = options.imageSize;
      //计算每个点的长宽
      var tileW = (ratioSize / count).toPrecision(4);
      var tileH = (ratioSize / count).toPrecision(4);
      //绘制
      for (var row = 0; row < count; row++) {
        for (var col = 0; col < count; col++) {
          var w = Math.ceil((col + 1) * tileW) - Math.floor(col * tileW);
          var h = Math.ceil((row + 1) * tileW) - Math.floor(row * tileW);
          var foreground = getForeGround({
            row: row,
            col: col,
            count: count,
            options: options });

          ctx.setFillStyle(qrCodeAlg.modules[row][col] ? foreground : options.background);
          ctx.fillRect(Math.round(col * tileW), Math.round(row * tileH), w, h);
        }
      }
      if (options.image) {




        // 画圆角矩形
        var drawRoundedRect = function drawRoundedRect(ctxi, x, y, width, height, r, lineWidth, fill, stroke) {
          ctxi.setLineWidth(lineWidth);
          ctxi.setFillStyle(options.background);
          ctxi.setStrokeStyle(options.background);
          ctxi.beginPath(); // draw top and top right corner 
          ctxi.moveTo(x + r, y);
          ctxi.arcTo(x + width, y, x + width, y + r, r); // draw right side and bottom right corner 
          ctxi.arcTo(x + width, y + height, x + width - r, y + height, r); // draw bottom and bottom left corner 
          ctxi.arcTo(x, y + height, x, y + height - r, r); // draw left and top left corner 
          ctxi.arcTo(x, y, x + r, y, r);
          ctxi.closePath();
          if (fill) {
            ctxi.fill();
          }
          if (stroke) {
            ctxi.stroke();
          }
        };var x = Number(((ratioSize - ratioImgSize) / 2).toFixed(2));var y = Number(((ratioSize - ratioImgSize) / 2).toFixed(2));drawRoundedRect(ctx, x, y, ratioImgSize, ratioImgSize, 2, 6, true, true);ctx.drawImage(options.image, x, y, ratioImgSize, ratioImgSize);
      }
      setTimeout(function () {
        ctx.draw(true, function () {
          // 保存到临时区域
          setTimeout(function () {
            uni.canvasToTempFilePath({
              width: options.width,
              height: options.height,
              destWidth: options.width,
              destHeight: options.height,
              canvasId: options.canvasId,
              quality: Number(1),
              success: function success(res) {
                if (options.cbResult) {
                  // 由于官方还没有统一此接口的输出字段，所以先判定下  支付宝为 res.apFilePath
                  if (!empty(res.tempFilePath)) {
                    options.cbResult(res.tempFilePath);
                  } else if (!empty(res.apFilePath)) {
                    options.cbResult(res.apFilePath);
                  } else {
                    options.cbResult(res.tempFilePath);
                  }
                }
              },
              fail: function fail(res) {
                if (options.cbResult) {
                  options.cbResult(res);
                }
              },
              complete: function complete() {
                uni.hideLoading();
              } },
            options.context);
          }, options.text.length + 100);
        });
      }, options.usingComponents ? 0 : 150);
    };
    createCanvas(this.options);
    // 空判定
    var empty = function empty(v) {
      var tp = typeof v,
      rt = false;
      if (tp == "number" && String(v) == "") {
        rt = true;
      } else if (tp == "undefined") {
        rt = true;
      } else if (tp == "object") {
        if (JSON.stringify(v) == "{}" || JSON.stringify(v) == "[]" || v == null) rt = true;
      } else if (tp == "string") {
        if (v == "" || v == "undefined" || v == "null" || v == "{}" || v == "[]") rt = true;
      } else if (tp == "function") {
        rt = false;
      }
      return rt;
    };
  };
  QRCode.prototype.clear = function (fn) {
    var ctx = uni.createCanvasContext(this.options.canvasId, this.options.context);
    ctx.clearRect(0, 0, this.options.size, this.options.size);
    ctx.draw(false, function () {
      if (fn) {
        fn();
      }
    });
  };
})();var _default =

QRCode;exports.default = _default;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-mp-weixin/dist/index.js */ 1)["default"]))

/***/ }),

/***/ 2:
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ 20:
/*!*****************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/watchapp-frontend/common/dict-utils.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(uni) {var _api = _interopRequireDefault(__webpack_require__(/*! @/common/api.js */ 13));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

var DICT_KEY = 'DICT';
var dictData = {
  "dictKey": "dict",
  "dictValue": "字典",
  "childNode": {
    selector: {
      "dictKey": "selector",
      "dictValue": "选择器",
      "childNode": {} },

    order_status: {
      "dictKey": "order_status",
      "dictValue": "订单状态",
      "childNode": {} } } };




// 初始化字典数据
function initDictData() {
  uni.setStorageSync(DICT_KEY, dictData);
  console.log('initDictData');
  initSelectorDictData();
  initOrderStatusDictData();
}

// 初始化选择器的字典数据 
function initSelectorDictData() {
  console.log('initSelectorDictData');
  _api.default.get({
    url: "/open/dict/selector" }).
  then(function (res) {
    var dictData = uni.getStorageSync(DICT_KEY);
    dictData.childNode['selector'].childNode = res.data.data;
    uni.setStorageSync(DICT_KEY, dictData);
  });
}
// 初始化订单状态的字典数据 
function initOrderStatusDictData() {
  console.log('initOrderStatusDictData');
  _api.default.get({
    url: "/open/dict/orderStatus" }).
  then(function (res) {
    var dictData = uni.getStorageSync(DICT_KEY);
    dictData.childNode['order_status'].childNode = res.data.data;
    uni.setStorageSync(DICT_KEY, dictData);
  });
}

/**
   * @description 按照顺序获取字典对应键的值 
   * @example 格式如: var dictValue = get('selector','movement_category_select','1')
   * @param {string} ...key  array
   * */
// es6 可变参数列表
// es6 slice(statr,[end])
// 深拷贝 JSON.parse(JSON.stringify(dictData));
// typeof keyItem === 'undefined'
// function.apply(this,params); call
function get() {for (var _len = arguments.length, key = new Array(_len), _key = 0; _key < _len; _key++) {key[_key] = arguments[_key];}
  var keyCache = key.slice(0);
  var shot = false;
  var dictData = uni.getStorageSync(DICT_KEY);
  var dictCache = JSON.parse(JSON.stringify(dictData));
  while (!shot) {
    var keyItem = keyCache.shift();
    if (typeof keyItem === 'undefined' || keyItem == null) {
      shot = true;
      break;
    }
    dictCache = dictCache.childNode[keyItem] || dictCache;
  }
  return dictCache;
}
/**
   * @description 按照顺序获取字典对应键的值 
   * @example 格式如: var dictValue = get('selector','movement_category_select','1')
   * @param {string} ...key  array
   * */
function getValue() {for (var _len2 = arguments.length, key = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {key[_key2] = arguments[_key2];}
  return get.apply(this, key).dictValue;
}
/**
   * @description 按照顺序获取字典对应键的值 
   * @example 格式如: var dictValue = get('selector','movement_category_select','1')
   * @param {string} ...key  array
   * */
function getChild() {for (var _len3 = arguments.length, key = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {key[_key3] = arguments[_key3];}
  return get.apply(this, key).childNode;
}
/**
   * @description 按照顺序获取字典中选择器对应键的值 
   * @example 格式如: var dictValue = getSelector('movement_category_select','1')
   * @param {string} ...key 
   * */
function getSelector() {for (var _len4 = arguments.length, key = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {key[_key4] = arguments[_key4];}
  key = key || [];
  key.unshift('selector');
  return getValue.apply(this, key);
}
/**
   * @description 按照顺序获取字典中选择器对应键的值 
   * @example 格式如: var dictValue = getSelector('movement_category_select')
   * @param {string} ...key 
   * */
function getSelectors() {for (var _len5 = arguments.length, key = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {key[_key5] = arguments[_key5];}
  console.log('getSelectors...');
  key = key || [];
  key.unshift('selector');
  var res = [];
  var content = getChild.apply(this, key);
  if (content && Object.keys(content).length > 0) {
    for (var _key6 in content) {
      res.push(content[_key6]);
    }
  }
  return res;
}
/**
   * @description 调试打印用的测试方法
   * @param {string} ...key 
   * */
function log() {for (var _len6 = arguments.length, key = new Array(_len6), _key7 = 0; _key7 < _len6; _key7++) {key[_key7] = arguments[_key7];}
  console.log('log..', key);
}

module.exports = {
  initDictData: initDictData,
  initSelectorDictData: initSelectorDictData,
  get: get,
  getValue: getValue,
  getChild: getChild,
  getSelector: getSelector,
  getSelectors: getSelectors,
  log: log };
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-mp-weixin/dist/index.js */ 1)["default"]))

/***/ }),

/***/ 21:
/*!****************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/watchapp-frontend/common/3d-parts/av-weapp-min.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {var window = {};var XMLHttpRequest;var navigator;var localStorage;
!function (t, e) { true ? module.exports = e() : undefined;}("undefined" != typeof self ? self : this, function () {return function (t) {function e(r) {if (n[r]) return n[r].exports;var i = n[r] = { i: r, l: !1, exports: {} };return t[r].call(i.exports, i, i.exports, e), i.l = !0, i.exports;}var n = {};return e.m = t, e.c = n, e.d = function (t, n, r) {e.o(t, n) || Object.defineProperty(t, n, { configurable: !1, enumerable: !0, get: r });}, e.n = function (t) {var n = t && t.__esModule ? function () {return t.default;} : function () {return t;};return e.d(n, "a", n), n;}, e.o = function (t, e) {return Object.prototype.hasOwnProperty.call(t, e);}, e.p = "", e(e.s = 23);}([function (t, e, n) {(function (t, n) {var r, i;!function () {var o = "object" == typeof self && self.self === self && self || "object" == typeof t && t.global === t && t || this || {},s = o._,a = Array.prototype,u = Object.prototype,c = "undefined" != typeof Symbol ? Symbol.prototype : null,l = a.push,h = a.slice,f = u.toString,d = u.hasOwnProperty,p = Array.isArray,_ = Object.keys,v = Object.create,y = function y() {},m = function m(t) {return t instanceof m ? t : this instanceof m ? void (this._wrapped = t) : new m(t);};void 0 === e || e.nodeType ? o._ = m : (void 0 !== n && !n.nodeType && n.exports && (e = n.exports = m), e._ = m), m.VERSION = "1.9.1";var g,b = function b(t, e, n) {if (void 0 === e) return t;switch (null == n ? 3 : n) {case 1:return function (n) {return t.call(e, n);};case 3:return function (n, r, i) {return t.call(e, n, r, i);};case 4:return function (n, r, i, o) {return t.call(e, n, r, i, o);};}return function () {return t.apply(e, arguments);};},w = function w(t, e, n) {return m.iteratee !== g ? m.iteratee(t, e) : null == t ? m.identity : m.isFunction(t) ? b(t, e, n) : m.isObject(t) && !m.isArray(t) ? m.matcher(t) : m.property(t);};m.iteratee = g = function g(t, e) {return w(t, e, 1 / 0);};var O = function O(t, e) {return e = null == e ? t.length - 1 : +e, function () {for (var n = Math.max(arguments.length - e, 0), r = Array(n), i = 0; i < n; i++) {r[i] = arguments[i + e];}switch (e) {case 0:return t.call(this, r);case 1:return t.call(this, arguments[0], r);case 2:return t.call(this, arguments[0], arguments[1], r);}var o = Array(e + 1);for (i = 0; i < e; i++) {o[i] = arguments[i];}return o[e] = r, t.apply(this, o);};},S = function S(t) {if (!m.isObject(t)) return {};if (v) return v(t);y.prototype = t;var e = new y();return y.prototype = null, e;},A = function A(t) {return function (e) {return null == e ? void 0 : e[t];};},E = function E(t, e) {return null != t && d.call(t, e);},C = function C(t, e) {for (var n = e.length, r = 0; r < n; r++) {if (null == t) return;t = t[e[r]];}return n ? t : void 0;},T = Math.pow(2, 53) - 1,j = A("length"),N = function N(t) {var e = j(t);return "number" == typeof e && e >= 0 && e <= T;};m.each = m.forEach = function (t, e, n) {e = b(e, n);var r, i;if (N(t)) for (r = 0, i = t.length; r < i; r++) {e(t[r], r, t);} else {var o = m.keys(t);for (r = 0, i = o.length; r < i; r++) {e(t[o[r]], o[r], t);}}return t;}, m.map = m.collect = function (t, e, n) {e = w(e, n);for (var r = !N(t) && m.keys(t), i = (r || t).length, o = Array(i), s = 0; s < i; s++) {var a = r ? r[s] : s;o[s] = e(t[a], a, t);}return o;};var x = function x(t) {var e = function e(_e, n, r, i) {var o = !N(_e) && m.keys(_e),s = (o || _e).length,a = t > 0 ? 0 : s - 1;for (i || (r = _e[o ? o[a] : a], a += t); a >= 0 && a < s; a += t) {var u = o ? o[a] : a;r = n(r, _e[u], u, _e);}return r;};return function (t, n, r, i) {var o = arguments.length >= 3;return e(t, b(n, i, 4), r, o);};};m.reduce = m.foldl = m.inject = x(1), m.reduceRight = m.foldr = x(-1), m.find = m.detect = function (t, e, n) {var r = N(t) ? m.findIndex : m.findKey,i = r(t, e, n);if (void 0 !== i && -1 !== i) return t[i];}, m.filter = m.select = function (t, e, n) {var r = [];return e = w(e, n), m.each(t, function (t, n, i) {e(t, n, i) && r.push(t);}), r;}, m.reject = function (t, e, n) {return m.filter(t, m.negate(w(e)), n);}, m.every = m.all = function (t, e, n) {e = w(e, n);for (var r = !N(t) && m.keys(t), i = (r || t).length, o = 0; o < i; o++) {var s = r ? r[o] : o;if (!e(t[s], s, t)) return !1;}return !0;}, m.some = m.any = function (t, e, n) {e = w(e, n);for (var r = !N(t) && m.keys(t), i = (r || t).length, o = 0; o < i; o++) {var s = r ? r[o] : o;if (e(t[s], s, t)) return !0;}return !1;}, m.contains = m.includes = m.include = function (t, e, n, r) {return N(t) || (t = m.values(t)), ("number" != typeof n || r) && (n = 0), m.indexOf(t, e, n) >= 0;}, m.invoke = O(function (t, e, n) {var r, i;return m.isFunction(e) ? i = e : m.isArray(e) && (r = e.slice(0, -1), e = e[e.length - 1]), m.map(t, function (t) {var o = i;if (!o) {if (r && r.length && (t = C(t, r)), null == t) return;o = t[e];}return null == o ? o : o.apply(t, n);});}), m.pluck = function (t, e) {return m.map(t, m.property(e));}, m.where = function (t, e) {return m.filter(t, m.matcher(e));}, m.findWhere = function (t, e) {return m.find(t, m.matcher(e));}, m.max = function (t, e, n) {var r,i,o = -1 / 0,s = -1 / 0;if (null == e || "number" == typeof e && "object" != typeof t[0] && null != t) {t = N(t) ? t : m.values(t);for (var a = 0, u = t.length; a < u; a++) {null != (r = t[a]) && r > o && (o = r);}} else e = w(e, n), m.each(t, function (t, n, r) {((i = e(t, n, r)) > s || i === -1 / 0 && o === -1 / 0) && (o = t, s = i);});return o;}, m.min = function (t, e, n) {var r,i,o = 1 / 0,s = 1 / 0;if (null == e || "number" == typeof e && "object" != typeof t[0] && null != t) {t = N(t) ? t : m.values(t);for (var a = 0, u = t.length; a < u; a++) {null != (r = t[a]) && r < o && (o = r);}} else e = w(e, n), m.each(t, function (t, n, r) {((i = e(t, n, r)) < s || i === 1 / 0 && o === 1 / 0) && (o = t, s = i);});return o;}, m.shuffle = function (t) {return m.sample(t, 1 / 0);}, m.sample = function (t, e, n) {if (null == e || n) return N(t) || (t = m.values(t)), t[m.random(t.length - 1)];var r = N(t) ? m.clone(t) : m.values(t),i = j(r);e = Math.max(Math.min(e, i), 0);for (var o = i - 1, s = 0; s < e; s++) {var a = m.random(s, o),u = r[s];r[s] = r[a], r[a] = u;}return r.slice(0, e);}, m.sortBy = function (t, e, n) {var r = 0;return e = w(e, n), m.pluck(m.map(t, function (t, n, i) {return { value: t, index: r++, criteria: e(t, n, i) };}).sort(function (t, e) {var n = t.criteria,r = e.criteria;if (n !== r) {if (n > r || void 0 === n) return 1;if (n < r || void 0 === r) return -1;}return t.index - e.index;}), "value");};var k = function k(t, e) {return function (n, r, i) {var o = e ? [[], []] : {};return r = w(r, i), m.each(n, function (e, i) {var s = r(e, i, n);t(o, e, s);}), o;};};m.groupBy = k(function (t, e, n) {E(t, n) ? t[n].push(e) : t[n] = [e];}), m.indexBy = k(function (t, e, n) {t[n] = e;}), m.countBy = k(function (t, e, n) {E(t, n) ? t[n]++ : t[n] = 1;});var U = /[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;m.toArray = function (t) {return t ? m.isArray(t) ? h.call(t) : m.isString(t) ? t.match(U) : N(t) ? m.map(t, m.identity) : m.values(t) : [];}, m.size = function (t) {return null == t ? 0 : N(t) ? t.length : m.keys(t).length;}, m.partition = k(function (t, e, n) {t[n ? 0 : 1].push(e);}, !0), m.first = m.head = m.take = function (t, e, n) {return null == t || t.length < 1 ? null == e ? void 0 : [] : null == e || n ? t[0] : m.initial(t, t.length - e);}, m.initial = function (t, e, n) {return h.call(t, 0, Math.max(0, t.length - (null == e || n ? 1 : e)));}, m.last = function (t, e, n) {return null == t || t.length < 1 ? null == e ? void 0 : [] : null == e || n ? t[t.length - 1] : m.rest(t, Math.max(0, t.length - e));}, m.rest = m.tail = m.drop = function (t, e, n) {return h.call(t, null == e || n ? 1 : e);}, m.compact = function (t) {return m.filter(t, Boolean);};var I = function I(t, e, n, r) {r = r || [];for (var i = r.length, o = 0, s = j(t); o < s; o++) {var a = t[o];if (N(a) && (m.isArray(a) || m.isArguments(a))) {if (e) for (var u = 0, c = a.length; u < c;) {r[i++] = a[u++];} else I(a, e, n, r), i = r.length;} else n || (r[i++] = a);}return r;};m.flatten = function (t, e) {return I(t, e, !1);}, m.without = O(function (t, e) {return m.difference(t, e);}), m.uniq = m.unique = function (t, e, n, r) {m.isBoolean(e) || (r = n, n = e, e = !1), null != n && (n = w(n, r));for (var i = [], o = [], s = 0, a = j(t); s < a; s++) {var u = t[s],c = n ? n(u, s, t) : u;e && !n ? (s && o === c || i.push(u), o = c) : n ? m.contains(o, c) || (o.push(c), i.push(u)) : m.contains(i, u) || i.push(u);}return i;}, m.union = O(function (t) {return m.uniq(I(t, !0, !0));}), m.intersection = function (t) {for (var e = [], n = arguments.length, r = 0, i = j(t); r < i; r++) {var o = t[r];if (!m.contains(e, o)) {var s;for (s = 1; s < n && m.contains(arguments[s], o); s++) {;}s === n && e.push(o);}}return e;}, m.difference = O(function (t, e) {return e = I(e, !0, !0), m.filter(t, function (t) {return !m.contains(e, t);});}), m.unzip = function (t) {for (var e = t && m.max(t, j).length || 0, n = Array(e), r = 0; r < e; r++) {n[r] = m.pluck(t, r);}return n;}, m.zip = O(m.unzip), m.object = function (t, e) {for (var n = {}, r = 0, i = j(t); r < i; r++) {e ? n[t[r]] = e[r] : n[t[r][0]] = t[r][1];}return n;};var P = function P(t) {return function (e, n, r) {n = w(n, r);for (var i = j(e), o = t > 0 ? 0 : i - 1; o >= 0 && o < i; o += t) {if (n(e[o], o, e)) return o;}return -1;};};m.findIndex = P(1), m.findLastIndex = P(-1), m.sortedIndex = function (t, e, n, r) {n = w(n, r, 1);for (var i = n(e), o = 0, s = j(t); o < s;) {var a = Math.floor((o + s) / 2);n(t[a]) < i ? o = a + 1 : s = a;}return o;};var R = function R(t, e, n) {return function (r, i, o) {var s = 0,a = j(r);if ("number" == typeof o) t > 0 ? s = o >= 0 ? o : Math.max(o + a, s) : a = o >= 0 ? Math.min(o + 1, a) : o + a + 1;else if (n && o && a) return o = n(r, i), r[o] === i ? o : -1;if (i !== i) return o = e(h.call(r, s, a), m.isNaN), o >= 0 ? o + s : -1;for (o = t > 0 ? s : a - 1; o >= 0 && o < a; o += t) {if (r[o] === i) return o;}return -1;};};m.indexOf = R(1, m.findIndex, m.sortedIndex), m.lastIndexOf = R(-1, m.findLastIndex), m.range = function (t, e, n) {null == e && (e = t || 0, t = 0), n || (n = e < t ? -1 : 1);for (var r = Math.max(Math.ceil((e - t) / n), 0), i = Array(r), o = 0; o < r; o++, t += n) {i[o] = t;}return i;}, m.chunk = function (t, e) {if (null == e || e < 1) return [];for (var n = [], r = 0, i = t.length; r < i;) {n.push(h.call(t, r, r += e));}return n;};var D = function D(t, e, n, r, i) {if (!(r instanceof e)) return t.apply(n, i);var o = S(t.prototype),s = t.apply(o, i);return m.isObject(s) ? s : o;};m.bind = O(function (t, e, n) {if (!m.isFunction(t)) throw new TypeError("Bind must be called on a function");var r = O(function (i) {return D(t, r, e, this, n.concat(i));});return r;}), m.partial = O(function (t, e) {var n = m.partial.placeholder,r = function r() {for (var i = 0, o = e.length, s = Array(o), a = 0; a < o; a++) {s[a] = e[a] === n ? arguments[i++] : e[a];}for (; i < arguments.length;) {s.push(arguments[i++]);}return D(t, r, this, this, s);};return r;}), m.partial.placeholder = m, m.bindAll = O(function (t, e) {e = I(e, !1, !1);var n = e.length;if (n < 1) throw new Error("bindAll must be passed function names");for (; n--;) {var r = e[n];t[r] = m.bind(t[r], t);}}), m.memoize = function (t, e) {var n = function n(r) {var i = n.cache,o = "" + (e ? e.apply(this, arguments) : r);return E(i, o) || (i[o] = t.apply(this, arguments)), i[o];};return n.cache = {}, n;}, m.delay = O(function (t, e, n) {return setTimeout(function () {return t.apply(null, n);}, e);}), m.defer = m.partial(m.delay, m, 1), m.throttle = function (t, e, n) {var r,i,o,s,a = 0;n || (n = {});var u = function u() {a = !1 === n.leading ? 0 : m.now(), r = null, s = t.apply(i, o), r || (i = o = null);},c = function c() {var c = m.now();a || !1 !== n.leading || (a = c);var l = e - (c - a);return i = this, o = arguments, l <= 0 || l > e ? (r && (clearTimeout(r), r = null), a = c, s = t.apply(i, o), r || (i = o = null)) : r || !1 === n.trailing || (r = setTimeout(u, l)), s;};return c.cancel = function () {clearTimeout(r), a = 0, r = i = o = null;}, c;}, m.debounce = function (t, e, n) {var r,i,o = function o(e, n) {r = null, n && (i = t.apply(e, n));},s = O(function (s) {if (r && clearTimeout(r), n) {var a = !r;r = setTimeout(o, e), a && (i = t.apply(this, s));} else r = m.delay(o, e, this, s);return i;});return s.cancel = function () {clearTimeout(r), r = null;}, s;}, m.wrap = function (t, e) {return m.partial(e, t);}, m.negate = function (t) {return function () {return !t.apply(this, arguments);};}, m.compose = function () {var t = arguments,e = t.length - 1;return function () {for (var n = e, r = t[e].apply(this, arguments); n--;) {r = t[n].call(this, r);}return r;};}, m.after = function (t, e) {return function () {if (--t < 1) return e.apply(this, arguments);};}, m.before = function (t, e) {var n;return function () {return --t > 0 && (n = e.apply(this, arguments)), t <= 1 && (e = null), n;};}, m.once = m.partial(m.before, 2), m.restArguments = O;var q = !{ toString: null }.propertyIsEnumerable("toString"),L = ["valueOf", "isPrototypeOf", "toString", "propertyIsEnumerable", "hasOwnProperty", "toLocaleString"],F = function F(t, e) {var n = L.length,r = t.constructor,i = m.isFunction(r) && r.prototype || u,o = "constructor";for (E(t, o) && !m.contains(e, o) && e.push(o); n--;) {(o = L[n]) in t && t[o] !== i[o] && !m.contains(e, o) && e.push(o);}};m.keys = function (t) {if (!m.isObject(t)) return [];if (_) return _(t);var e = [];for (var n in t) {E(t, n) && e.push(n);}return q && F(t, e), e;}, m.allKeys = function (t) {if (!m.isObject(t)) return [];var e = [];for (var n in t) {e.push(n);}return q && F(t, e), e;}, m.values = function (t) {for (var e = m.keys(t), n = e.length, r = Array(n), i = 0; i < n; i++) {r[i] = t[e[i]];}return r;}, m.mapObject = function (t, e, n) {e = w(e, n);for (var r = m.keys(t), i = r.length, o = {}, s = 0; s < i; s++) {var a = r[s];o[a] = e(t[a], a, t);}return o;}, m.pairs = function (t) {for (var e = m.keys(t), n = e.length, r = Array(n), i = 0; i < n; i++) {r[i] = [e[i], t[e[i]]];}return r;}, m.invert = function (t) {for (var e = {}, n = m.keys(t), r = 0, i = n.length; r < i; r++) {e[t[n[r]]] = n[r];}return e;}, m.functions = m.methods = function (t) {var e = [];for (var n in t) {m.isFunction(t[n]) && e.push(n);}return e.sort();};var M = function M(t, e) {return function (n) {var r = arguments.length;if (e && (n = Object(n)), r < 2 || null == n) return n;for (var i = 1; i < r; i++) {for (var o = arguments[i], s = t(o), a = s.length, u = 0; u < a; u++) {var c = s[u];e && void 0 !== n[c] || (n[c] = o[c]);}}return n;};};m.extend = M(m.allKeys), m.extendOwn = m.assign = M(m.keys), m.findKey = function (t, e, n) {e = w(e, n);for (var r, i = m.keys(t), o = 0, s = i.length; o < s; o++) {if (r = i[o], e(t[r], r, t)) return r;}};var W = function W(t, e, n) {return e in n;};m.pick = O(function (t, e) {var n = {},r = e[0];if (null == t) return n;m.isFunction(r) ? (e.length > 1 && (r = b(r, e[1])), e = m.allKeys(t)) : (r = W, e = I(e, !1, !1), t = Object(t));for (var i = 0, o = e.length; i < o; i++) {var s = e[i],a = t[s];r(a, s, t) && (n[s] = a);}return n;}), m.omit = O(function (t, e) {var n,r = e[0];return m.isFunction(r) ? (r = m.negate(r), e.length > 1 && (n = e[1])) : (e = m.map(I(e, !1, !1), String), r = function r(t, n) {return !m.contains(e, n);}), m.pick(t, r, n);}), m.defaults = M(m.allKeys, !0), m.create = function (t, e) {var n = S(t);return e && m.extendOwn(n, e), n;}, m.clone = function (t) {return m.isObject(t) ? m.isArray(t) ? t.slice() : m.extend({}, t) : t;}, m.tap = function (t, e) {return e(t), t;}, m.isMatch = function (t, e) {var n = m.keys(e),r = n.length;if (null == t) return !r;for (var i = Object(t), o = 0; o < r; o++) {var s = n[o];if (e[s] !== i[s] || !(s in i)) return !1;}return !0;};var B, Q;B = function B(t, e, n, r) {if (t === e) return 0 !== t || 1 / t == 1 / e;if (null == t || null == e) return !1;if (t !== t) return e !== e;var i = typeof t;return ("function" === i || "object" === i || "object" == typeof e) && Q(t, e, n, r);}, Q = function Q(t, e, n, r) {t instanceof m && (t = t._wrapped), e instanceof m && (e = e._wrapped);var i = f.call(t);if (i !== f.call(e)) return !1;switch (i) {case "[object RegExp]":case "[object String]":return "" + t == "" + e;case "[object Number]":return +t != +t ? +e != +e : 0 == +t ? 1 / +t == 1 / e : +t == +e;case "[object Date]":case "[object Boolean]":return +t == +e;case "[object Symbol]":return c.valueOf.call(t) === c.valueOf.call(e);}var o = "[object Array]" === i;if (!o) {if ("object" != typeof t || "object" != typeof e) return !1;var s = t.constructor,a = e.constructor;if (s !== a && !(m.isFunction(s) && s instanceof s && m.isFunction(a) && a instanceof a) && "constructor" in t && "constructor" in e) return !1;}n = n || [], r = r || [];for (var u = n.length; u--;) {if (n[u] === t) return r[u] === e;}if (n.push(t), r.push(e), o) {if ((u = t.length) !== e.length) return !1;for (; u--;) {if (!B(t[u], e[u], n, r)) return !1;}} else {var l,h = m.keys(t);if (u = h.length, m.keys(e).length !== u) return !1;for (; u--;) {if (l = h[u], !E(e, l) || !B(t[l], e[l], n, r)) return !1;}}return n.pop(), r.pop(), !0;}, m.isEqual = function (t, e) {return B(t, e);}, m.isEmpty = function (t) {return null == t || (N(t) && (m.isArray(t) || m.isString(t) || m.isArguments(t)) ? 0 === t.length : 0 === m.keys(t).length);}, m.isElement = function (t) {return !(!t || 1 !== t.nodeType);}, m.isArray = p || function (t) {return "[object Array]" === f.call(t);}, m.isObject = function (t) {var e = typeof t;return "function" === e || "object" === e && !!t;}, m.each(["Arguments", "Function", "String", "Number", "Date", "RegExp", "Error", "Symbol", "Map", "WeakMap", "Set", "WeakSet"], function (t) {m["is" + t] = function (e) {return f.call(e) === "[object " + t + "]";};}), m.isArguments(arguments) || (m.isArguments = function (t) {return E(t, "callee");});var V = o.document && o.document.childNodes; true && "object" != typeof Int8Array && "function" != typeof V && (m.isFunction = function (t) {return "function" == typeof t || !1;}), m.isFinite = function (t) {return !m.isSymbol(t) && isFinite(t) && !isNaN(parseFloat(t));}, m.isNaN = function (t) {return m.isNumber(t) && isNaN(t);}, m.isBoolean = function (t) {return !0 === t || !1 === t || "[object Boolean]" === f.call(t);}, m.isNull = function (t) {return null === t;}, m.isUndefined = function (t) {return void 0 === t;}, m.has = function (t, e) {if (!m.isArray(e)) return E(t, e);for (var n = e.length, r = 0; r < n; r++) {var i = e[r];if (null == t || !d.call(t, i)) return !1;t = t[i];}return !!n;}, m.noConflict = function () {return o._ = s, this;}, m.identity = function (t) {return t;}, m.constant = function (t) {return function () {return t;};}, m.noop = function () {}, m.property = function (t) {return m.isArray(t) ? function (e) {return C(e, t);} : A(t);}, m.propertyOf = function (t) {return null == t ? function () {} : function (e) {return m.isArray(e) ? C(t, e) : t[e];};}, m.matcher = m.matches = function (t) {return t = m.extendOwn({}, t), function (e) {return m.isMatch(e, t);};}, m.times = function (t, e, n) {var r = Array(Math.max(0, t));e = b(e, n, 1);for (var i = 0; i < t; i++) {r[i] = e(i);}return r;}, m.random = function (t, e) {return null == e && (e = t, t = 0), t + Math.floor(Math.random() * (e - t + 1));}, m.now = Date.now || function () {return new Date().getTime();};var J = { "&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&quot;", "'": "&#x27;", "`": "&#x60;" },K = m.invert(J),H = function H(t) {var e = function e(_e2) {return t[_e2];},n = "(?:" + m.keys(t).join("|") + ")",r = RegExp(n),i = RegExp(n, "g");return function (t) {return t = null == t ? "" : "" + t, r.test(t) ? t.replace(i, e) : t;};};m.escape = H(J), m.unescape = H(K), m.result = function (t, e, n) {m.isArray(e) || (e = [e]);var r = e.length;if (!r) return m.isFunction(n) ? n.call(t) : n;for (var i = 0; i < r; i++) {var o = null == t ? void 0 : t[e[i]];void 0 === o && (o = n, i = r), t = m.isFunction(o) ? o.call(t) : o;}return t;};var G = 0;m.uniqueId = function (t) {var e = ++G + "";return t ? t + e : e;}, m.templateSettings = { evaluate: /<%([\s\S]+?)%>/g, interpolate: /<%=([\s\S]+?)%>/g, escape: /<%-([\s\S]+?)%>/g };var z = /(.)^/,$ = { "'": "'", "\\": "\\", "\r": "r", "\n": "n", "\u2028": "u2028", "\u2029": "u2029" },X = /\\|'|\r|\n|\u2028|\u2029/g,Y = function Y(t) {return "\\" + $[t];};m.template = function (t, e, n) {!e && n && (e = n), e = m.defaults({}, e, m.templateSettings);var r = RegExp([(e.escape || z).source, (e.interpolate || z).source, (e.evaluate || z).source].join("|") + "|$", "g"),i = 0,o = "__p+='";t.replace(r, function (e, n, r, s, a) {return o += t.slice(i, a).replace(X, Y), i = a + e.length, n ? o += "'+\n((__t=(" + n + "))==null?'':_.escape(__t))+\n'" : r ? o += "'+\n((__t=(" + r + "))==null?'':__t)+\n'" : s && (o += "';\n" + s + "\n__p+='"), e;}), o += "';\n", e.variable || (o = "with(obj||{}){\n" + o + "}\n"), o = "var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n" + o + "return __p;\n";var s;try {s = new Function(e.variable || "obj", "_", o);} catch (t) {throw t.source = o, t;}var a = function a(t) {return s.call(this, t, m);};return a.source = "function(" + (e.variable || "obj") + "){\n" + o + "}", a;}, m.chain = function (t) {var e = m(t);return e._chain = !0, e;};var Z = function Z(t, e) {return t._chain ? m(e).chain() : e;};m.mixin = function (t) {return m.each(m.functions(t), function (e) {var n = m[e] = t[e];m.prototype[e] = function () {var t = [this._wrapped];return l.apply(t, arguments), Z(this, n.apply(m, t));};}), m;}, m.mixin(m), m.each(["pop", "push", "reverse", "shift", "sort", "splice", "unshift"], function (t) {var e = a[t];m.prototype[t] = function () {var n = this._wrapped;return e.apply(n, arguments), "shift" !== t && "splice" !== t || 0 !== n.length || delete n[0], Z(this, n);};}), m.each(["concat", "join", "slice"], function (t) {var e = a[t];m.prototype[t] = function () {return Z(this, e.apply(this._wrapped, arguments));};}), m.prototype.value = function () {return this._wrapped;}, m.prototype.valueOf = m.prototype.toJSON = m.prototype.value, m.prototype.toString = function () {return String(this._wrapped);}, r = [], void 0 !== (i = function () {return m;}.apply(e, r)) && (n.exports = i);}();}).call(e, n(7), n(30)(t));}, function (t, e, n) {"use strict";var r = n(42).Promise;r._continueWhile = function (t, e) {return t() ? e().then(function () {return r._continueWhile(t, e);}) : r.resolve();}, t.exports = r;}, function (t, e, n) {"use strict";var r = n(0),i = n(57),o = n(0),s = o.extend,a = n(1),u = n(5),c = n(3),l = c.getSessionToken,h = c.ajax,f = function f(t, e) {var n = new Date().getTime(),r = i(n + t);return e ? r + "," + n + ",master" : r + "," + n;},d = function d(t, e) {e ? t["X-LC-Sign"] = f(u.applicationKey) : t["X-LC-Key"] = u.applicationKey;},p = function p() {var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},e = arguments[1],n = { "X-LC-Id": u.applicationId, "Content-Type": "application/json;charset=UTF-8" },r = !1;return "boolean" == typeof t.useMasterKey ? r = t.useMasterKey : "boolean" == typeof u._config.useMasterKey && (r = u._config.useMasterKey), r ? u.masterKey ? e ? n["X-LC-Sign"] = f(u.masterKey, !0) : n["X-LC-Key"] = u.masterKey + ",master" : (console.warn("masterKey is not set, fall back to use appKey"), d(n, e)) : d(n, e), u.hookKey && (n["X-LC-Hook-Key"] = u.hookKey), null !== u._config.production && (n["X-LC-Prod"] = String(u._config.production)), n["X-LC-UA"] = u._sharedConfig.userAgent, a.resolve().then(function () {var e = l(t);if (e) n["X-LC-Session"] = e;else if (!u._config.disableCurrentUser) return u.User.currentAsync().then(function (t) {return t && t._sessionToken && (n["X-LC-Session"] = t._sessionToken), n;});return n;});},_ = function _(t) {var e = t.service,n = void 0 === e ? "api" : e,r = t.version,i = void 0 === r ? "1.1" : r,o = t.path,s = u._config.serverURLs[n];if (!s) throw new Error("undefined server URL for " + n);return "/" !== s.charAt(s.length - 1) && (s += "/"), s += i, o && (s += o), s;},v = function v(t) {var e = t.service,n = t.version,i = t.method,o = t.path,s = t.query,a = t.data,c = t.authOptions,l = t.signKey,f = void 0 === l || l;if (!u.applicationId || !u.applicationKey && !u.masterKey) throw new Error("Not initialized");u._appRouter.refresh();var d = u._config.requestTimeout,v = _({ service: e, path: o, version: n });return p(c, f).then(function (t) {return h({ method: i, url: v, query: s, data: a, headers: t, timeout: d }).catch(function (t) {var e = { code: t.code || -1, error: t.message || t.responseText };if (t.response && t.response.code) e = t.response;else if (t.responseText) try {e = JSON.parse(t.responseText);} catch (t) {}e.rawMessage = e.rawMessage || e.error, u._sharedConfig.keepErrorRawMessage || (e.error += " [" + (t.statusCode || "N/A") + " " + i + " " + v + "]");var n = new Error(e.error);throw delete e.error, r.extend(n, e);});});},y = function y(t, e, n, r, i, o, a) {var u = "";if (t && (u += "/" + t), e && (u += "/" + e), n && (u += "/" + n), i && i._fetchWhenSave) throw new Error("_fetchWhenSave should be in the query");if (i && i._where) throw new Error("_where should be in the query");return r && "get" === r.toLowerCase() && (a = s({}, a, i), i = null), v({ method: r, path: u, query: a, data: i, authOptions: o });};u.request = v, t.exports = { _request: y, request: v };}, function (t, e, n) {"use strict";var r = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (t) {return typeof t;} : function (t) {return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;},i = n(0),o = n(8),s = n(6),a = s("leancloud:request"),u = s("leancloud:request:error"),c = n(1),l = 0,h = function h(t) {var e = t.method,n = t.url,i = t.query,h = t.data,f = t.headers,d = void 0 === f ? {} : f,p = t.onprogress,_ = t.timeout,v = {};if (i) for (var y in i) {var m = i[y];void 0 !== m && ("object" === (void 0 === m ? "undefined" : r(m)) ? v[y] = JSON.stringify(m) : v[y] = m);}var g = l++;return a("request(%d) %s %s %o %o %o", g, e, n, v, h, d), new c(function (t, r) {var c = o(e, n).set(d).query(v).send(h);p && c.on("progress", p), _ && c.timeout(_), c.end(function (o, c) {return o ? (c && (s.enabled("leancloud:request") || u("request(%d) %s %s %o %o %o", g, e, n, i, h, d), u("response(%d) %d %O %o", g, c.status, c.body || c.text, c.header), o.statusCode = c.status, o.responseText = c.text, o.response = c.body), r(o)) : (a("response(%d) %d %O %o", g, c.status, c.body || c.text, c.header), t(c.body));});});},f = function f(t) {return i.isNull(t) || i.isUndefined(t);},d = function d(t) {return i.isArray(t) ? t : void 0 === t || null === t ? [] : [t];},p = function p() {var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},e = t.keys,n = t.include,r = t.includeACL,i = {};return e && (i.keys = d(e).join(",")), n && (i.include = d(n).join(",")), r && (i.returnACL = r), i;},_ = function _(t) {return t.sessionToken ? t.sessionToken : t.user && "function" == typeof t.user.getSessionToken ? t.user.getSessionToken() : void 0;},v = function v(t) {return function (e) {return t(e), e;};},y = function y() {},m = function m(t, e, n) {var r;return r = e && e.hasOwnProperty("constructor") ? e.constructor : function () {t.apply(this, arguments);}, i.extend(r, t), y.prototype = t.prototype, r.prototype = new y(), e && i.extend(r.prototype, e), n && i.extend(r, n), r.prototype.constructor = r, r.__super__ = t.prototype, r;},g = function g(t) {return new Date(t);},b = function b(t, e, n) {var r = e.split("."),i = r.pop(),o = t;return r.forEach(function (t) {void 0 === o[t] && (o[t] = {}), o = o[t];}), o[i] = n, t;},w = function w(t, e) {for (var n = e.split("."), r = n[0], i = n.pop(), o = t, s = 0; s < n.length; s++) {if (void 0 === (o = o[n[s]])) return [void 0, void 0, i];}return [o[i], o, i, r];},O = function O(t) {return i.isObject(t) && Object.getPrototypeOf(t) === Object.prototype;};t.exports = { ajax: h, isNullOrUndefined: f, ensureArray: d, transformFetchOptions: p, getSessionToken: _, tap: v, inherits: m, parseDate: g, setValue: b, findValue: w, isPlainObject: O };}, function (t, e, n) {"use strict";function r(t, e) {var n = new Error(e);return n.code = t, n;}n(0).extend(r, { OTHER_CAUSE: -1, INTERNAL_SERVER_ERROR: 1, CONNECTION_FAILED: 100, OBJECT_NOT_FOUND: 101, INVALID_QUERY: 102, INVALID_CLASS_NAME: 103, MISSING_OBJECT_ID: 104, INVALID_KEY_NAME: 105, INVALID_POINTER: 106, INVALID_JSON: 107, COMMAND_UNAVAILABLE: 108, NOT_INITIALIZED: 109, INCORRECT_TYPE: 111, INVALID_CHANNEL_NAME: 112, PUSH_MISCONFIGURED: 115, OBJECT_TOO_LARGE: 116, OPERATION_FORBIDDEN: 119, CACHE_MISS: 120, INVALID_NESTED_KEY: 121, INVALID_FILE_NAME: 122, INVALID_ACL: 123, TIMEOUT: 124, INVALID_EMAIL_ADDRESS: 125, MISSING_CONTENT_TYPE: 126, MISSING_CONTENT_LENGTH: 127, INVALID_CONTENT_LENGTH: 128, FILE_TOO_LARGE: 129, FILE_SAVE_ERROR: 130, FILE_DELETE_ERROR: 153, DUPLICATE_VALUE: 137, INVALID_ROLE_NAME: 139, EXCEEDED_QUOTA: 140, SCRIPT_FAILED: 141, VALIDATION_ERROR: 142, INVALID_IMAGE_DATA: 150, UNSAVED_FILE_ERROR: 151, INVALID_PUSH_TIME_ERROR: 152, USERNAME_MISSING: 200, PASSWORD_MISSING: 201, USERNAME_TAKEN: 202, EMAIL_TAKEN: 203, EMAIL_MISSING: 204, EMAIL_NOT_FOUND: 205, SESSION_MISSING: 206, MUST_CREATE_USER_THROUGH_SIGNUP: 207, ACCOUNT_ALREADY_LINKED: 208, LINKED_ID_MISSING: 250, INVALID_LINKED_SESSION: 251, UNSUPPORTED_SERVICE: 252, X_DOMAIN_REQUEST: 602 }), t.exports = r;}, function (t, e, n) {"use strict";(function (e) {var r = n(0),i = n(17),o = n(6),s = n(35),a = n(3),u = a.inherits,c = a.parseDate,l = n(1),h = e.AV || {};h._config = { serverURLs: {}, useMasterKey: !1, production: null, realtime: null, requestTimeout: null }, h._sharedConfig = { userAgent: s, liveQueryRealtime: null }, h._getAVPath = function (t) {if (!h.applicationId) throw new Error("You need to call AV.initialize before using AV.");if (t || (t = ""), !r.isString(t)) throw new Error("Tried to get a localStorage path that wasn't a String.");return "/" === t[0] && (t = t.substring(1)), "AV/" + h.applicationId + "/" + t;}, h._installationId = null, h._getInstallationId = function () {if (h._installationId) return l.resolve(h._installationId);var t = h._getAVPath("installationId");return h.localStorage.getItemAsync(t).then(function (e) {return h._installationId = e, h._installationId ? e : (h._installationId = e = i(), h.localStorage.setItemAsync(t, e).then(function () {return e;}));});}, h._subscriptionId = null, h._refreshSubscriptionId = function () {var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : h._getAVPath("subscriptionId"),e = h._subscriptionId = i();return h.localStorage.setItemAsync(t, e).then(function () {return e;});}, h._getSubscriptionId = function () {if (h._subscriptionId) return l.resolve(h._subscriptionId);var t = h._getAVPath("subscriptionId");return h.localStorage.getItemAsync(t).then(function (e) {return h._subscriptionId = e, h._subscriptionId || (e = h._refreshSubscriptionId(t)), e;});}, h._parseDate = c, h._extend = function (t, e) {var n = u(this, t, e);return n.extend = this.extend, n;}, h._encode = function (t, e, n) {var i = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3];if (t instanceof h.Object) {if (n) throw new Error("AV.Objects not allowed here");return e && !r.include(e, t) && t._hasData ? t._toFullJSON(e.concat(t), i) : t._toPointer();}if (t instanceof h.ACL) return t.toJSON();if (r.isDate(t)) return i ? { __type: "Date", iso: t.toJSON() } : t.toJSON();if (t instanceof h.GeoPoint) return t.toJSON();if (r.isArray(t)) return r.map(t, function (t) {return h._encode(t, e, n, i);});if (r.isRegExp(t)) return t.source;if (t instanceof h.Relation) return t.toJSON();if (t instanceof h.Op) return t.toJSON();if (t instanceof h.File) {if (!t.url() && !t.id) throw new Error("Tried to save an object containing an unsaved file.");return t._toFullJSON(e, i);}return r.isObject(t) ? r.mapObject(t, function (t, r) {return h._encode(t, e, n, i);}) : t;}, h._decode = function (t, e) {if (!r.isObject(t) || r.isDate(t)) return t;if (r.isArray(t)) return r.map(t, function (t) {return h._decode(t);});if (t instanceof h.Object) return t;if (t instanceof h.File) return t;if (t instanceof h.Op) return t;if (t instanceof h.GeoPoint) return t;if (t instanceof h.ACL) return t;if ("ACL" === e) return new h.ACL(t);if (t.__op) return h.Op._decode(t);var n;if ("Pointer" === t.__type) {n = t.className;var i = h.Object._create(n);if (Object.keys(t).length > 3) {var o = r.clone(t);delete o.__type, delete o.className, i._finishFetch(o, !0);} else i._finishFetch({ objectId: t.objectId }, !1);return i;}if ("Object" === t.__type) {n = t.className;var s = r.clone(t);delete s.__type, delete s.className;var a = h.Object._create(n);return a._finishFetch(s, !0), a;}if ("Date" === t.__type) return h._parseDate(t.iso);if ("GeoPoint" === t.__type) return new h.GeoPoint({ latitude: t.latitude, longitude: t.longitude });if ("Relation" === t.__type) {if (!e) throw new Error("key missing decoding a Relation");var u = new h.Relation(null, e);return u.targetClassName = t.className, u;}if ("File" === t.__type) {var c = new h.File(t.name),l = r.clone(t);return delete l.__type, c._finishFetch(l), c;}return r.mapObject(t, h._decode);}, h.parseJSON = h._decode, h.parse = function (t) {return h.parseJSON(JSON.parse(t));}, h.stringify = function (t) {return JSON.stringify(h._encode(t, [], !1, !0));}, h._encodeObjectOrArray = function (t) {var e = function e(t) {return t && t._toFullJSON && (t = t._toFullJSON([])), r.mapObject(t, function (t) {return h._encode(t, []);});};return r.isArray(t) ? t.map(function (t) {return e(t);}) : e(t);}, h._arrayEach = r.each, h._traverse = function (t, e, n) {if (t instanceof h.Object) {if (n = n || [], r.indexOf(n, t) >= 0) return;return n.push(t), h._traverse(t.attributes, e, n), e(t);}return t instanceof h.Relation || t instanceof h.File ? e(t) : r.isArray(t) ? (r.each(t, function (r, i) {var o = h._traverse(r, e, n);o && (t[i] = o);}), e(t)) : r.isObject(t) ? (h._each(t, function (r, i) {var o = h._traverse(r, e, n);o && (t[i] = o);}), e(t)) : e(t);}, h._objectEach = h._each = function (t, e) {r.isObject(t) ? r.each(r.keys(t), function (n) {e(t[n], n);}) : r.each(t, e);}, h.debug = { enable: function enable() {var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "leancloud*";return o.enable(t);}, disable: o.disable }, t.exports = h;}).call(e, n(7));}, function (t, e, n) {"use strict";function r(t) {return (r = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (t) {return typeof t;} : function (t) {return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;})(t);}function i() {return !("undefined" == typeof window || !window.process || "renderer" !== window.process.type && !window.process.__nwjs) || ("undefined" == typeof navigator || !navigator.userAgent || !navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) && ("undefined" != typeof document && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || "undefined" != typeof window && window.console && (window.console.firebug || window.console.exception && window.console.table) || "undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || "undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));}function o(e) {if (e[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + e[0] + (this.useColors ? "%c " : " ") + "+" + t.exports.humanize(this.diff), this.useColors) {var n = "color: " + this.color;e.splice(1, 0, n, "color: inherit");var r = 0,i = 0;e[0].replace(/%[a-zA-Z%]/g, function (t) {"%%" !== t && (r++, "%c" === t && (i = r));}), e.splice(i, 0, n);}}function s() {var t;return "object" === ("undefined" == typeof console ? "undefined" : r(console)) && console.log && (t = console).log.apply(t, arguments);}function a(t) {try {t ? e.storage.setItem("debug", t) : e.storage.removeItem("debug");} catch (t) {}}function u() {var t;try {t = e.storage.getItem("debug");} catch (t) {}return !t && "undefined" != typeof process && "env" in process && (t = Object({"NODE_ENV":"development","VUE_APP_NAME":"watchapp-frontend","VUE_APP_PLATFORM":"mp-weixin","BASE_URL":"/"}).DEBUG), t;}e.log = s, e.formatArgs = o, e.save = a, e.load = u, e.useColors = i, e.storage = function () {try {return localStorage;} catch (t) {}}(), e.colors = ["#0000CC", "#0000FF", "#0033CC", "#0033FF", "#0066CC", "#0066FF", "#0099CC", "#0099FF", "#00CC00", "#00CC33", "#00CC66", "#00CC99", "#00CCCC", "#00CCFF", "#3300CC", "#3300FF", "#3333CC", "#3333FF", "#3366CC", "#3366FF", "#3399CC", "#3399FF", "#33CC00", "#33CC33", "#33CC66", "#33CC99", "#33CCCC", "#33CCFF", "#6600CC", "#6600FF", "#6633CC", "#6633FF", "#66CC00", "#66CC33", "#9900CC", "#9900FF", "#9933CC", "#9933FF", "#99CC00", "#99CC33", "#CC0000", "#CC0033", "#CC0066", "#CC0099", "#CC00CC", "#CC00FF", "#CC3300", "#CC3333", "#CC3366", "#CC3399", "#CC33CC", "#CC33FF", "#CC6600", "#CC6633", "#CC9900", "#CC9933", "#CCCC00", "#CCCC33", "#FF0000", "#FF0033", "#FF0066", "#FF0099", "#FF00CC", "#FF00FF", "#FF3300", "#FF3333", "#FF3366", "#FF3399", "#FF33CC", "#FF33FF", "#FF6600", "#FF6633", "#FF9900", "#FF9933", "#FFCC00", "#FFCC33"], t.exports = n(33)(e), t.exports.formatters.j = function (t) {try {return JSON.stringify(t);} catch (t) {return "[UnexpectedJSONParseError]: " + t.message;}};}, function (t, e) {var n;n = function () {return this;}();try {n = n || Function("return this")() || (0, eval)("this");} catch (t) {"object" == typeof window && (n = window);}t.exports = n;}, function (t, e, n) {function r() {}function i(t) {if (!_(t)) return t;var e = [];for (var n in t) {o(e, n, t[n]);}return e.join("&");}function o(t, e, n) {if (null != n) {if (Array.isArray(n)) n.forEach(function (n) {o(t, e, n);});else if (_(n)) for (var r in n) {o(t, e + "[" + r + "]", n[r]);} else t.push(encodeURIComponent(e) + "=" + encodeURIComponent(n));} else null === n && t.push(encodeURIComponent(e));}function s(t) {for (var e, n, r = {}, i = t.split("&"), o = 0, s = i.length; o < s; ++o) {e = i[o], n = e.indexOf("="), -1 == n ? r[decodeURIComponent(e)] = "" : r[decodeURIComponent(e.slice(0, n))] = decodeURIComponent(e.slice(n + 1));}return r;}function a(t) {for (var e, n, r, i, o = t.split(/\r?\n/), s = {}, a = 0, u = o.length; a < u; ++a) {n = o[a], -1 !== (e = n.indexOf(":")) && (r = n.slice(0, e).toLowerCase(), i = g(n.slice(e + 1)), s[r] = i);}return s;}function u(t) {return /[\/+]json($|[^-\w])/.test(t);}function c(t) {this.req = t, this.xhr = this.req.xhr, this.text = "HEAD" != this.req.method && ("" === this.xhr.responseType || "text" === this.xhr.responseType) || void 0 === this.xhr.responseType ? this.xhr.responseText : null, this.statusText = this.req.xhr.statusText;var e = this.xhr.status;1223 === e && (e = 204), this._setStatusProperties(e), this.header = this.headers = a(this.xhr.getAllResponseHeaders()), this.header["content-type"] = this.xhr.getResponseHeader("content-type"), this._setHeaderProperties(this.header), null === this.text && t._responseType ? this.body = this.xhr.response : this.body = "HEAD" != this.req.method ? this._parseBody(this.text ? this.text : this.xhr.response) : null;}function l(t, e) {var n = this;this._query = this._query || [], this.method = t, this.url = e, this.header = {}, this._header = {}, this.on("end", function () {var t = null,e = null;try {e = new c(n);} catch (e) {return t = new Error("Parser is unable to parse the response"), t.parse = !0, t.original = e, n.xhr ? (t.rawResponse = void 0 === n.xhr.responseType ? n.xhr.responseText : n.xhr.response, t.status = n.xhr.status ? n.xhr.status : null, t.statusCode = t.status) : (t.rawResponse = null, t.status = null), n.callback(t);}n.emit("response", e);var r;try {n._isResponseOK(e) || (r = new Error(e.statusText || "Unsuccessful HTTP response"));} catch (t) {r = t;}r ? (r.original = t, r.response = e, r.status = e.status, n.callback(r, e)) : n.callback(null, e);});}function h(t, e, n) {var r = m("DELETE", t);return "function" == typeof e && (n = e, e = null), e && r.send(e), n && r.end(n), r;}var f;"undefined" != typeof window ? f = window : "undefined" != typeof self ? f = self : (console.warn("Using browser-only version of superagent in non-browser environment"), f = this);var d = n(37),p = n(38),_ = n(19),v = n(39),y = n(41),m = e = t.exports = function (t, n) {return "function" == typeof n ? new e.Request("GET", t).end(n) : 1 == arguments.length ? new e.Request("GET", t) : new e.Request(t, n);};e.Request = l, m.getXHR = function () {if (!(!f.XMLHttpRequest || f.location && "file:" == f.location.protocol && f.ActiveXObject)) return new XMLHttpRequest();try {return new ActiveXObject("Microsoft.XMLHTTP");} catch (t) {}try {return new ActiveXObject("Msxml2.XMLHTTP.6.0");} catch (t) {}try {return new ActiveXObject("Msxml2.XMLHTTP.3.0");} catch (t) {}try {return new ActiveXObject("Msxml2.XMLHTTP");} catch (t) {}throw Error("Browser-only version of superagent could not find XHR");};var g = "".trim ? function (t) {return t.trim();} : function (t) {return t.replace(/(^\s*|\s*$)/g, "");};m.serializeObject = i, m.parseString = s, m.types = { html: "text/html", json: "application/json", xml: "text/xml", urlencoded: "application/x-www-form-urlencoded", form: "application/x-www-form-urlencoded", "form-data": "application/x-www-form-urlencoded" }, m.serialize = { "application/x-www-form-urlencoded": i, "application/json": JSON.stringify }, m.parse = { "application/x-www-form-urlencoded": s, "application/json": JSON.parse }, v(c.prototype), c.prototype._parseBody = function (t) {var e = m.parse[this.type];return this.req._parser ? this.req._parser(this, t) : (!e && u(this.type) && (e = m.parse["application/json"]), e && t && (t.length || t instanceof Object) ? e(t) : null);}, c.prototype.toError = function () {var t = this.req,e = t.method,n = t.url,r = "cannot " + e + " " + n + " (" + this.status + ")",i = new Error(r);return i.status = this.status, i.method = e, i.url = n, i;}, m.Response = c, d(l.prototype), p(l.prototype), l.prototype.type = function (t) {return this.set("Content-Type", m.types[t] || t), this;}, l.prototype.accept = function (t) {return this.set("Accept", m.types[t] || t), this;}, l.prototype.auth = function (t, e, n) {1 === arguments.length && (e = ""), "object" == typeof e && null !== e && (n = e, e = ""), n || (n = { type: "function" == typeof btoa ? "basic" : "auto" });var r = function r(t) {if ("function" == typeof btoa) return btoa(t);throw new Error("Cannot use basic auth, btoa is not a function");};return this._auth(t, e, n, r);}, l.prototype.query = function (t) {return "string" != typeof t && (t = i(t)), t && this._query.push(t), this;}, l.prototype.attach = function (t, e, n) {if (e) {if (this._data) throw Error("superagent can't mix .send() and .attach()");this._getFormData().append(t, e, n || e.name);}return this;}, l.prototype._getFormData = function () {return this._formData || (this._formData = new f.FormData()), this._formData;}, l.prototype.callback = function (t, e) {if (this._shouldRetry(t, e)) return this._retry();var n = this._callback;this.clearTimeout(), t && (this._maxRetries && (t.retries = this._retries - 1), this.emit("error", t)), n(t, e);}, l.prototype.crossDomainError = function () {var t = new Error("Request has been terminated\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.");t.crossDomain = !0, t.status = this.status, t.method = this.method, t.url = this.url, this.callback(t);}, l.prototype.buffer = l.prototype.ca = l.prototype.agent = function () {return console.warn("This is not supported in browser version of superagent"), this;}, l.prototype.pipe = l.prototype.write = function () {throw Error("Streaming is not supported in browser version of superagent");}, l.prototype._isHost = function (t) {return t && "object" == typeof t && !Array.isArray(t) && "[object Object]" !== Object.prototype.toString.call(t);}, l.prototype.end = function (t) {return this._endCalled && console.warn("Warning: .end() was called twice. This is not supported in superagent"), this._endCalled = !0, this._callback = t || r, this._finalizeQueryString(), this._end();}, l.prototype._end = function () {var t = this,e = this.xhr = m.getXHR(),n = this._formData || this._data;this._setTimeouts(), e.onreadystatechange = function () {var n = e.readyState;if (n >= 2 && t._responseTimeoutTimer && clearTimeout(t._responseTimeoutTimer), 4 == n) {var r;try {r = e.status;} catch (t) {r = 0;}if (!r) {if (t.timedout || t._aborted) return;return t.crossDomainError();}t.emit("end");}};var r = function r(e, n) {n.total > 0 && (n.percent = n.loaded / n.total * 100), n.direction = e, t.emit("progress", n);};if (this.hasListeners("progress")) try {e.onprogress = r.bind(null, "download"), e.upload && (e.upload.onprogress = r.bind(null, "upload"));} catch (t) {}try {this.username && this.password ? e.open(this.method, this.url, !0, this.username, this.password) : e.open(this.method, this.url, !0);} catch (t) {return this.callback(t);}if (this._withCredentials && (e.withCredentials = !0), !this._formData && "GET" != this.method && "HEAD" != this.method && "string" != typeof n && !this._isHost(n)) {var i = this._header["content-type"],o = this._serializer || m.serialize[i ? i.split(";")[0] : ""];!o && u(i) && (o = m.serialize["application/json"]), o && (n = o(n));}for (var s in this.header) {null != this.header[s] && this.header.hasOwnProperty(s) && e.setRequestHeader(s, this.header[s]);}return this._responseType && (e.responseType = this._responseType), this.emit("request", this), e.send(void 0 !== n ? n : null), this;}, m.agent = function () {return new y();}, ["GET", "POST", "OPTIONS", "PATCH", "PUT", "DELETE"].forEach(function (t) {y.prototype[t.toLowerCase()] = function (e, n) {var r = new m.Request(t, e);return this._setDefaults(r), n && r.end(n), r;};}), y.prototype.del = y.prototype.delete, m.get = function (t, e, n) {var r = m("GET", t);return "function" == typeof e && (n = e, e = null), e && r.query(e), n && r.end(n), r;}, m.head = function (t, e, n) {var r = m("HEAD", t);return "function" == typeof e && (n = e, e = null), e && r.query(e), n && r.end(n), r;}, m.options = function (t, e, n) {var r = m("OPTIONS", t);return "function" == typeof e && (n = e, e = null), e && r.send(e), n && r.end(n), r;}, m.del = h, m.delete = h, m.patch = function (t, e, n) {var r = m("PATCH", t);return "function" == typeof e && (n = e, e = null), e && r.send(e), n && r.end(n), r;}, m.post = function (t, e, n) {var r = m("POST", t);return "function" == typeof e && (n = e, e = null), e && r.send(e), n && r.end(n), r;}, m.put = function (t, e, n) {var r = m("PUT", t);return "function" == typeof e && (n = e, e = null), e && r.send(e), n && r.end(n), r;};}, function (t, e, n) {"use strict";var r = n(10),i = n(27),o = n(28),s = r.LISTENERS,a = r.CAPTURE,u = r.BUBBLE,c = r.ATTRIBUTE,l = r.newNode,h = i.defineCustomEventTarget,f = o.createEventWrapper,d = o.STOP_IMMEDIATE_PROPAGATION_FLAG,p = "undefined" != typeof window && void 0 !== window.EventTarget,_ = t.exports = function t() {if (!(this instanceof t)) {if (1 === arguments.length && Array.isArray(arguments[0])) return h(t, arguments[0]);if (arguments.length > 0) {for (var e = Array(arguments.length), n = 0; n < arguments.length; ++n) {e[n] = arguments[n];}return h(t, e);}throw new TypeError("Cannot call a class as a function");}Object.defineProperty(this, s, { value: Object.create(null) });};_.prototype = Object.create((p ? window.EventTarget : Object).prototype, { constructor: { value: _, writable: !0, configurable: !0 }, addEventListener: { value: function value(t, e, n) {if (null == e) return !1;if ("function" != typeof e && "object" != typeof e) throw new TypeError('"listener" is not an object.');var r = n ? a : u,i = this[s][t];if (null == i) return this[s][t] = l(e, r), !0;for (var o = null; null != i;) {if (i.listener === e && i.kind === r) return !1;o = i, i = i.next;}return o.next = l(e, r), !0;}, configurable: !0, writable: !0 }, removeEventListener: { value: function value(t, e, n) {if (null == e) return !1;for (var r = n ? a : u, i = null, o = this[s][t]; null != o;) {if (o.listener === e && o.kind === r) return null == i ? this[s][t] = o.next : i.next = o.next, !0;i = o, o = o.next;}return !1;}, configurable: !0, writable: !0 }, dispatchEvent: { value: function value(t) {var e = this[s][t.type];if (null == e) return !0;for (var n = f(t, this); null != e && ("function" == typeof e.listener ? e.listener.call(this, n) : e.kind !== c && "function" == typeof e.listener.handleEvent && e.listener.handleEvent(n), !n[d]);) {e = e.next;}return !n.defaultPrevented;}, configurable: !0, writable: !0 } });}, function (t, e, n) {"use strict";var r = e.createUniqueKey = "undefined" != typeof Symbol ? Symbol : function (t) {return "[[" + t + "_" + Math.random().toFixed(8).slice(2) + "]]";};e.LISTENERS = r("listeners"), e.CAPTURE = 1, e.BUBBLE = 2, e.ATTRIBUTE = 3, e.newNode = function (t, e) {return { listener: t, kind: e, next: null };};}, function (t, e, n) {"use strict";function r(t, e) {if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");}var i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (t) {return typeof t;} : function (t) {return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;},o = function () {function t(t, e) {for (var n = 0; n < e.length; n++) {var r = e[n];r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(t, r.key, r);}}return function (e, n, r) {return n && t(e.prototype, n), r && t(e, r), e;};}(),s = function () {function t() {r(this, t), this._entries = [];}return o(t, [{ key: "append", value: function value(t, e) {if ("string" != typeof t) throw new TypeError("FormData name must be a string");if ("string" != typeof e && ("object" !== (void 0 === e ? "undefined" : i(e)) || "string" != typeof e.uri)) throw new TypeError("FormData value must be a string or { uri: tempFilePath }");this._entries.push([t, e]);} }, { key: "set", value: function value(t, e) {var n = this.get(t);n ? n[1] = e : this.append(t, e);} }, { key: "delete", value: function value(t) {this._entries = this._entries.filter(function (e) {return e[0] !== t;});} }, { key: "entries", value: function value() {return this._entries;} }, { key: "get", value: function value(t) {return this._entries.find(function (e) {return e[0] === t;});} }, { key: "getAll", value: function value(t) {return this._entries.filter(function (e) {return e[0] === t;});} }, { key: "has", value: function value(t) {return this._entries.some(function (e) {return e[0] === t;});} }, { key: "keys", value: function value() {return this._entries.map(function (t) {return t[0];});} }, { key: "values", value: function value() {return this._entries.map(function (t) {return t[1];});} }]), t;}();t.exports = s;}, function (t, e, n) {"use strict";function r(t, e) {if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");}var i = function () {function t(t, e) {for (var n = 0; n < e.length; n++) {var r = e[n];r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(t, r.key, r);}}return function (e, n, r) {return n && t(e.prototype, n), r && t(e, r), e;};}(),o = function () {function t() {r(this, t);}return i(t, [{ key: "getItem", value: function value(t) {return wx.getStorageSync(t);} }, { key: "setItem", value: function value(t, e) {return wx.setStorageSync(t, e);} }, { key: "removeItem", value: function value(t) {return this.setItem(t, "");} }, { key: "clear", value: function value() {return wx.clearStorageSync();} }]), t;}();t.exports = new o();}, function (t, e, n) {"use strict";function r(t, e, n) {return e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;}function i(t, e) {if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");}function o(t, e) {if (!t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !e || "object" != typeof e && "function" != typeof e ? t : e;}function s(t, e) {if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function, not " + typeof e);t.prototype = Object.create(e && e.prototype, { constructor: { value: t, enumerable: !1, writable: !0, configurable: !0 } }), e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e);}function a(t) {this.status = t.statusCode, this.statusText = t.statusCode, t.header && (this._responseHeaders = Object.keys(t.header).reduce(function (e, n) {return e[n.toLowerCase()] = t.header[n], e;}, {}));var e = t.data;"string" != typeof e && (e = JSON.stringify(e)), this.responseText = this.response = e, this.readyState = d, this.dispatchEvent({ type: "readystatechange" });}var u = function () {function t(t, e) {for (var n = 0; n < e.length; n++) {var r = e[n];r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(t, r.key, r);}}return function (e, n, r) {return n && t(e.prototype, n), r && t(e, r), e;};}(),c = n(14),l = n(9),h = n(11),f = 0,d = 4,p = ["abort", "error", "load", "loadstart", "progress", "timeout", "loadend", "readystatechange"],_ = ["abort", "error", "load", "loadstart", "progress", "timeout", "loadend"],v = function (t) {function e() {return i(this, e), o(this, (e.__proto__ || Object.getPrototypeOf(e)).apply(this, arguments));}return s(e, t), e;}(l(_)),y = function (t) {function e() {i(this, e);var t = o(this, (e.__proto__ || Object.getPrototypeOf(e)).call(this));return t.readyState = f, t._headers = {}, t.upload = new v(), t;}return s(e, t), u(e, [{ key: "abort", value: function value() {if (!this._request || this._request.abort) return this.status = 0, this.readyState = d, this._request.abort();throw new Error("该版本基础库不支持 abort request");} }, { key: "getAllResponseHeaders", value: function value() {var t = this;return this._responseHeaders ? Object.keys(this._responseHeaders).map(function (e) {return e + ": " + t._responseHeaders[e];}).join("\r\n") : "";} }, { key: "getResponseHeader", value: function value(t) {var e = t.toLowerCase();return this._responseHeaders && this._responseHeaders[e] ? this._responseHeaders[e] : null;} }, { key: "overrideMimeType", value: function value() {throw new Error("not supported in weapp");} }, { key: "open", value: function value(t, e) {var n = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];if (this.readyState !== f) throw new Error("request is already opened");if (!n) throw new Error("sync request is not supported");this._method = t, this._url = e, this.readyState = 1, this.dispatchEvent({ type: "readystatechange" });} }, { key: "setRequestHeader", value: function value(t, e) {if (1 !== this.readyState) throw new Error("request is not opened");this._headers[t.toLowerCase()] = e;} }, { key: "send", value: function value(t) {var e = this;if (1 !== this.readyState) throw new Error("request is not opened");if (t instanceof h) {var n = t.entries(),i = n.filter(function (t) {return "string" != typeof t[1];});if (0 === i.length) throw new Error("Must specify a Blob field in FormData");i.length > 1 && console.warn("Only the first Blob will be send in Weapp");var o = n.filter(function (t) {return "string" == typeof t[1];}).reduce(function (t, e) {return c(t, r({}, e[0], e[1]));}, {});this._request = wx.uploadFile({ url: this._url, name: i[0][0], filePath: i[0][1].uri, formData: o, header: this._headers, success: a.bind(this), fail: function fail(t) {e.status = 0, e.readyState = d, e.dispatchEvent({ type: "readystatechange" }), e.dispatchEvent({ type: "error" });} }), this._request && this._request.onProgressUpdate && this._request.onProgressUpdate(function (t) {var n = t.totalBytesSent,r = t.totalBytesExpectedToSend;e.upload.dispatchEvent({ type: "progress", loaded: n, total: r });});} else this._request = wx.request({ url: this._url, data: t || "", method: this._method.toUpperCase(), header: this._headers, success: a.bind(this), fail: function fail(t) {e.status = 0, e.readyState = d, e.dispatchEvent({ type: "readystatechange" }), e.dispatchEvent({ type: "error" });} });} }]), e;}(l(p));c(y, { UNSENT: f, OPENED: 1, HEADERS_RECEIVED: 2, LOADING: 3, DONE: d }), t.exports = y;}, function (t, e, n) {"use strict";function r(t) {if (null === t || void 0 === t) throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t);} /*
object-assign
c) Sindre Sorhus
license MIT

    var i = Object.getOwnPropertySymbols,o = Object.prototype.hasOwnProperty,s = Object.prototype.propertyIsEnumerable;t.exports = function () {try {if (!Object.assign) return !1;var t = new String("abc");if (t[5] = "de", "5" === Object.getOwnPropertyNames(t)[0]) return !1;for (var e = {}, n = 0; n < 10; n++) {e["_" + String.fromCharCode(n)] = n;}if ("0123456789" !== Object.getOwnPropertyNames(e).map(function (t) {return e[t];}).join("")) return !1;var r = {};return "abcdefghijklmnopqrst".split("").forEach(function (t) {r[t] = t;}), "abcdefghijklmnopqrst" === Object.keys(Object.assign({}, r)).join("");} catch (t) {return !1;}}() ? Object.assign : function (t, e) {for (var n, a, u = r(t), c = 1; c < arguments.length; c++) {n = Object(arguments[c]);for (var l in n) {o.call(n, l) && (u[l] = n[l]);}if (i) {a = i(n);for (var h = 0; h < a.length; h++) {s.call(n, a[h]) && (u[a[h]] = n[a[h]]);}}}return u;};}, function (t, e, n) {"use strict";function r(t, e) {if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");}function i(t, e) {if (!t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !e || "object" != typeof e && "function" != typeof e ? t : e;}function o(t, e) {if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function, not " + typeof e);t.prototype = Object.create(e && e.prototype, { constructor: { value: t, enumerable: !1, writable: !0, configurable: !0 } }), e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e);}var s = function () {function t(t, e) {for (var n = 0; n < e.length; n++) {var r = e[n];r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(t, r.key, r);}}return function (e, n, r) {return n && t(e.prototype, n), r && t(e, r), e;};}(),a = n(14),u = n(9),c = 0,l = 1,h = 3,f = ["open", "error", "message", "close"],d = function (t) {function e(t, n) {if (r(this, e), !t) throw new TypeError("Failed to construct 'WebSocket': url required");if (n && (!wx.canIUse || !wx.canIUse("connectSocket.object.protocols"))) throw new Error("subprotocal not supported in weapp");var o = i(this, (e.__proto__ || Object.getPrototypeOf(e)).call(this));o._url = t, o._protocal = n || "", o._readyState = c;var s = function s(t) {o._readyState = h, o.dispatchEvent({ type: "error", message: t.errMsg });},a = wx.connectSocket({ url: t, protocals: o._protocal, fail: function fail(t) {return setTimeout(function () {return s(t);}, 0);} });return o._socketTask = a, a.onOpen(function (t) {o._readyState = l, o.dispatchEvent({ type: "open" });}), a.onError(s), a.onMessage(function (t) {var e = t.data,n = t.origin,r = t.ports,i = t.source;o.dispatchEvent({ data: e, origin: n, ports: r, source: i, type: "message" });}), a.onClose(function (t) {o._readyState = h;var e = t.code,n = t.reason,r = t.wasClean;o.dispatchEvent({ code: e, reason: n, wasClean: r, type: "close" });}), o;}return o(e, t), s(e, [{ key: "close", value: function value() {this.readyState !== h && (this.readyState === c && console.warn("close WebSocket which is connecting might not work"), this._socketTask.close());} }, { key: "send", value: function value(t) {if (this.readyState !== l) throw new Error("INVALID_STATE_ERR");if (!("string" == typeof t || t instanceof ArrayBuffer)) throw new TypeError("only String/ArrayBuffer supported");this._socketTask.send({ data: t });} }, { key: "url", get: function get() {return this._url;} }, { key: "protocal", get: function get() {return this._protocal;} }, { key: "readyState", get: function get() {return this._readyState;} }]), e;}(u(f));a(d, { CONNECTING: c, OPEN: l, CLOSING: 2, CLOSED: h }), t.exports = d;}, function (t, e, n) {"use strict";t.exports = {};}, function (t, e, n) {function r(t, e, n) {var r = e && n || 0;"string" == typeof t && (e = "binary" === t ? new Array(16) : null, t = null), t = t || {};var s = t.random || (t.rng || i)();if (s[6] = 15 & s[6] | 64, s[8] = 63 & s[8] | 128, e) for (var a = 0; a < 16; ++a) {e[r + a] = s[a];}return e || o(s);}var i = n(31),o = n(32);t.exports = r;}, function (t, e, n) {"use strict";t.exports = "4.2.0";}, function (t, e, n) {"use strict";function r(t) {return null !== t && "object" == typeof t;}t.exports = r;}, function (t, e, n) {"use strict";var r = n(1),i = n(44),o = ["getItem", "setItem", "removeItem", "clear"];i.async ? o.forEach(function (t) {"function" != typeof i[t] && (i[t] = function () {var e = new Error("Synchronous API [" + t + "] is not available in this runtime.");throw e.code = "SYNC_API_NOT_AVAILABLE", e;});}) : o.forEach(function (t) {"function" == typeof i[t] && (i[t + "Async"] = function () {return r.resolve(i[t].apply(i, arguments));});}), t.exports = i;}, function (t, e, n) {"use strict";var r = n(20),i = n(5),o = e.removeAsync = r.removeItemAsync.bind(r),s = function s(t, e) {try {t = JSON.parse(t);} catch (t) {return null;}if (t) {return t.expiredAt && t.expiredAt < Date.now() ? o(e).then(function () {return null;}) : t.value;}return null;};e.getAsync = function (t) {return t = "AV/" + i.applicationId + "/" + t, r.getItemAsync(t).then(function (e) {return s(e, t);});}, e.setAsync = function (t, e, n) {var o = { value: e };return "number" == typeof n && (o.expiredAt = Date.now() + n), r.setItemAsync("AV/" + i.applicationId + "/" + t, JSON.stringify(o));};}, function (t, e) {var n = { utf8: { stringToBytes: function stringToBytes(t) {return n.bin.stringToBytes(unescape(encodeURIComponent(t)));}, bytesToString: function bytesToString(t) {return decodeURIComponent(escape(n.bin.bytesToString(t)));} }, bin: { stringToBytes: function stringToBytes(t) {for (var e = [], n = 0; n < t.length; n++) {e.push(255 & t.charCodeAt(n));}return e;}, bytesToString: function bytesToString(t) {for (var e = [], n = 0; n < t.length; n++) {e.push(String.fromCharCode(t[n]));}return e.join("");} } };t.exports = n;}, function (t, e, n) {"use strict"; /*!
eanCloud JavaScript SDK
https://leancloud.cn
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *
opyright 2016 LeanCloud.cn, Inc.
he LeanCloud JavaScript SDK is freely distributable under the MIT license.

    n(24);var r = n(0),i = n(5);i._ = r, i.version = n(18), i.Promise = n(1), i.localStorage = n(20), i.Cache = n(21), i.Error = n(4), n(46), n(48)(i), n(49)(i), n(50)(i), n(51)(i), n(52)(i), n(53)(i), n(61)(i), n(62)(i), n(63)(i), n(64)(i), n(65)(i), n(67)(i), n(68)(i), n(69)(i), n(70)(i), n(71)(i), n(72)(i), i.Conversation = n(73), n(74), t.exports = i;}, function (t, e, n) {"use strict";n(25);}, function (t, e, n) {"use strict";var r = n(26).polyfill;try {r();} catch (t) {}try {r(GameGlobal);} catch (t) {}try {window = window || {}, r(window);} catch (t) {}try {localStorage = localStorage || n(12);} catch (t) {}try {XMLHttpRequest = XMLHttpRequest || n(13);} catch (t) {}try {FormData = FormData || n(11);} catch (t) {}try {WebSocket = WebSocket || n(15);} catch (t) {}try {navigator = navigator || n(16);} catch (t) {}}, function (t, e, n) {"use strict";(function (e) {var r = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (t) {return typeof t;} : function (t) {return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;},i = n(12),o = n(13),s = n(11),a = n(15),u = n(29),c = n(16);t.exports = { polyfill: function polyfill() {var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : e || window;if ("object" !== (void 0 === t ? "undefined" : r(t))) throw new Error("polyfill target is not an Object");var n = { localStorage: i, XMLHttpRequest: o, FormData: s, WebSocket: a, Object: Object, navigator: c };for (var l in n) {t[l] || (t[l] = n[l]);}u.polyfill(t), t.navigator.product = "ReactNative";}, localStorage: i, XMLHttpRequest: o, FormData: s, WebSocket: a };}).call(e, n(7));}, function (t, e, n) {"use strict";function r(t, e) {for (var n = t[s][e]; null != n;) {if (n.kind === a) return n.listener;n = n.next;}return null;}function i(t, e, n) {"function" != typeof n && "object" != typeof n && (n = null);for (var r = null, i = t[s][e]; null != i;) {i.kind === a ? null == r ? t[s][e] = i.next : r.next = i.next : r = i, i = i.next;}null != n && (null == r ? t[s][e] = u(n, a) : r.next = u(n, a));}var o = n(10),s = o.LISTENERS,a = o.ATTRIBUTE,u = o.newNode;e.defineCustomEventTarget = function (t, e) {function n() {t.call(this);}var o = { constructor: { value: n, configurable: !0, writable: !0 } };return e.forEach(function (t) {o["on" + t] = { get: function get() {return r(this, t);}, set: function set(e) {i(this, t, e);}, configurable: !0, enumerable: !0 };}), n.prototype = Object.create(t.prototype, o), n;};}, function (t, e, n) {"use strict";var r = n(10).createUniqueKey,i = r("stop_immediate_propagation_flag"),o = r("canceled_flag"),s = r("original_event"),a = Object.freeze({ stopPropagation: Object.freeze({ value: function value() {var t = this[s];"function" == typeof t.stopPropagation && t.stopPropagation();}, writable: !0, configurable: !0 }), stopImmediatePropagation: Object.freeze({ value: function value() {this[i] = !0;var t = this[s];"function" == typeof t.stopImmediatePropagation && t.stopImmediatePropagation();}, writable: !0, configurable: !0 }), preventDefault: Object.freeze({ value: function value() {!0 === this.cancelable && (this[o] = !0);var t = this[s];"function" == typeof t.preventDefault && t.preventDefault();}, writable: !0, configurable: !0 }), defaultPrevented: Object.freeze({ get: function get() {return this[o];}, enumerable: !0, configurable: !0 }) });e.STOP_IMMEDIATE_PROPAGATION_FLAG = i, e.createEventWrapper = function (t, e) {var n = "number" == typeof t.timeStamp ? t.timeStamp : Date.now(),r = { type: { value: t.type, enumerable: !0 }, target: { value: e, enumerable: !0 }, currentTarget: { value: e, enumerable: !0 }, eventPhase: { value: 2, enumerable: !0 }, bubbles: { value: Boolean(t.bubbles), enumerable: !0 }, cancelable: { value: Boolean(t.cancelable), enumerable: !0 }, timeStamp: { value: n, enumerable: !0 }, isTrusted: { value: !1, enumerable: !0 } };return r[i] = { value: !1, writable: !0 }, r[o] = { value: !1, writable: !0 }, r[s] = { value: t }, void 0 !== t.detail && (r.detail = { value: t.detail, enumerable: !0 }), Object.create(Object.create(t, a), r);};}, function (t, e, n) {"use strict";var r = n(9);e.polyfill = function (t) {if (wx.onNetworkStatusChange && !t.__onlineOfflinePolyfilled) {t.__onlineOfflinePolyfilled = !0;var e = new r();t.dispatchEvent || (t.addEventListener = e.addEventListener.bind(e), t.removeEventListener = e.removeEventListener.bind(e), t.dispatchEvent = e.dispatchEvent.bind(e), "function" != typeof postMessage || t.importScripts || (t.importScripts = function () {throw new Error("mocked");})), wx.getNetworkType({ success: function success(e) {var n = e.networkType;t.onLine = "none" !== n, wx.onNetworkStatusChange(function (e) {var n = e.isConnected;t.onLine !== n && (t.onLine = n, t.dispatchEvent({ type: n ? "online" : "offline" }));});} });}};}, function (t, e) {t.exports = function (t) {return t.webpackPolyfill || (t.deprecate = function () {}, t.paths = [], t.children || (t.children = []), Object.defineProperty(t, "loaded", { enumerable: !0, get: function get() {return t.l;} }), Object.defineProperty(t, "id", { enumerable: !0, get: function get() {return t.i;} }), t.webpackPolyfill = 1), t;};}, function (t, e) {var n = "undefined" != typeof crypto && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || "undefined" != typeof msCrypto && "function" == typeof window.msCrypto.getRandomValues && msCrypto.getRandomValues.bind(msCrypto);if (n) {var r = new Uint8Array(16);t.exports = function () {return n(r), r;};} else {var i = new Array(16);t.exports = function () {for (var t, e = 0; e < 16; e++) {0 == (3 & e) && (t = 4294967296 * Math.random()), i[e] = t >>> ((3 & e) << 3) & 255;}return i;};}}, function (t, e) {function n(t, e) {var n = e || 0,i = r;return [i[t[n++]], i[t[n++]], i[t[n++]], i[t[n++]], "-", i[t[n++]], i[t[n++]], "-", i[t[n++]], i[t[n++]], "-", i[t[n++]], i[t[n++]], "-", i[t[n++]], i[t[n++]], i[t[n++]], i[t[n++]], i[t[n++]], i[t[n++]]].join("");}for (var r = [], i = 0; i < 256; ++i) {r[i] = (i + 256).toString(16).substr(1);}t.exports = n;}, function (t, e, n) {"use strict";function r(t) {function e(t) {for (var e = 0, n = 0; n < t.length; n++) {e = (e << 5) - e + t.charCodeAt(n), e |= 0;}return r.colors[Math.abs(e) % r.colors.length];}function r(t) {function n() {if (n.enabled) {for (var t = arguments.length, e = new Array(t), i = 0; i < t; i++) {e[i] = arguments[i];}var o = n,a = Number(new Date()),u = a - (s || a);o.diff = u, o.prev = s, o.curr = a, s = a, e[0] = r.coerce(e[0]), "string" != typeof e[0] && e.unshift("%O");var c = 0;e[0] = e[0].replace(/%([a-zA-Z%])/g, function (t, n) {if ("%%" === t) return t;c++;var i = r.formatters[n];if ("function" == typeof i) {var s = e[c];t = i.call(o, s), e.splice(c, 1), c--;}return t;}), r.formatArgs.call(o, e);(o.log || r.log).apply(o, e);}}var s;return n.namespace = t, n.enabled = r.enabled(t), n.useColors = r.useColors(), n.color = e(t), n.destroy = i, n.extend = o, "function" == typeof r.init && r.init(n), r.instances.push(n), n;}function i() {var t = r.instances.indexOf(this);return -1 !== t && (r.instances.splice(t, 1), !0);}function o(t, e) {return r(this.namespace + (void 0 === e ? ":" : e) + t);}function s(t) {r.save(t), r.names = [], r.skips = [];var e,n = ("string" == typeof t ? t : "").split(/[\s,]+/),i = n.length;for (e = 0; e < i; e++) {n[e] && (t = n[e].replace(/\*/g, ".*?"), "-" === t[0] ? r.skips.push(new RegExp("^" + t.substr(1) + "$")) : r.names.push(new RegExp("^" + t + "$")));}for (e = 0; e < r.instances.length; e++) {var o = r.instances[e];o.enabled = r.enabled(o.namespace);}}function a() {r.enable("");}function u(t) {if ("*" === t[t.length - 1]) return !0;var e, n;for (e = 0, n = r.skips.length; e < n; e++) {if (r.skips[e].test(t)) return !1;}for (e = 0, n = r.names.length; e < n; e++) {if (r.names[e].test(t)) return !0;}return !1;}function c(t) {return t instanceof Error ? t.stack || t.message : t;}return r.debug = r, r.default = r, r.coerce = c, r.disable = a, r.enable = s, r.enabled = u, r.humanize = n(34), Object.keys(t).forEach(function (e) {r[e] = t[e];}), r.instances = [], r.names = [], r.skips = [], r.formatters = {}, r.selectColor = e, r.enable(r.load()), r;}t.exports = r;}, function (t, e) {function n(t) {if (t = String(t), !(t.length > 100)) {var e = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t);if (e) {var n = parseFloat(e[1]);switch ((e[2] || "ms").toLowerCase()) {case "years":case "year":case "yrs":case "yr":case "y":return n * h;case "weeks":case "week":case "w":return n * l;case "days":case "day":case "d":return n * c;case "hours":case "hour":case "hrs":case "hr":case "h":return n * u;case "minutes":case "minute":case "mins":case "min":case "m":return n * a;case "seconds":case "second":case "secs":case "sec":case "s":return n * s;case "milliseconds":case "millisecond":case "msecs":case "msec":case "ms":return n;default:return;}}}}function r(t) {var e = Math.abs(t);return e >= c ? Math.round(t / c) + "d" : e >= u ? Math.round(t / u) + "h" : e >= a ? Math.round(t / a) + "m" : e >= s ? Math.round(t / s) + "s" : t + "ms";}function i(t) {var e = Math.abs(t);return e >= c ? o(t, e, c, "day") : e >= u ? o(t, e, u, "hour") : e >= a ? o(t, e, a, "minute") : e >= s ? o(t, e, s, "second") : t + " ms";}function o(t, e, n, r) {var i = e >= 1.5 * n;return Math.round(t / n) + " " + r + (i ? "s" : "");}var s = 1e3,a = 60 * s,u = 60 * a,c = 24 * u,l = 7 * c,h = 365.25 * c;t.exports = function (t, e) {e = e || {};var o = typeof t;if ("string" === o && t.length > 0) return n(t);if ("number" === o && isFinite(t)) return e.long ? i(t) : r(t);throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(t));};}, function (t, e, n) {"use strict";var r = n(18),i = ["Weapp"].concat(n(36));t.exports = "LeanCloud-JS-SDK/" + r + " (" + i.join("; ") + ")";}, function (t, e, n) {"use strict";t.exports = [];}, function (t, e, n) {function r(t) {if (t) return i(t);}function i(t) {for (var e in r.prototype) {t[e] = r.prototype[e];}return t;}t.exports = r, r.prototype.on = r.prototype.addEventListener = function (t, e) {return this._callbacks = this._callbacks || {}, (this._callbacks["$" + t] = this._callbacks["$" + t] || []).push(e), this;}, r.prototype.once = function (t, e) {function n() {this.off(t, n), e.apply(this, arguments);}return n.fn = e, this.on(t, n), this;}, r.prototype.off = r.prototype.removeListener = r.prototype.removeAllListeners = r.prototype.removeEventListener = function (t, e) {if (this._callbacks = this._callbacks || {}, 0 == arguments.length) return this._callbacks = {}, this;var n = this._callbacks["$" + t];if (!n) return this;if (1 == arguments.length) return delete this._callbacks["$" + t], this;for (var r, i = 0; i < n.length; i++) {if ((r = n[i]) === e || r.fn === e) {n.splice(i, 1);break;}}return 0 === n.length && delete this._callbacks["$" + t], this;}, r.prototype.emit = function (t) {this._callbacks = this._callbacks || {};for (var e = new Array(arguments.length - 1), n = this._callbacks["$" + t], r = 1; r < arguments.length; r++) {e[r - 1] = arguments[r];}if (n) {n = n.slice(0);for (var r = 0, i = n.length; r < i; ++r) {n[r].apply(this, e);}}return this;}, r.prototype.listeners = function (t) {return this._callbacks = this._callbacks || {}, this._callbacks["$" + t] || [];}, r.prototype.hasListeners = function (t) {return !!this.listeners(t).length;};}, function (t, e, n) {"use strict";function r(t) {if (t) return i(t);}function i(t) {for (var e in r.prototype) {t[e] = r.prototype[e];}return t;}var o = n(19);t.exports = r, r.prototype.clearTimeout = function () {return clearTimeout(this._timer), clearTimeout(this._responseTimeoutTimer), delete this._timer, delete this._responseTimeoutTimer, this;}, r.prototype.parse = function (t) {return this._parser = t, this;}, r.prototype.responseType = function (t) {return this._responseType = t, this;}, r.prototype.serialize = function (t) {return this._serializer = t, this;}, r.prototype.timeout = function (t) {if (!t || "object" != typeof t) return this._timeout = t, this._responseTimeout = 0, this;for (var e in t) {switch (e) {case "deadline":this._timeout = t.deadline;break;case "response":this._responseTimeout = t.response;break;default:console.warn("Unknown timeout option", e);}}return this;}, r.prototype.retry = function (t, e) {return 0 !== arguments.length && !0 !== t || (t = 1), t <= 0 && (t = 0), this._maxRetries = t, this._retries = 0, this._retryCallback = e, this;};var s = ["ECONNRESET", "ETIMEDOUT", "EADDRINFO", "ESOCKETTIMEDOUT"];r.prototype._shouldRetry = function (t, e) {if (!this._maxRetries || this._retries++ >= this._maxRetries) return !1;if (this._retryCallback) try {var n = this._retryCallback(t, e);if (!0 === n) return !0;if (!1 === n) return !1;} catch (t) {console.error(t);}if (e && e.status && e.status >= 500 && 501 != e.status) return !0;if (t) {if (t.code && ~s.indexOf(t.code)) return !0;if (t.timeout && "ECONNABORTED" == t.code) return !0;if (t.crossDomain) return !0;}return !1;}, r.prototype._retry = function () {return this.clearTimeout(), this.req && (this.req = null, this.req = this.request()), this._aborted = !1, this.timedout = !1, this._end();}, r.prototype.then = function (t, e) {if (!this._fullfilledPromise) {var n = this;this._endCalled && console.warn("Warning: superagent request was sent twice, because both .end() and .then() were called. Never call .end() if you use promises"), this._fullfilledPromise = new Promise(function (t, e) {n.end(function (n, r) {n ? e(n) : t(r);});});}return this._fullfilledPromise.then(t, e);}, r.prototype.catch = function (t) {return this.then(void 0, t);}, r.prototype.use = function (t) {return t(this), this;}, r.prototype.ok = function (t) {if ("function" != typeof t) throw Error("Callback required");return this._okCallback = t, this;}, r.prototype._isResponseOK = function (t) {return !!t && (this._okCallback ? this._okCallback(t) : t.status >= 200 && t.status < 300);}, r.prototype.get = function (t) {return this._header[t.toLowerCase()];}, r.prototype.getHeader = r.prototype.get, r.prototype.set = function (t, e) {if (o(t)) {for (var n in t) {this.set(n, t[n]);}return this;}return this._header[t.toLowerCase()] = e, this.header[t] = e, this;}, r.prototype.unset = function (t) {return delete this._header[t.toLowerCase()], delete this.header[t], this;}, r.prototype.field = function (t, e) {if (null === t || void 0 === t) throw new Error(".field(name, val) name can not be empty");if (this._data && console.error(".field() can't be used if .send() is used. Please use only .send() or only .field() & .attach()"), o(t)) {for (var n in t) {this.field(n, t[n]);}return this;}if (Array.isArray(e)) {for (var r in e) {this.field(t, e[r]);}return this;}if (null === e || void 0 === e) throw new Error(".field(name, val) val can not be empty");return "boolean" == typeof e && (e = "" + e), this._getFormData().append(t, e), this;}, r.prototype.abort = function () {return this._aborted ? this : (this._aborted = !0, this.xhr && this.xhr.abort(), this.req && this.req.abort(), this.clearTimeout(), this.emit("abort"), this);}, r.prototype._auth = function (t, e, n, r) {switch (n.type) {case "basic":this.set("Authorization", "Basic " + r(t + ":" + e));break;case "auto":this.username = t, this.password = e;break;case "bearer":this.set("Authorization", "Bearer " + t);}return this;}, r.prototype.withCredentials = function (t) {return void 0 == t && (t = !0), this._withCredentials = t, this;}, r.prototype.redirects = function (t) {return this._maxRedirects = t, this;}, r.prototype.maxResponseSize = function (t) {if ("number" != typeof t) throw TypeError("Invalid argument");return this._maxResponseSize = t, this;}, r.prototype.toJSON = function () {return { method: this.method, url: this.url, data: this._data, headers: this._header };}, r.prototype.send = function (t) {var e = o(t),n = this._header["content-type"];if (this._formData && console.error(".send() can't be used if .attach() or .field() is used. Please use only .send() or only .field() & .attach()"), e && !this._data) Array.isArray(t) ? this._data = [] : this._isHost(t) || (this._data = {});else if (t && this._data && this._isHost(this._data)) throw Error("Can't merge these send calls");if (e && o(this._data)) for (var r in t) {this._data[r] = t[r];} else "string" == typeof t ? (n || this.type("form"), n = this._header["content-type"], this._data = "application/x-www-form-urlencoded" == n ? this._data ? this._data + "&" + t : t : (this._data || "") + t) : this._data = t;return !e || this._isHost(t) ? this : (n || this.type("json"), this);}, r.prototype.sortQuery = function (t) {return this._sort = void 0 === t || t, this;}, r.prototype._finalizeQueryString = function () {var t = this._query.join("&");if (t && (this.url += (this.url.indexOf("?") >= 0 ? "&" : "?") + t), this._query.length = 0, this._sort) {var e = this.url.indexOf("?");if (e >= 0) {var n = this.url.substring(e + 1).split("&");"function" == typeof this._sort ? n.sort(this._sort) : n.sort(), this.url = this.url.substring(0, e) + "?" + n.join("&");}}}, r.prototype._appendQueryString = function () {console.trace("Unsupported");}, r.prototype._timeoutError = function (t, e, n) {if (!this._aborted) {var r = new Error(t + e + "ms exceeded");r.timeout = e, r.code = "ECONNABORTED", r.errno = n, this.timedout = !0, this.abort(), this.callback(r);}}, r.prototype._setTimeouts = function () {var t = this;this._timeout && !this._timer && (this._timer = setTimeout(function () {t._timeoutError("Timeout of ", t._timeout, "ETIME");}, this._timeout)), this._responseTimeout && !this._responseTimeoutTimer && (this._responseTimeoutTimer = setTimeout(function () {t._timeoutError("Response timeout of ", t._responseTimeout, "ETIMEDOUT");}, this._responseTimeout));};}, function (t, e, n) {"use strict";function r(t) {if (t) return i(t);}function i(t) {for (var e in r.prototype) {t[e] = r.prototype[e];}return t;}var o = n(40);t.exports = r, r.prototype.get = function (t) {return this.header[t.toLowerCase()];}, r.prototype._setHeaderProperties = function (t) {var e = t["content-type"] || "";this.type = o.type(e);var n = o.params(e);for (var r in n) {this[r] = n[r];}this.links = {};try {t.link && (this.links = o.parseLinks(t.link));} catch (t) {}}, r.prototype._setStatusProperties = function (t) {var e = t / 100 | 0;this.status = this.statusCode = t, this.statusType = e, this.info = 1 == e, this.ok = 2 == e, this.redirect = 3 == e, this.clientError = 4 == e, this.serverError = 5 == e, this.error = (4 == e || 5 == e) && this.toError(), this.created = 201 == t, this.accepted = 202 == t, this.noContent = 204 == t, this.badRequest = 400 == t, this.unauthorized = 401 == t, this.notAcceptable = 406 == t, this.forbidden = 403 == t, this.notFound = 404 == t, this.unprocessableEntity = 422 == t;};}, function (t, e, n) {"use strict";e.type = function (t) {return t.split(/ *; */).shift();}, e.params = function (t) {return t.split(/ *; */).reduce(function (t, e) {var n = e.split(/ *= */),r = n.shift(),i = n.shift();return r && i && (t[r] = i), t;}, {});}, e.parseLinks = function (t) {return t.split(/ *, */).reduce(function (t, e) {var n = e.split(/ *; */),r = n[0].slice(1, -1);return t[n[1].split(/ *= */)[1].slice(1, -1)] = r, t;}, {});}, e.cleanHeader = function (t, e) {return delete t["content-type"], delete t["content-length"], delete t["transfer-encoding"], delete t.host, e && (delete t.authorization, delete t.cookie), t;};}, function (t, e) {function n() {this._defaults = [];}["use", "on", "once", "set", "query", "type", "accept", "auth", "withCredentials", "sortQuery", "retry", "ok", "redirects", "timeout", "buffer", "serialize", "parse", "ca", "key", "pfx", "cert"].forEach(function (t) {n.prototype[t] = function () {return this._defaults.push({ fn: t, arguments: arguments }), this;};}), n.prototype._setDefaults = function (t) {this._defaults.forEach(function (e) {t[e.fn].apply(t, e.arguments);});}, t.exports = n;}, function (t, e, n) {(function (e) {/*!
overview es6-promise - a tiny implementation of Promises/A+.
copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
license   Licensed under MIT license
ee https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
version   v4.2.3+b33f4734

      !function (e, n) {t.exports = n();}(0, function () {"use strict";function t(t) {var e = typeof t;return null !== t && ("object" === e || "function" === e);}function r(t) {return "function" == typeof t;}function i(t) {W = t;}function o(t) {B = t;}function s() {return void 0 !== M ? function () {M(u);} : a();}function a() {var t = setTimeout;return function () {return t(u, 1);};}function u() {for (var t = 0; t < F; t += 2) {(0, G[t])(G[t + 1]), G[t] = void 0, G[t + 1] = void 0;}F = 0;}function c(t, e) {var n = this,r = new this.constructor(h);void 0 === r[$] && N(r);var i = n._state;if (i) {var o = arguments[i - 1];B(function () {return C(i, r, o, n._result);});} else S(n, r, t, e);return r;}function l(t) {var e = this;if (t && "object" == typeof t && t.constructor === e) return t;var n = new e(h);return g(n, t), n;}function h() {}function f() {return new TypeError("You cannot resolve a promise with itself");}function d() {return new TypeError("A promises callback cannot return that same promise.");}function p(t) {try {return t.then;} catch (t) {return tt.error = t, tt;}}function _(t, e, n, r) {try {t.call(e, n, r);} catch (t) {return t;}}function v(t, e, n) {B(function (t) {var r = !1,i = _(n, e, function (n) {r || (r = !0, e !== n ? g(t, n) : w(t, n));}, function (e) {r || (r = !0, O(t, e));}, "Settle: " + (t._label || " unknown promise"));!r && i && (r = !0, O(t, i));}, t);}function y(t, e) {e._state === Y ? w(t, e._result) : e._state === Z ? O(t, e._result) : S(e, void 0, function (e) {return g(t, e);}, function (e) {return O(t, e);});}function m(t, e, n) {e.constructor === t.constructor && n === c && e.constructor.resolve === l ? y(t, e) : n === tt ? (O(t, tt.error), tt.error = null) : void 0 === n ? w(t, e) : r(n) ? v(t, e, n) : w(t, e);}function g(e, n) {e === n ? O(e, f()) : t(n) ? m(e, n, p(n)) : w(e, n);}function b(t) {t._onerror && t._onerror(t._result), A(t);}function w(t, e) {t._state === X && (t._result = e, t._state = Y, 0 !== t._subscribers.length && B(A, t));}function O(t, e) {t._state === X && (t._state = Z, t._result = e, B(b, t));}function S(t, e, n, r) {var i = t._subscribers,o = i.length;t._onerror = null, i[o] = e, i[o + Y] = n, i[o + Z] = r, 0 === o && t._state && B(A, t);}function A(t) {var e = t._subscribers,n = t._state;if (0 !== e.length) {for (var r = void 0, i = void 0, o = t._result, s = 0; s < e.length; s += 3) {r = e[s], i = e[s + n], r ? C(n, r, i, o) : i(o);}t._subscribers.length = 0;}}function E(t, e) {try {return t(e);} catch (t) {return tt.error = t, tt;}}function C(t, e, n, i) {var o = r(n),s = void 0,a = void 0,u = void 0,c = void 0;if (o) {if (s = E(n, i), s === tt ? (c = !0, a = s.error, s.error = null) : u = !0, e === s) return void O(e, d());} else s = i, u = !0;e._state !== X || (o && u ? g(e, s) : c ? O(e, a) : t === Y ? w(e, s) : t === Z && O(e, s));}function T(t, e) {try {e(function (e) {g(t, e);}, function (e) {O(t, e);});} catch (e) {O(t, e);}}function j() {return et++;}function N(t) {t[$] = et++, t._state = void 0, t._result = void 0, t._subscribers = [];}function x() {return new Error("Array Methods must be provided an Array");}function k(t) {return new nt(this, t).promise;}function U(t) {var e = this;return new e(L(t) ? function (n, r) {for (var i = t.length, o = 0; o < i; o++) {e.resolve(t[o]).then(n, r);}} : function (t, e) {return e(new TypeError("You must pass an array to race."));});}function I(t) {var e = this,n = new e(h);return O(n, t), n;}function P() {throw new TypeError("You must pass a resolver function as the first argument to the promise constructor");}function R() {throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");}function D() {var t = void 0;if (void 0 !== e) t = e;else if ("undefined" != typeof self) t = self;else try {t = Function("return this")();} catch (t) {throw new Error("polyfill failed because global object is unavailable in this environment");}var n = t.Promise;if (n) {var r = null;try {r = Object.prototype.toString.call(n.resolve());} catch (t) {}if ("[object Promise]" === r && !n.cast) return;}t.Promise = rt;}var q = void 0;q = Array.isArray ? Array.isArray : function (t) {return "[object Array]" === Object.prototype.toString.call(t);};var L = q,F = 0,M = void 0,W = void 0,B = function B(t, e) {G[F] = t, G[F + 1] = e, 2 === (F += 2) && (W ? W(u) : z());},Q = "undefined" != typeof window ? window : void 0,V = Q || {},J = V.MutationObserver || V.WebKitMutationObserver,K = "undefined" == typeof self && "undefined" != typeof process && "[object process]" === {}.toString.call(process),H = "undefined" != typeof Uint8ClampedArray && "undefined" != typeof importScripts && "undefined" != typeof MessageChannel,G = new Array(1e3),z = void 0;z = K ? function () {return function () {return process.nextTick(u);};}() : J ? function () {var t = 0,e = new J(u),n = document.createTextNode("");return e.observe(n, { characterData: !0 }), function () {n.data = t = ++t % 2;};}() : H ? function () {var t = new MessageChannel();return t.port1.onmessage = u, function () {return t.port2.postMessage(0);};}() : void 0 === Q ? function () {try {var t = n(43);return M = t.runOnLoop || t.runOnContext, s();} catch (t) {return a();}}() : a();var $ = Math.random().toString(36).substring(2),X = void 0,Y = 1,Z = 2,tt = { error: null },et = 0,nt = function () {function t(t, e) {this._instanceConstructor = t, this.promise = new t(h), this.promise[$] || N(this.promise), L(e) ? (this.length = e.length, this._remaining = e.length, this._result = new Array(this.length), 0 === this.length ? w(this.promise, this._result) : (this.length = this.length || 0, this._enumerate(e), 0 === this._remaining && w(this.promise, this._result))) : O(this.promise, x());}return t.prototype._enumerate = function (t) {for (var e = 0; this._state === X && e < t.length; e++) {this._eachEntry(t[e], e);}}, t.prototype._eachEntry = function (t, e) {var n = this._instanceConstructor,r = n.resolve;if (r === l) {var i = p(t);if (i === c && t._state !== X) this._settledAt(t._state, e, t._result);else if ("function" != typeof i) this._remaining--, this._result[e] = t;else if (n === rt) {var o = new n(h);m(o, t, i), this._willSettleAt(o, e);} else this._willSettleAt(new n(function (e) {return e(t);}), e);} else this._willSettleAt(r(t), e);}, t.prototype._settledAt = function (t, e, n) {var r = this.promise;r._state === X && (this._remaining--, t === Z ? O(r, n) : this._result[e] = n), 0 === this._remaining && w(r, this._result);}, t.prototype._willSettleAt = function (t, e) {var n = this;S(t, void 0, function (t) {return n._settledAt(Y, e, t);}, function (t) {return n._settledAt(Z, e, t);});}, t;}(),rt = function () {function t(e) {this[$] = j(), this._result = this._state = void 0, this._subscribers = [], h !== e && ("function" != typeof e && P(), this instanceof t ? T(this, e) : R());}return t.prototype.catch = function (t) {return this.then(null, t);}, t.prototype.finally = function (t) {var e = this,n = e.constructor;return e.then(function (e) {return n.resolve(t()).then(function () {return e;});}, function (e) {return n.resolve(t()).then(function () {throw e;});});}, t;}();return rt.prototype.then = c, rt.all = k, rt.race = U, rt.resolve = l, rt.reject = I, rt._setScheduler = i, rt._setAsap = o, rt._asap = B, rt.polyfill = D, rt.Promise = rt, rt;});}).call(e, n(7));}, function (t, e) {}, function (t, e, n) {"use strict";(function (e) {var r = {},i = ["getItem", "setItem", "removeItem", "clear"],o = e.localStorage;try {var s = "__storejs__";if (o.setItem(s, s), o.getItem(s) != s) throw new Error();o.removeItem(s);} catch (t) {o = n(45);}i.forEach(function (t) {r[t] = function () {return o[t].apply(o, arguments);};}), r.async = !1, t.exports = r;}).call(e, n(7));}, function (t, e, n) {!function (e) {var n = {},r = {};n.length = 0, n.getItem = function (t) {return t in r ? r[t] : null;}, n.setItem = function (t, e) {void 0 === e ? n.removeItem(t) : (r.hasOwnProperty(t) || n.length++, r[t] = "" + e);}, n.removeItem = function (t) {r.hasOwnProperty(t) && (delete r[t], n.length--);}, n.key = function (t) {return Object.keys(r)[t] || null;}, n.clear = function () {r = {}, n.length = 0;}, t.exports = n;}();}, function (t, e, n) {"use strict";function r(t) {if (f(t)) return {};var e = t.slice(0, 8).toLowerCase(),n = "lncldglobal.com";return { push: "https://" + e + ".push." + n, stats: "https://" + e + ".stats." + n, engine: "https://" + e + ".engine." + n, api: "https://" + e + ".api." + n, rtm: "https://" + e + ".rtm." + n };}var i = n(5),o = n(47),s = n(3),a = s.isNullOrUndefined,u = n(0),c = u.extend,l = u.isObject,h = u.isEmpty,f = function f(t) {return "-MdYXbMMI" !== t.slice(-9);},d = function d(t) {return { push: t, stats: t, engine: t, api: t, rtm: t };},p = !1;i.init = function (t) {if (!l(t)) return i.init({ appId: t, appKey: arguments.length <= 1 ? void 0 : arguments[1], masterKey: arguments.length <= 2 ? void 0 : arguments[2] });var e = t.appId,n = t.appKey,s = t.masterKey,a = (t.hookKey, t.serverURLs),u = t.disableCurrentUser,_ = t.production,v = t.realtime;if (i.applicationId) throw new Error("SDK is already initialized.");if (!e) throw new TypeError("appId must be a string");if (!n) throw new TypeError("appKey must be a string");if (s && console.warn("MasterKey is not supposed to be used in browser."), f(e) && !a && h(i._config.serverURLs)) throw new TypeError("serverURLs option is required for apps from CN region");i._config.applicationId = e, i._config.applicationKey = n, i._config.masterKey = s, i.setProduction(_), void 0 !== u && (i._config.disableCurrentUser = u), i._appRouter = new o(i);var y = p || void 0 !== a;if (i._setServerURLs(c({}, r(e), i._config.serverURLs, "string" == typeof a ? d(a) : a), y), v) i._config.realtime = v;else if (i._sharedConfig.liveQueryRealtime) {var m = i._config.serverURLs,g = m.api,b = m.rtm;i._config.realtime = new i._sharedConfig.liveQueryRealtime({ appId: e, appKey: n, server: { api: g, RTMRouter: b } });}}, i.setProduction = function (t) {a(t) ? i._config.production = null : i._config.production = t ? 1 : 0;}, i._setServerURLs = function (t) {var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];"string" != typeof t ? c(i._config.serverURLs, t) : i._config.serverURLs = d(t), e && (i._appRouter ? i._appRouter.disable() : p = !0);}, i.setServerURLs = function (t) {return i._setServerURLs(t);}, i.keepErrorRawMessage = function (t) {i._sharedConfig.keepErrorRawMessage = t;}, i.setRequestTimeout = function (t) {i._config.requestTimeout = t;}, i.initialize = i.init, ["applicationId", "applicationKey", "masterKey", "hookKey"].forEach(function (t) {return Object.defineProperty(i, t, { get: function get() {return i._config[t];}, set: function set(e) {i._config[t] = e;} });});}, function (t, e, n) {"use strict";function r(t) {var e = this;this.AV = t, this.lockedUntil = 0, s.getAsync("serverURLs").then(function (t) {if (!e.disabled) {if (!t) return e.lock(0);var n = t.serverURLs,r = t.lockedUntil;e.AV._setServerURLs(n, !1), e.lockedUntil = r;}}).catch(function () {return e.lock(0);});}var i = n(3),o = i.ajax,s = n(21);r.prototype.disable = function () {this.disabled = !0;}, r.prototype.lock = function (t) {this.lockedUntil = Date.now() + t;}, r.prototype.refresh = function () {var t = this;if (!(this.disabled || Date.now() < this.lockedUntil)) {this.lock(10);return o({ method: "get", url: "https://app-router.com/2/route", query: { appId: this.AV.applicationId } }).then(function (e) {if (!t.disabled) {var n = e.ttl;if (!n) throw new Error("missing ttl");n *= 1e3;var r = { push: "https://" + e.push_server, stats: "https://" + e.stats_server, engine: "https://" + e.engine_server, api: "https://" + e.api_server };return t.AV._setServerURLs(r, !1), t.lock(n), s.setAsync("serverURLs", { serverURLs: r, lockedUntil: t.lockedUntil }, n);}}).catch(function (e) {console.warn("refresh server URLs failed: " + e.message), t.lock(600);});}}, t.exports = r;}, function (t, e, n) {"use strict";var r = n(0);t.exports = function (t) {var e = /\s+/,n = Array.prototype.slice;t.Events = { on: function on(t, n, r) {var i, o, s, a, u;if (!n) return this;for (t = t.split(e), i = this._callbacks || (this._callbacks = {}), o = t.shift(); o;) {u = i[o], s = u ? u.tail : {}, s.next = a = {}, s.context = r, s.callback = n, i[o] = { tail: a, next: u ? u.next : s }, o = t.shift();}return this;}, off: function off(t, n, i) {var o, s, a, u, c, l;if (s = this._callbacks) {if (!(t || n || i)) return delete this._callbacks, this;for (t = t ? t.split(e) : r.keys(s), o = t.shift(); o;) {if (a = s[o], delete s[o], a && (n || i)) {for (u = a.tail, a = a.next; a !== u;) {c = a.callback, l = a.context, (n && c !== n || i && l !== i) && this.on(o, c, l), a = a.next;}o = t.shift();}}return this;}}, trigger: function trigger(t) {var r, i, o, s, a, u, c;if (!(o = this._callbacks)) return this;for (u = o.all, t = t.split(e), c = n.call(arguments, 1), r = t.shift(); r;) {if (i = o[r]) for (s = i.tail; (i = i.next) !== s;) {i.callback.apply(i.context || this, c);}if (i = u) for (s = i.tail, a = [r].concat(c); (i = i.next) !== s;) {i.callback.apply(i.context || this, a);}r = t.shift();}return this;} }, t.Events.bind = t.Events.on, t.Events.unbind = t.Events.off;};}, function (t, e, n) {"use strict";var r = n(0),i = n(1);t.exports = function (t) {t.GeoPoint = function (e, n) {r.isArray(e) ? (t.GeoPoint._validate(e[0], e[1]), this.latitude = e[0], this.longitude = e[1]) : r.isObject(e) ? (t.GeoPoint._validate(e.latitude, e.longitude), this.latitude = e.latitude, this.longitude = e.longitude) : r.isNumber(e) && r.isNumber(n) ? (t.GeoPoint._validate(e, n), this.latitude = e, this.longitude = n) : (this.latitude = 0, this.longitude = 0);var i = this;this.__defineGetter__ && this.__defineSetter__ && (this._latitude = this.latitude, this._longitude = this.longitude, this.__defineGetter__("latitude", function () {return i._latitude;}), this.__defineGetter__("longitude", function () {return i._longitude;}), this.__defineSetter__("latitude", function (e) {t.GeoPoint._validate(e, i.longitude), i._latitude = e;}), this.__defineSetter__("longitude", function (e) {t.GeoPoint._validate(i.latitude, e), i._longitude = e;}));}, t.GeoPoint._validate = function (t, e) {if (t < -90) throw new Error("AV.GeoPoint latitude " + t + " < -90.0.");if (t > 90) throw new Error("AV.GeoPoint latitude " + t + " > 90.0.");if (e < -180) throw new Error("AV.GeoPoint longitude " + e + " < -180.0.");if (e > 180) throw new Error("AV.GeoPoint longitude " + e + " > 180.0.");}, t.GeoPoint.current = function () {return new i(function (e, n) {navigator.geolocation.getCurrentPosition(function (n) {e(new t.GeoPoint({ latitude: n.coords.latitude, longitude: n.coords.longitude }));}, n);});}, r.extend(t.GeoPoint.prototype, { toJSON: function toJSON() {return t.GeoPoint._validate(this.latitude, this.longitude), { __type: "GeoPoint", latitude: this.latitude, longitude: this.longitude };}, radiansTo: function radiansTo(t) {var e = Math.PI / 180,n = this.latitude * e,r = this.longitude * e,i = t.latitude * e,o = t.longitude * e,s = n - i,a = r - o,u = Math.sin(s / 2),c = Math.sin(a / 2),l = u * u + Math.cos(n) * Math.cos(i) * c * c;return l = Math.min(1, l), 2 * Math.asin(Math.sqrt(l));}, kilometersTo: function kilometersTo(t) {return 6371 * this.radiansTo(t);}, milesTo: function milesTo(t) {return 3958.8 * this.radiansTo(t);} });};}, function (t, e, n) {"use strict";var r = n(0);t.exports = function (t) {t.ACL = function (e) {var n = this;if (n.permissionsById = {}, r.isObject(e)) if (e instanceof t.User) n.setReadAccess(e, !0), n.setWriteAccess(e, !0);else {if (r.isFunction(e)) throw new Error("AV.ACL() called with a function.  Did you forget ()?");t._objectEach(e, function (e, i) {if (!r.isString(i)) throw new Error("Tried to create an ACL with an invalid userId.");n.permissionsById[i] = {}, t._objectEach(e, function (t, e) {if ("read" !== e && "write" !== e) throw new Error("Tried to create an ACL with an invalid permission type.");if (!r.isBoolean(t)) throw new Error("Tried to create an ACL with an invalid permission value.");n.permissionsById[i][e] = t;});});}}, t.ACL.prototype.toJSON = function () {return r.clone(this.permissionsById);}, t.ACL.prototype._setAccess = function (e, n, i) {if (n instanceof t.User ? n = n.id : n instanceof t.Role && (n = "role:" + n.getName()), !r.isString(n)) throw new Error("userId must be a string.");if (!r.isBoolean(i)) throw new Error("allowed must be either true or false.");var o = this.permissionsById[n];if (!o) {if (!i) return;o = {}, this.permissionsById[n] = o;}i ? this.permissionsById[n][e] = !0 : (delete o[e], r.isEmpty(o) && delete this.permissionsById[n]);}, t.ACL.prototype._getAccess = function (e, n) {n instanceof t.User ? n = n.id : n instanceof t.Role && (n = "role:" + n.getName());var r = this.permissionsById[n];return !!r && !!r[e];}, t.ACL.prototype.setReadAccess = function (t, e) {this._setAccess("read", t, e);}, t.ACL.prototype.getReadAccess = function (t) {return this._getAccess("read", t);}, t.ACL.prototype.setWriteAccess = function (t, e) {this._setAccess("write", t, e);}, t.ACL.prototype.getWriteAccess = function (t) {return this._getAccess("write", t);}, t.ACL.prototype.setPublicReadAccess = function (t) {this.setReadAccess("*", t);}, t.ACL.prototype.getPublicReadAccess = function () {return this.getReadAccess("*");}, t.ACL.prototype.setPublicWriteAccess = function (t) {this.setWriteAccess("*", t);}, t.ACL.prototype.getPublicWriteAccess = function () {return this.getWriteAccess("*");}, t.ACL.prototype.getRoleReadAccess = function (e) {if (e instanceof t.Role && (e = e.getName()), r.isString(e)) return this.getReadAccess("role:" + e);throw new Error("role must be a AV.Role or a String");}, t.ACL.prototype.getRoleWriteAccess = function (e) {if (e instanceof t.Role && (e = e.getName()), r.isString(e)) return this.getWriteAccess("role:" + e);throw new Error("role must be a AV.Role or a String");}, t.ACL.prototype.setRoleReadAccess = function (e, n) {if (e instanceof t.Role && (e = e.getName()), r.isString(e)) return void this.setReadAccess("role:" + e, n);throw new Error("role must be a AV.Role or a String");}, t.ACL.prototype.setRoleWriteAccess = function (e, n) {if (e instanceof t.Role && (e = e.getName()), r.isString(e)) return void this.setWriteAccess("role:" + e, n);throw new Error("role must be a AV.Role or a String");};};}, function (t, e, n) {"use strict";var r = n(0);t.exports = function (t) {t.Op = function () {this._initialize.apply(this, arguments);}, r.extend(t.Op.prototype, { _initialize: function _initialize() {} }), r.extend(t.Op, { _extend: t._extend, _opDecoderMap: {}, _registerDecoder: function _registerDecoder(e, n) {t.Op._opDecoderMap[e] = n;}, _decode: function _decode(e) {var n = t.Op._opDecoderMap[e.__op];return n ? n(e) : void 0;} }), t.Op._registerDecoder("Batch", function (e) {var n = null;return t._arrayEach(e.ops, function (e) {e = t.Op._decode(e), n = e._mergeWithPrevious(n);}), n;}), t.Op.Set = t.Op._extend({ _initialize: function _initialize(t) {this._value = t;}, value: function value() {return this._value;}, toJSON: function toJSON() {return t._encode(this.value());}, _mergeWithPrevious: function _mergeWithPrevious(t) {return this;}, _estimate: function _estimate(t) {return this.value();} }), t.Op._UNSET = {}, t.Op.Unset = t.Op._extend({ toJSON: function toJSON() {return { __op: "Delete" };}, _mergeWithPrevious: function _mergeWithPrevious(t) {return this;}, _estimate: function _estimate(e) {return t.Op._UNSET;} }), t.Op._registerDecoder("Delete", function (e) {return new t.Op.Unset();}), t.Op.Increment = t.Op._extend({ _initialize: function _initialize(t) {this._amount = t;}, amount: function amount() {return this._amount;}, toJSON: function toJSON() {return { __op: "Increment", amount: this._amount };}, _mergeWithPrevious: function _mergeWithPrevious(e) {if (e) {if (e instanceof t.Op.Unset) return new t.Op.Set(this.amount());if (e instanceof t.Op.Set) return new t.Op.Set(e.value() + this.amount());if (e instanceof t.Op.Increment) return new t.Op.Increment(this.amount() + e.amount());throw new Error("Op is invalid after previous op.");}return this;}, _estimate: function _estimate(t) {return t ? t + this.amount() : this.amount();} }), t.Op._registerDecoder("Increment", function (e) {return new t.Op.Increment(e.amount);}), t.Op.BitAnd = t.Op._extend({ _initialize: function _initialize(t) {this._value = t;}, value: function value() {return this._value;}, toJSON: function toJSON() {return { __op: "BitAnd", value: this.value() };}, _mergeWithPrevious: function _mergeWithPrevious(e) {if (e) {if (e instanceof t.Op.Unset) return new t.Op.Set(0);if (e instanceof t.Op.Set) return new t.Op.Set(e.value() & this.value());throw new Error("Op is invalid after previous op.");}return this;}, _estimate: function _estimate(t) {return t & this.value();} }), t.Op._registerDecoder("BitAnd", function (e) {return new t.Op.BitAnd(e.value);}), t.Op.BitOr = t.Op._extend({ _initialize: function _initialize(t) {this._value = t;}, value: function value() {return this._value;}, toJSON: function toJSON() {return { __op: "BitOr", value: this.value() };}, _mergeWithPrevious: function _mergeWithPrevious(e) {if (e) {if (e instanceof t.Op.Unset) return new t.Op.Set(this.value());if (e instanceof t.Op.Set) return new t.Op.Set(e.value() | this.value());throw new Error("Op is invalid after previous op.");}return this;}, _estimate: function _estimate(t) {return t | this.value();} }), t.Op._registerDecoder("BitOr", function (e) {return new t.Op.BitOr(e.value);}), t.Op.BitXor = t.Op._extend({ _initialize: function _initialize(t) {this._value = t;}, value: function value() {return this._value;}, toJSON: function toJSON() {return { __op: "BitXor", value: this.value() };}, _mergeWithPrevious: function _mergeWithPrevious(e) {if (e) {if (e instanceof t.Op.Unset) return new t.Op.Set(this.value());if (e instanceof t.Op.Set) return new t.Op.Set(e.value() ^ this.value());throw new Error("Op is invalid after previous op.");}return this;}, _estimate: function _estimate(t) {return t ^ this.value();} }), t.Op._registerDecoder("BitXor", function (e) {return new t.Op.BitXor(e.value);}), t.Op.Add = t.Op._extend({ _initialize: function _initialize(t) {this._objects = t;}, objects: function objects() {return this._objects;}, toJSON: function toJSON() {return { __op: "Add", objects: t._encode(this.objects()) };}, _mergeWithPrevious: function _mergeWithPrevious(e) {if (e) {if (e instanceof t.Op.Unset) return new t.Op.Set(this.objects());if (e instanceof t.Op.Set) return new t.Op.Set(this._estimate(e.value()));if (e instanceof t.Op.Add) return new t.Op.Add(e.objects().concat(this.objects()));throw new Error("Op is invalid after previous op.");}return this;}, _estimate: function _estimate(t) {return t ? t.concat(this.objects()) : r.clone(this.objects());} }), t.Op._registerDecoder("Add", function (e) {return new t.Op.Add(t._decode(e.objects));}), t.Op.AddUnique = t.Op._extend({ _initialize: function _initialize(t) {this._objects = r.uniq(t);}, objects: function objects() {return this._objects;}, toJSON: function toJSON() {return { __op: "AddUnique", objects: t._encode(this.objects()) };}, _mergeWithPrevious: function _mergeWithPrevious(e) {if (e) {if (e instanceof t.Op.Unset) return new t.Op.Set(this.objects());if (e instanceof t.Op.Set) return new t.Op.Set(this._estimate(e.value()));if (e instanceof t.Op.AddUnique) return new t.Op.AddUnique(this._estimate(e.objects()));throw new Error("Op is invalid after previous op.");}return this;}, _estimate: function _estimate(e) {if (e) {var n = r.clone(e);return t._arrayEach(this.objects(), function (e) {if (e instanceof t.Object && e.id) {var i = r.find(n, function (n) {return n instanceof t.Object && n.id === e.id;});if (i) {var o = r.indexOf(n, i);n[o] = e;} else n.push(e);} else r.contains(n, e) || n.push(e);}), n;}return r.clone(this.objects());} }), t.Op._registerDecoder("AddUnique", function (e) {return new t.Op.AddUnique(t._decode(e.objects));}), t.Op.Remove = t.Op._extend({ _initialize: function _initialize(t) {this._objects = r.uniq(t);}, objects: function objects() {return this._objects;}, toJSON: function toJSON() {return { __op: "Remove", objects: t._encode(this.objects()) };}, _mergeWithPrevious: function _mergeWithPrevious(e) {if (e) {if (e instanceof t.Op.Unset) return e;if (e instanceof t.Op.Set) return new t.Op.Set(this._estimate(e.value()));if (e instanceof t.Op.Remove) return new t.Op.Remove(r.union(e.objects(), this.objects()));throw new Error("Op is invalid after previous op.");}return this;}, _estimate: function _estimate(e) {if (e) {var n = r.difference(e, this.objects());return t._arrayEach(this.objects(), function (e) {e instanceof t.Object && e.id && (n = r.reject(n, function (n) {return n instanceof t.Object && n.id === e.id;}));}), n;}return [];} }), t.Op._registerDecoder("Remove", function (e) {return new t.Op.Remove(t._decode(e.objects));}), t.Op.Relation = t.Op._extend({ _initialize: function _initialize(e, n) {this._targetClassName = null;var i = this,o = function o(e) {if (e instanceof t.Object) {if (!e.id) throw new Error("You can't add an unsaved AV.Object to a relation.");if (i._targetClassName || (i._targetClassName = e.className), i._targetClassName !== e.className) throw new Error("Tried to create a AV.Relation with 2 different types: " + i._targetClassName + " and " + e.className + ".");return e.id;}return e;};this.relationsToAdd = r.uniq(r.map(e, o)), this.relationsToRemove = r.uniq(r.map(n, o));}, added: function added() {var e = this;return r.map(this.relationsToAdd, function (n) {var r = t.Object._create(e._targetClassName);return r.id = n, r;});}, removed: function removed() {var e = this;return r.map(this.relationsToRemove, function (n) {var r = t.Object._create(e._targetClassName);return r.id = n, r;});}, toJSON: function toJSON() {var t = null,e = null,n = this,i = function i(t) {return { __type: "Pointer", className: n._targetClassName, objectId: t };},o = null;return this.relationsToAdd.length > 0 && (o = r.map(this.relationsToAdd, i), t = { __op: "AddRelation", objects: o }), this.relationsToRemove.length > 0 && (o = r.map(this.relationsToRemove, i), e = { __op: "RemoveRelation", objects: o }), t && e ? { __op: "Batch", ops: [t, e] } : t || e || {};}, _mergeWithPrevious: function _mergeWithPrevious(e) {if (e) {if (e instanceof t.Op.Unset) throw new Error("You can't modify a relation after deleting it.");if (e instanceof t.Op.Relation) {if (e._targetClassName && e._targetClassName !== this._targetClassName) throw new Error("Related object must be of class " + e._targetClassName + ", but " + this._targetClassName + " was passed in.");var n = r.union(r.difference(e.relationsToAdd, this.relationsToRemove), this.relationsToAdd),i = r.union(r.difference(e.relationsToRemove, this.relationsToAdd), this.relationsToRemove),o = new t.Op.Relation(n, i);return o._targetClassName = this._targetClassName, o;}throw new Error("Op is invalid after previous op.");}return this;}, _estimate: function _estimate(e, n, r) {if (e) {if (e instanceof t.Relation) {if (this._targetClassName) if (e.targetClassName) {if (e.targetClassName !== this._targetClassName) throw new Error("Related object must be a " + e.targetClassName + ", but a " + this._targetClassName + " was passed in.");} else e.targetClassName = this._targetClassName;return e;}throw new Error("Op is invalid after previous op.");}new t.Relation(n, r).targetClassName = this._targetClassName;} }), t.Op._registerDecoder("AddRelation", function (e) {return new t.Op.Relation(t._decode(e.objects), []);}), t.Op._registerDecoder("RemoveRelation", function (e) {return new t.Op.Relation([], t._decode(e.objects));});};}, function (t, e, n) {"use strict";var r = n(0);t.exports = function (t) {t.Relation = function (t, e) {if (!r.isString(e)) throw new TypeError("key must be a string");this.parent = t, this.key = e, this.targetClassName = null;}, t.Relation.reverseQuery = function (e, n, r) {var i = new t.Query(e);return i.equalTo(n, r._toPointer()), i;}, r.extend(t.Relation.prototype, { _ensureParentAndKey: function _ensureParentAndKey(t, e) {if (this.parent = this.parent || t, this.key = this.key || e, this.parent !== t) throw new Error("Internal Error. Relation retrieved from two different Objects.");if (this.key !== e) throw new Error("Internal Error. Relation retrieved from two different keys.");}, add: function add(e) {r.isArray(e) || (e = [e]);var n = new t.Op.Relation(e, []);this.parent.set(this.key, n), this.targetClassName = n._targetClassName;}, remove: function remove(e) {r.isArray(e) || (e = [e]);var n = new t.Op.Relation([], e);this.parent.set(this.key, n), this.targetClassName = n._targetClassName;}, toJSON: function toJSON() {return { __type: "Relation", className: this.targetClassName };}, query: function query() {var e, n;return this.targetClassName ? (e = t.Object._getSubclass(this.targetClassName), n = new t.Query(e)) : (e = t.Object._getSubclass(this.parent.className), n = new t.Query(e), n._extraOptions.redirectClassNameForKey = this.key), n._addCondition("$relatedTo", "object", this.parent._toPointer()), n._addCondition("$relatedTo", "key", this.key), n;} });};}, function (t, e, n) {"use strict";var r = n(0),i = n(54),o = n(55),s = n(56),a = n(4),u = n(2)._request,c = n(1),l = n(3),h = l.tap,f = l.transformFetchOptions,d = n(6)("leancloud:file"),p = n(60);t.exports = function (t) {var e = function e() {return Math.floor(65536 * (1 + Math.random())).toString(16).substring(1);},n = function n(t) {return r.isString(t) ? t.match(/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/)[4] : "";},l = function l(t) {if (t < 26) return String.fromCharCode(65 + t);if (t < 52) return String.fromCharCode(t - 26 + 97);if (t < 62) return String.fromCharCode(t - 52 + 48);if (62 === t) return "+";if (63 === t) return "/";throw new Error("Tried to encode large digit " + t + " in base64.");},_ = function _(t) {var e = [];return e.length = Math.ceil(t.length / 3), r.times(e.length, function (n) {var r = t[3 * n],i = t[3 * n + 1] || 0,o = t[3 * n + 2] || 0,s = 3 * n + 1 < t.length,a = 3 * n + 2 < t.length;e[n] = [l(r >> 2 & 63), l(r << 4 & 48 | i >> 4 & 15), s ? l(i << 2 & 60 | o >> 6 & 3) : "=", a ? l(63 & o) : "="].join("");}), e.join("");};t.File = function (e, i, o) {if (this.attributes = { name: e, url: "", metaData: {}, base64: "" }, r.isString(i)) throw new TypeError("Creating an AV.File from a String is not yet supported.");r.isArray(i) && (this.attributes.metaData.size = i.length, i = { base64: _(i) }), this._extName = "", this._data = i, this._uploadHeaders = {}, i && i.blob && (this._extName = n(i.blob.uri)), "undefined" != typeof Blob && i instanceof Blob && (i.size && (this.attributes.metaData.size = i.size), i.name && (this._extName = n(i.name)));var s = void 0;if (i && i.owner) s = i.owner;else if (!t._config.disableCurrentUser) try {s = t.User.current();} catch (t) {if ("SYNC_API_NOT_AVAILABLE" !== t.code) throw t;}this.attributes.metaData.owner = s ? s.id : "unknown", this.set("mime_type", o);}, t.File.withURL = function (e, n, r, i) {if (!e || !n) throw new Error("Please provide file name and url");var o = new t.File(e, null, i);if (r) for (var s in r) {o.attributes.metaData[s] || (o.attributes.metaData[s] = r[s]);}return o.attributes.url = n, o.attributes.metaData.__source = "external", o;}, t.File.createWithoutData = function (e) {var n = new t.File();return n.id = e, n;}, r.extend(t.File.prototype, { className: "_File", _toFullJSON: function _toFullJSON(e) {var n = this,i = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],o = r.clone(this.attributes);return t._objectEach(o, function (n, r) {o[r] = t._encode(n, e, void 0, i);}), t._objectEach(this._operations, function (t, e) {o[e] = t;}), r.has(this, "id") && (o.objectId = this.id), r(["createdAt", "updatedAt"]).each(function (t) {if (r.has(n, t)) {var e = n[t];o[t] = r.isDate(e) ? e.toJSON() : e;}}), i && (o.__type = "File"), o;}, toFullJSON: function toFullJSON() {var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];return this._toFullJSON(t);}, toJSON: function toJSON(t, e) {var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : [this];return this._toFullJSON(n, !1);}, _toPointer: function _toPointer() {return { __type: "Pointer", className: this.className, objectId: this.id };}, getACL: function getACL() {return this._acl;}, setACL: function setACL(e) {return e instanceof t.ACL ? (this._acl = e, this) : new a(a.OTHER_CAUSE, "ACL must be a AV.ACL.");}, name: function name() {return this.get("name");}, url: function url() {return this.get("url");}, get: function get(t) {switch (t) {case "objectId":return this.id;case "url":case "name":case "mime_type":case "metaData":case "createdAt":case "updatedAt":return this.attributes[t];default:return this.attributes.metaData[t];}}, set: function set() {for (var t = this, e = function e(_e3, n) {switch (_e3) {case "name":case "url":case "mime_type":case "base64":case "metaData":t.attributes[_e3] = n;break;default:t.attributes.metaData[_e3] = n;}}, n = arguments.length, r = Array(n), i = 0; i < n; i++) {r[i] = arguments[i];}switch (r.length) {case 1:for (var o in r[0]) {e(o, r[0][o]);}break;case 2:e(r[0], r[1]);}return this;}, setUploadHeader: function setUploadHeader(t, e) {return this._uploadHeaders[t] = e, this;}, metaData: function metaData(t, e) {return t && e ? (this.attributes.metaData[t] = e, this) : t && !e ? this.attributes.metaData[t] : this.attributes.metaData;}, thumbnailURL: function thumbnailURL(t, e) {var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 100,r = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3],i = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : "png",o = this.attributes.url;if (!o) throw new Error("Invalid url.");if (!t || !e || t <= 0 || e <= 0) throw new Error("Invalid width or height value.");if (n <= 0 || n > 100) throw new Error("Invalid quality value.");return o + "?imageView/" + (r ? 2 : 1) + "/w/" + t + "/h/" + e + "/q/" + n + "/format/" + i;}, size: function size() {return this.metaData().size;}, ownerId: function ownerId() {return this.metaData().owner;}, destroy: function destroy(t) {return this.id ? u("files", null, this.id, "DELETE", null, t) : c.reject(new Error("The file id does not eixst."));}, _fileToken: function _fileToken(t, r) {var i = this.attributes.name,o = n(i);!o && this._extName && (i += this._extName, o = this._extName);var s = e() + e() + e() + e() + e() + o,a = { key: s, name: i, keep_file_name: r.keepFileName, ACL: this._acl, mime_type: t, metaData: this.attributes.metaData };return this._qiniu_key = s, u("fileTokens", null, null, "POST", a, r);}, save: function save() {var t = this,e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};if (this.id) throw new Error("File is already saved.");if (!this._previousSave) if (this._data) {var n = this.get("mime_type");this._previousSave = this._fileToken(n, e).then(function (a) {return a.mime_type && (n = a.mime_type, t.set("mime_type", n)), t._token = a.token, c.resolve().then(function () {var e = t._data;if (e && e.base64) return p(e.base64, n);if (e && e.blob) return !e.blob.type && n && (e.blob.type = n), e.blob.name || (e.blob.name = t.get("name")), e.blob;if ("undefined" != typeof Blob && e instanceof Blob) return e;throw new TypeError("malformed file data");}).then(function (n) {var u = r.extend({}, e);switch (e.onprogress && (u.onprogress = function (t) {if ("download" !== t.direction) return e.onprogress(t);}), a.provider) {case "s3":return s(a, n, t, u);case "qcloud":return i(a, n, t, u);case "qiniu":default:return o(a, n, t, u);}}).then(h(function () {return t._callback(!0);}), function (e) {throw t._callback(!1), e;});});} else if (this.attributes.url && "external" === this.attributes.metaData.__source) {var a = { name: this.attributes.name, ACL: this._acl, metaData: this.attributes.metaData, mime_type: this.mimeType, url: this.attributes.url };this._previousSave = u("files", this.attributes.name, null, "post", a, e).then(function (e) {return t.attributes.name = e.name, t.attributes.url = e.url, t.id = e.objectId, e.size && (t.attributes.metaData.size = e.size), t;});}return this._previousSave;}, _callback: function _callback(t) {u("fileCallback", null, null, "post", { token: this._token, result: t }).catch(d), delete this._token, delete this._data;}, fetch: function fetch(t, e) {return u("files", null, this.id, "GET", f(t), e).then(this._finishFetch.bind(this));}, _finishFetch: function _finishFetch(e) {var n = t.Object.prototype.parse(e);return n.attributes = { name: n.name, url: n.url, mime_type: n.mime_type, bucket: n.bucket }, n.attributes.metaData = n.metaData || {}, n.id = n.objectId, delete n.objectId, delete n.metaData, delete n.url, delete n.name, delete n.mime_type, delete n.bucket, r.extend(this, n), this;} });};}, function (t, e, n) {"use strict";var r = n(8),i = n(6)("cos"),o = n(1);t.exports = function (t, e, n) {var s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {};n.attributes.url = t.url, n._bucket = t.bucket, n.id = t.objectId;var a = t.upload_url + "?sign=" + encodeURIComponent(t.token);return new o(function (t, o) {var u = r("POST", a).set(n._uploadHeaders).attach("fileContent", e, n.attributes.name).field("op", "upload");s.onprogress && u.on("progress", s.onprogress), u.end(function (e, r) {if (r && i(r.status, r.body, r.text), e) return r && (e.statusCode = r.status, e.responseText = r.text, e.response = r.body), o(e);t(n);});});};}, function (t, e, n) {"use strict";var r = n(8),i = n(1),o = n(6)("qiniu");t.exports = function (t, e, n) {var s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {};n.attributes.url = t.url, n._bucket = t.bucket, n.id = t.objectId;var a = t.token,u = t.upload_url || "https://upload.qiniup.com";return new i(function (i, c) {var l = r("POST", u).set(n._uploadHeaders).attach("file", e, n.attributes.name).field("name", n.attributes.name).field("key", t.key || n._qiniu_key).field("token", a);s.onprogress && l.on("progress", s.onprogress), l.end(function (t, e) {if (e && o(e.status, e.body, e.text), t) return e && (t.statusCode = e.status, t.responseText = e.text, t.response = e.body), c(t);i(n);});});};}, function (t, e, n) {"use strict";var r = n(8),i = n(1),o = function o(t, e) {return e && (t.statusCode = e.status, t.responseText = e.text, t.response = e.body), t;};t.exports = function (t, e, n) {var s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {};return n.attributes.url = t.url, n._bucket = t.bucket, n.id = t.objectId, new i(function (i, a) {var u = r("PUT", t.upload_url).set(Object.assign({ "Content-Type": n.get("mime_type"), "Cache-Control": "public, max-age=31536000" }, n._uploadHeaders));s.onprogress && u.on("progress", s.onprogress), u.on("response", function (t) {if (t.ok) return i(n);a(o(t.error, t));}), u.on("error", function (t, e) {return a(o(t, e));}), u.send(e).end();});};}, function (t, e, n) {!function () {var e = n(58),r = n(22).utf8,i = n(59),o = n(22).bin,s = function s(t, n) {t.constructor == String ? t = n && "binary" === n.encoding ? o.stringToBytes(t) : r.stringToBytes(t) : i(t) ? t = Array.prototype.slice.call(t, 0) : Array.isArray(t) || (t = t.toString());for (var a = e.bytesToWords(t), u = 8 * t.length, c = 1732584193, l = -271733879, h = -1732584194, f = 271733878, d = 0; d < a.length; d++) {a[d] = 16711935 & (a[d] << 8 | a[d] >>> 24) | 4278255360 & (a[d] << 24 | a[d] >>> 8);}a[u >>> 5] |= 128 << u % 32, a[14 + (u + 64 >>> 9 << 4)] = u;for (var p = s._ff, _ = s._gg, v = s._hh, y = s._ii, d = 0; d < a.length; d += 16) {var m = c,g = l,b = h,w = f;c = p(c, l, h, f, a[d + 0], 7, -680876936), f = p(f, c, l, h, a[d + 1], 12, -389564586), h = p(h, f, c, l, a[d + 2], 17, 606105819), l = p(l, h, f, c, a[d + 3], 22, -1044525330), c = p(c, l, h, f, a[d + 4], 7, -176418897), f = p(f, c, l, h, a[d + 5], 12, 1200080426), h = p(h, f, c, l, a[d + 6], 17, -1473231341), l = p(l, h, f, c, a[d + 7], 22, -45705983), c = p(c, l, h, f, a[d + 8], 7, 1770035416), f = p(f, c, l, h, a[d + 9], 12, -1958414417), h = p(h, f, c, l, a[d + 10], 17, -42063), l = p(l, h, f, c, a[d + 11], 22, -1990404162), c = p(c, l, h, f, a[d + 12], 7, 1804603682), f = p(f, c, l, h, a[d + 13], 12, -40341101), h = p(h, f, c, l, a[d + 14], 17, -1502002290), l = p(l, h, f, c, a[d + 15], 22, 1236535329), c = _(c, l, h, f, a[d + 1], 5, -165796510), f = _(f, c, l, h, a[d + 6], 9, -1069501632), h = _(h, f, c, l, a[d + 11], 14, 643717713), l = _(l, h, f, c, a[d + 0], 20, -373897302), c = _(c, l, h, f, a[d + 5], 5, -701558691), f = _(f, c, l, h, a[d + 10], 9, 38016083), h = _(h, f, c, l, a[d + 15], 14, -660478335), l = _(l, h, f, c, a[d + 4], 20, -405537848), c = _(c, l, h, f, a[d + 9], 5, 568446438), f = _(f, c, l, h, a[d + 14], 9, -1019803690), h = _(h, f, c, l, a[d + 3], 14, -187363961), l = _(l, h, f, c, a[d + 8], 20, 1163531501), c = _(c, l, h, f, a[d + 13], 5, -1444681467), f = _(f, c, l, h, a[d + 2], 9, -51403784), h = _(h, f, c, l, a[d + 7], 14, 1735328473), l = _(l, h, f, c, a[d + 12], 20, -1926607734), c = v(c, l, h, f, a[d + 5], 4, -378558), f = v(f, c, l, h, a[d + 8], 11, -2022574463), h = v(h, f, c, l, a[d + 11], 16, 1839030562), l = v(l, h, f, c, a[d + 14], 23, -35309556), c = v(c, l, h, f, a[d + 1], 4, -1530992060), f = v(f, c, l, h, a[d + 4], 11, 1272893353), h = v(h, f, c, l, a[d + 7], 16, -155497632), l = v(l, h, f, c, a[d + 10], 23, -1094730640), c = v(c, l, h, f, a[d + 13], 4, 681279174), f = v(f, c, l, h, a[d + 0], 11, -358537222), h = v(h, f, c, l, a[d + 3], 16, -722521979), l = v(l, h, f, c, a[d + 6], 23, 76029189), c = v(c, l, h, f, a[d + 9], 4, -640364487), f = v(f, c, l, h, a[d + 12], 11, -421815835), h = v(h, f, c, l, a[d + 15], 16, 530742520), l = v(l, h, f, c, a[d + 2], 23, -995338651), c = y(c, l, h, f, a[d + 0], 6, -198630844), f = y(f, c, l, h, a[d + 7], 10, 1126891415), h = y(h, f, c, l, a[d + 14], 15, -1416354905), l = y(l, h, f, c, a[d + 5], 21, -57434055), c = y(c, l, h, f, a[d + 12], 6, 1700485571), f = y(f, c, l, h, a[d + 3], 10, -1894986606), h = y(h, f, c, l, a[d + 10], 15, -1051523), l = y(l, h, f, c, a[d + 1], 21, -2054922799), c = y(c, l, h, f, a[d + 8], 6, 1873313359), f = y(f, c, l, h, a[d + 15], 10, -30611744), h = y(h, f, c, l, a[d + 6], 15, -1560198380), l = y(l, h, f, c, a[d + 13], 21, 1309151649), c = y(c, l, h, f, a[d + 4], 6, -145523070), f = y(f, c, l, h, a[d + 11], 10, -1120210379), h = y(h, f, c, l, a[d + 2], 15, 718787259), l = y(l, h, f, c, a[d + 9], 21, -343485551), c = c + m >>> 0, l = l + g >>> 0, h = h + b >>> 0, f = f + w >>> 0;}return e.endian([c, l, h, f]);};s._ff = function (t, e, n, r, i, o, s) {var a = t + (e & n | ~e & r) + (i >>> 0) + s;return (a << o | a >>> 32 - o) + e;}, s._gg = function (t, e, n, r, i, o, s) {var a = t + (e & r | n & ~r) + (i >>> 0) + s;return (a << o | a >>> 32 - o) + e;}, s._hh = function (t, e, n, r, i, o, s) {var a = t + (e ^ n ^ r) + (i >>> 0) + s;return (a << o | a >>> 32 - o) + e;}, s._ii = function (t, e, n, r, i, o, s) {var a = t + (n ^ (e | ~r)) + (i >>> 0) + s;return (a << o | a >>> 32 - o) + e;}, s._blocksize = 16, s._digestsize = 16, t.exports = function (t, n) {if (void 0 === t || null === t) throw new Error("Illegal argument " + t);var r = e.wordsToBytes(s(t, n));return n && n.asBytes ? r : n && n.asString ? o.bytesToString(r) : e.bytesToHex(r);};}();}, function (t, e) {!function () {var e = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",n = { rotl: function rotl(t, e) {return t << e | t >>> 32 - e;}, rotr: function rotr(t, e) {return t << 32 - e | t >>> e;}, endian: function endian(t) {if (t.constructor == Number) return 16711935 & n.rotl(t, 8) | 4278255360 & n.rotl(t, 24);for (var e = 0; e < t.length; e++) {t[e] = n.endian(t[e]);}return t;}, randomBytes: function randomBytes(t) {for (var e = []; t > 0; t--) {e.push(Math.floor(256 * Math.random()));}return e;}, bytesToWords: function bytesToWords(t) {for (var e = [], n = 0, r = 0; n < t.length; n++, r += 8) {e[r >>> 5] |= t[n] << 24 - r % 32;}return e;}, wordsToBytes: function wordsToBytes(t) {for (var e = [], n = 0; n < 32 * t.length; n += 8) {e.push(t[n >>> 5] >>> 24 - n % 32 & 255);}return e;}, bytesToHex: function bytesToHex(t) {for (var e = [], n = 0; n < t.length; n++) {e.push((t[n] >>> 4).toString(16)), e.push((15 & t[n]).toString(16));}return e.join("");}, hexToBytes: function hexToBytes(t) {for (var e = [], n = 0; n < t.length; n += 2) {e.push(parseInt(t.substr(n, 2), 16));}return e;}, bytesToBase64: function bytesToBase64(t) {for (var n = [], r = 0; r < t.length; r += 3) {for (var i = t[r] << 16 | t[r + 1] << 8 | t[r + 2], o = 0; o < 4; o++) {8 * r + 6 * o <= 8 * t.length ? n.push(e.charAt(i >>> 6 * (3 - o) & 63)) : n.push("=");}}return n.join("");}, base64ToBytes: function base64ToBytes(t) {t = t.replace(/[^A-Z0-9+\/]/gi, "");for (var n = [], r = 0, i = 0; r < t.length; i = ++r % 4) {0 != i && n.push((e.indexOf(t.charAt(r - 1)) & Math.pow(2, -2 * i + 8) - 1) << 2 * i | e.indexOf(t.charAt(r)) >>> 6 - 2 * i);}return n;} };t.exports = n;}();}, function (t, e) {function n(t) {return !!t.constructor && "function" == typeof t.constructor.isBuffer && t.constructor.isBuffer(t);}function r(t) {return "function" == typeof t.readFloatLE && "function" == typeof t.slice && n(t.slice(0, 0));} /*!
etermine if an object is a Buffer

author   Feross Aboukhadijeh <https://feross.org>
license  MIT

    t.exports = function (t) {return null != t && (n(t) || r(t) || !!t._isBuffer);};}, function (t, e, n) {"use strict";var r = function r(t, e) {var n;t.indexOf("base64") < 0 ? n = atob(t) : t.split(",")[0].indexOf("base64") >= 0 ? (e = e || t.split(",")[0].split(":")[1].split(";")[0], n = atob(t.split(",")[1])) : n = unescape(t.split(",")[1]);for (var r = new Uint8Array(n.length), i = 0; i < n.length; i++) {r[i] = n.charCodeAt(i);}return new Blob([r], { type: e });};t.exports = r;}, function (t, e, n) {"use strict";function r(t, e) {return t && t[e] ? o.isFunction(t[e]) ? t[e]() : t[e] : null;}var i = function () {function t(t, e) {var n = [],r = !0,i = !1,o = void 0;try {for (var s, a = t[Symbol.iterator](); !(r = (s = a.next()).done) && (n.push(s.value), !e || n.length !== e); r = !0) {;}} catch (t) {i = !0, o = t;} finally {try {!r && a.return && a.return();} finally {if (i) throw o;}}return n;}return function (e, n) {if (Array.isArray(e)) return e;if (Symbol.iterator in Object(e)) return t(e, n);throw new TypeError("Invalid attempt to destructure non-iterable instance");};}(),o = n(0),s = n(4),a = n(1),u = n(2),c = u._request,l = n(3),h = l.isNullOrUndefined,f = l.ensureArray,d = l.transformFetchOptions,p = l.setValue,_ = l.findValue,v = l.isPlainObject,y = function t(e) {return o.isArray(e) ? e.map(t) : v(e) ? o.mapObject(e, t) : o.isObject(e) && e._toPointer ? e._toPointer() : e;},m = ["objectId", "createdAt", "updatedAt"],g = function g(t) {if (-1 !== m.indexOf(t)) throw new Error("key[" + t + "] is reserved");},b = function b(t) {var e = o.find(t, function (t) {return t instanceof Error;});if (!e) return t;var n = new s(e.code, e.message);throw n.results = t, n;};t.exports = function (t) {t.Object = function (e, n) {if (o.isString(e)) return t.Object._create.apply(this, arguments);e = e || {}, n && n.parse && (e = this.parse(e), e = this._mergeMagicFields(e));var i = r(this, "defaults");i && (e = o.extend({}, i, e)), n && n.collection && (this.collection = n.collection), this._serverData = {}, this._opSetQueue = [{}], this._flags = {}, this.attributes = {}, this._hashedJSON = {}, this._escapedAttributes = {}, this.cid = o.uniqueId("c"), this.changed = {}, this._silent = {}, this._pending = {}, this.set(e, { silent: !0 }), this.changed = {}, this._silent = {}, this._pending = {}, this._hasData = !0, this._previousAttributes = o.clone(this.attributes), this.initialize.apply(this, arguments);}, t.Object.saveAll = function (e, n) {return t.Object._deepSaveAsync(e, null, n);}, t.Object.fetchAll = function (t, e) {return a.resolve().then(function () {return c("batch", null, null, "POST", { requests: o.map(t, function (t) {if (!t.className) throw new Error("object must have className to fetch");if (!t.id) throw new Error("object must have id to fetch");if (t.dirty()) throw new Error("object is modified but not saved");return { method: "GET", path: "/1.1/classes/" + t.className + "/" + t.id };}) }, e);}).then(function (e) {var n = o.map(t, function (t, n) {if (e[n].success) {var r = t.parse(e[n].success);return t._cleanupUnsetKeys(r), t._finishFetch(r), t;}return null === e[n].success ? new s(s.OBJECT_NOT_FOUND, "Object not found.") : new s(e[n].error.code, e[n].error.error);});return b(n);});}, o.extend(t.Object.prototype, t.Events, { _fetchWhenSave: !1, initialize: function initialize() {}, fetchWhenSave: function fetchWhenSave(t) {if (console.warn("AV.Object#fetchWhenSave is deprecated, use AV.Object#save with options.fetchWhenSave instead."), !o.isBoolean(t)) throw new Error("Expect boolean value for fetchWhenSave");this._fetchWhenSave = t;}, getObjectId: function getObjectId() {return this.id;}, getCreatedAt: function getCreatedAt() {return this.createdAt;}, getUpdatedAt: function getUpdatedAt() {return this.updatedAt;}, toJSON: function toJSON(t, e) {var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : [];return this._toFullJSON(n, !1);}, toFullJSON: function toFullJSON() {var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];return this._toFullJSON(t);}, _toFullJSON: function _toFullJSON(e) {var n = this,r = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],i = o.clone(this.attributes);if (o.isArray(e)) var s = e.concat(this);return t._objectEach(i, function (e, n) {i[n] = t._encode(e, s, void 0, r);}), t._objectEach(this._operations, function (t, e) {i[e] = t;}), o.has(this, "id") && (i.objectId = this.id), o(["createdAt", "updatedAt"]).each(function (t) {if (o.has(n, t)) {var e = n[t];i[t] = o.isDate(e) ? e.toJSON() : e;}}), r && (i.__type = "Object", o.isArray(e) && e.length && (i.__type = "Pointer"), i.className = this.className), i;}, _refreshCache: function _refreshCache() {var e = this;e._refreshingCache || (e._refreshingCache = !0, t._objectEach(this.attributes, function (n, r) {n instanceof t.Object ? n._refreshCache() : o.isObject(n) && e._resetCacheForKey(r) && e.set(r, new t.Op.Set(n), { silent: !0 });}), delete e._refreshingCache);}, dirty: function dirty(t) {this._refreshCache();var e = o.last(this._opSetQueue);return t ? !!e[t] : !this.id || o.keys(e).length > 0;}, dirtyKeys: function dirtyKeys() {this._refreshCache();var t = o.last(this._opSetQueue);return o.keys(t);}, _toPointer: function _toPointer() {return { __type: "Pointer", className: this.className, objectId: this.id };}, get: function get(t) {switch (t) {case "objectId":return this.id;case "createdAt":case "updatedAt":return this[t];default:return this.attributes[t];}}, relation: function relation(e) {var n = this.get(e);if (n) {if (!(n instanceof t.Relation)) throw new Error("Called relation() on non-relation field " + e);return n._ensureParentAndKey(this, e), n;}return new t.Relation(this, e);}, escape: function escape(t) {var e = this._escapedAttributes[t];if (e) return e;var n,r = this.attributes[t];return n = h(r) ? "" : o.escape(r.toString()), this._escapedAttributes[t] = n, n;}, has: function has(t) {return !h(this.attributes[t]);}, _mergeMagicFields: function _mergeMagicFields(e) {var n = this,r = ["objectId", "createdAt", "updatedAt"];return t._arrayEach(r, function (r) {e[r] && ("objectId" === r ? n.id = e[r] : "createdAt" !== r && "updatedAt" !== r || o.isDate(e[r]) ? n[r] = e[r] : n[r] = t._parseDate(e[r]), delete e[r]);}), e;}, _startSave: function _startSave() {this._opSetQueue.push({});}, _cancelSave: function _cancelSave() {var e = o.first(this._opSetQueue);this._opSetQueue = o.rest(this._opSetQueue);var n = o.first(this._opSetQueue);t._objectEach(e, function (t, r) {var i = e[r],o = n[r];i && o ? n[r] = o._mergeWithPrevious(i) : i && (n[r] = i);}), this._saving = this._saving - 1;}, _finishSave: function _finishSave(e) {var n = {};t._traverse(this.attributes, function (e) {e instanceof t.Object && e.id && e._hasData && (n[e.id] = e);});var r = o.first(this._opSetQueue);this._opSetQueue = o.rest(this._opSetQueue), this._applyOpSet(r, this._serverData), this._mergeMagicFields(e);var i = this;t._objectEach(e, function (e, r) {i._serverData[r] = t._decode(e, r);var o = t._traverse(i._serverData[r], function (e) {if (e instanceof t.Object && n[e.id]) return n[e.id];});o && (i._serverData[r] = o);}), this._rebuildAllEstimatedData();var s = this._opSetQueue.map(o.clone);this._refreshCache(), this._opSetQueue = s, this._saving = this._saving - 1;}, _finishFetch: function _finishFetch(e, n) {this._opSetQueue = [{}], this._mergeMagicFields(e);var r = this;t._objectEach(e, function (e, n) {r._serverData[n] = t._decode(e, n);}), this._rebuildAllEstimatedData(), this._refreshCache(), this._opSetQueue = [{}], this._hasData = n;}, _applyOpSet: function _applyOpSet(e, n) {var r = this;t._objectEach(e, function (e, o) {var s = _(n, o),a = i(s, 3),u = a[0],c = a[1],l = a[2];p(n, o, e._estimate(u, r, o)), c && c[l] === t.Op._UNSET && delete c[l];});}, _resetCacheForKey: function _resetCacheForKey(e) {var n = this.attributes[e];if (o.isObject(n) && !(n instanceof t.Object) && !(n instanceof t.File)) {var r = JSON.stringify(y(n));if (this._hashedJSON[e] !== r) {var i = !!this._hashedJSON[e];return this._hashedJSON[e] = r, i;}}return !1;}, _rebuildEstimatedDataForKey: function _rebuildEstimatedDataForKey(e) {var n = this;delete this.attributes[e], this._serverData[e] && (this.attributes[e] = this._serverData[e]), t._arrayEach(this._opSetQueue, function (r) {var o = r[e];if (o) {var s = _(n.attributes, e),a = i(s, 4),u = a[0],c = a[1],l = a[2],h = a[3];p(n.attributes, e, o._estimate(u, n, e)), c && c[l] === t.Op._UNSET && delete c[l], n._resetCacheForKey(h);}});}, _rebuildAllEstimatedData: function _rebuildAllEstimatedData() {var e = this,n = o.clone(this.attributes);this.attributes = o.clone(this._serverData), t._arrayEach(this._opSetQueue, function (n) {e._applyOpSet(n, e.attributes), t._objectEach(n, function (t, n) {e._resetCacheForKey(n);});}), t._objectEach(n, function (t, n) {e.attributes[n] !== t && e.trigger("change:" + n, e, e.attributes[n], {});}), t._objectEach(this.attributes, function (t, r) {o.has(n, r) || e.trigger("change:" + r, e, t, {});});}, set: function set(e, n, r) {var i;if (o.isObject(e) || h(e) ? (i = o.mapObject(e, function (e, n) {return g(n), t._decode(e, n);}), r = n) : (i = {}, g(e), i[e] = t._decode(n, e)), r = r || {}, !i) return this;i instanceof t.Object && (i = i.attributes), r.unset && t._objectEach(i, function (e, n) {i[n] = new t.Op.Unset();});var s = o.clone(i),a = this;t._objectEach(s, function (e, n) {e instanceof t.Op && (s[n] = e._estimate(a.attributes[n], a, n), s[n] === t.Op._UNSET && delete s[n]);}), this._validate(i, r), r.changes = {};var u = this._escapedAttributes;return t._arrayEach(o.keys(i), function (e) {var n = i[e];n instanceof t.Relation && (n.parent = a), n instanceof t.Op || (n = new t.Op.Set(n));var s = !0;n instanceof t.Op.Set && o.isEqual(a.attributes[e], n.value) && (s = !1), s && (delete u[e], r.silent ? a._silent[e] = !0 : r.changes[e] = !0);var c = o.last(a._opSetQueue);c[e] = n._mergeWithPrevious(c[e]), a._rebuildEstimatedDataForKey(e), s ? (a.changed[e] = a.attributes[e], r.silent || (a._pending[e] = !0)) : (delete a.changed[e], delete a._pending[e]);}), r.silent || this.change(r), this;}, unset: function unset(t, e) {return e = e || {}, e.unset = !0, this.set(t, null, e);}, increment: function increment(e, n) {return (o.isUndefined(n) || o.isNull(n)) && (n = 1), this.set(e, new t.Op.Increment(n));}, add: function add(e, n) {return this.set(e, new t.Op.Add(f(n)));}, addUnique: function addUnique(e, n) {return this.set(e, new t.Op.AddUnique(f(n)));}, remove: function remove(e, n) {return this.set(e, new t.Op.Remove(f(n)));}, bitAnd: function bitAnd(e, n) {return this.set(e, new t.Op.BitAnd(n));}, bitOr: function bitOr(e, n) {return this.set(e, new t.Op.BitOr(n));}, bitXor: function bitXor(e, n) {return this.set(e, new t.Op.BitXor(n));}, op: function op(t) {return o.last(this._opSetQueue)[t];}, clear: function clear(t) {t = t || {}, t.unset = !0;var e = o.extend(this.attributes, this._operations);return this.set(e, t);}, revert: function revert(t) {var e = o.last(this._opSetQueue);return f(t || o.keys(e)).forEach(function (t) {delete e[t];}), this._rebuildAllEstimatedData(), this;}, _getSaveJSON: function _getSaveJSON() {var e = o.clone(o.first(this._opSetQueue));return t._objectEach(e, function (t, n) {e[n] = t.toJSON();}), e;}, _canBeSerialized: function _canBeSerialized() {return t.Object._canBeSerializedAsValue(this.attributes);}, fetch: function fetch() {var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},e = arguments[1],n = this;return c("classes", this.className, this.id, "GET", d(t), e).then(function (e) {var r = n.parse(e);return n._cleanupUnsetKeys(r, t.keys ? f(t.keys).join(",").split(",") : void 0), n._finishFetch(r, !0), n;});}, _cleanupUnsetKeys: function _cleanupUnsetKeys(t) {var e = this,n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : o.keys(this._serverData);o.forEach(n, function (n) {void 0 === t[n] && delete e._serverData[n];});}, save: function save(e, n, r) {var i, s, u;o.isObject(e) || h(e) ? (i = e, u = n) : (i = {}, i[e] = n, u = r), u = o.clone(u) || {}, u.wait && (s = o.clone(this.attributes));var l = o.clone(u) || {};l.wait && (l.silent = !0), i && this.set(i, l);var f = this,d = [],p = [];return t.Object._findUnsavedChildren(f, d, p), d.length + p.length > 1 ? t.Object._deepSaveAsync(this, f, u) : (this._startSave(), this._saving = (this._saving || 0) + 1, this._allPreviousSaves = this._allPreviousSaves || a.resolve(), this._allPreviousSaves = this._allPreviousSaves.catch(function (t) {}).then(function () {var t = f.id ? "PUT" : "POST",e = f._getSaveJSON(),n = {};if ((f._fetchWhenSave || u.fetchWhenSave) && (n.new = "true"), u._failOnNotExist && (n.failOnNotExist = "true"), u.query) {var r;if ("function" == typeof u.query._getParams && (r = u.query._getParams()) && (n.where = r.where), !n.where) {throw new Error("options.query is not an AV.Query");}}o.extend(e, f._flags);var a = "classes",h = f.className;"_User" !== f.className || f.id || (a = "users", h = null);var d = u._makeRequest || c,p = d(a, h, f.id, t, e, u, n);return p = p.then(function (t) {var e = f.parse(t);return u.wait && (e = o.extend(i || {}, e)), f._finishSave(e), u.wait && f.set(s, l), f;}, function (t) {throw f._cancelSave(), t;});}), this._allPreviousSaves);}, destroy: function destroy(t) {t = t || {};var e = this,n = function n() {e.trigger("destroy", e, e.collection, t);};return this.id ? (t.wait || n(), c("classes", this.className, this.id, "DELETE", this._flags, t).then(function () {return t.wait && n(), e;})) : n();}, parse: function parse(e) {var n = o.clone(e);return o(["createdAt", "updatedAt"]).each(function (e) {n[e] && (n[e] = t._parseDate(n[e]));}), n.createdAt && !n.updatedAt && (n.updatedAt = n.createdAt), n;}, clone: function clone() {return new this.constructor(this.attributes);}, isNew: function isNew() {return !this.id;}, change: function change(e) {e = e || {};var n = this._changing;this._changing = !0;var r = this;t._objectEach(this._silent, function (t) {r._pending[t] = !0;});var i = o.extend({}, e.changes, this._silent);if (this._silent = {}, t._objectEach(i, function (t, n) {r.trigger("change:" + n, r, r.get(n), e);}), n) return this;for (var s = function s(t, e) {r._pending[e] || r._silent[e] || delete r.changed[e];}; !o.isEmpty(this._pending);) {this._pending = {}, this.trigger("change", this, e), t._objectEach(this.changed, s), r._previousAttributes = o.clone(this.attributes);}return this._changing = !1, this;}, previous: function previous(t) {return arguments.length && this._previousAttributes ? this._previousAttributes[t] : null;}, previousAttributes: function previousAttributes() {return o.clone(this._previousAttributes);}, isValid: function isValid() {try {this.validate(this.attributes);} catch (t) {return !1;}return !0;}, validate: function validate(e) {if (o.has(e, "ACL") && !(e.ACL instanceof t.ACL)) throw new s(s.OTHER_CAUSE, "ACL must be a AV.ACL.");}, _validate: function _validate(t, e) {!e.silent && this.validate && (t = o.extend({}, this.attributes, t), this.validate(t));}, getACL: function getACL() {return this.get("ACL");}, setACL: function setACL(t, e) {return this.set("ACL", t, e);}, disableBeforeHook: function disableBeforeHook() {this.ignoreHook("beforeSave"), this.ignoreHook("beforeUpdate"), this.ignoreHook("beforeDelete");}, disableAfterHook: function disableAfterHook() {this.ignoreHook("afterSave"), this.ignoreHook("afterUpdate"), this.ignoreHook("afterDelete");}, ignoreHook: function ignoreHook(e) {o.contains(["beforeSave", "afterSave", "beforeUpdate", "afterUpdate", "beforeDelete", "afterDelete"], e) || console.trace("Unsupported hookName: " + e), t.hookKey || console.trace("ignoreHook required hookKey"), this._flags.__ignore_hooks || (this._flags.__ignore_hooks = []), this._flags.__ignore_hooks.push(e);} }), t.Object.createWithoutData = function (e, n, r) {var i = void 0;if (o.isString(e)) i = t.Object._getSubclass(e);else {if (!(e.prototype && e.prototype instanceof t.Object)) throw new Error("class must be a string or a subclass of AV.Object.");i = e;}var s = new i();return s.id = n, s._hasData = r, s;}, t.Object.destroyAll = function (t) {var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};if (!t || 0 === t.length) return a.resolve();var n = o.groupBy(t, function (t) {return JSON.stringify({ className: t.className, flags: t._flags });}),r = { requests: o.map(n, function (t) {var e = o.map(t, "id").join(",");return { method: "DELETE", path: "/1.1/classes/" + t[0].className + "/" + e, body: t[0]._flags };}) };return c("batch", null, null, "POST", r, e).then(function (t) {var e = o.find(t, function (t) {return !t.success;});if (e) throw new s(e.error.code, e.error.error);});}, t.Object._getSubclass = function (e) {if (!o.isString(e)) throw new Error("AV.Object._getSubclass requires a string argument.");var n = t.Object._classMap[e];return n || (n = t.Object.extend(e), t.Object._classMap[e] = n), n;}, t.Object._create = function (e, n, r) {return new (t.Object._getSubclass(e))(n, r);}, t.Object._classMap = {}, t.Object._extend = t._extend, t.Object.new = function (e, n) {return new t.Object(e, n);}, t.Object.extend = function (e, n, r) {if (!o.isString(e)) {if (e && o.has(e, "className")) return t.Object.extend(e.className, e, n);throw new Error("AV.Object.extend's first argument should be the className.");}"User" === e && (e = "_User");var i = null;if (o.has(t.Object._classMap, e)) {var s = t.Object._classMap[e];if (!n && !r) return s;i = s._extend(n, r);} else n = n || {}, n._className = e, i = this._extend(n, r);return i.extend = function (n) {if (o.isString(n) || n && o.has(n, "className")) return t.Object.extend.apply(i, arguments);var r = [e].concat(o.toArray(arguments));return t.Object.extend.apply(i, r);}, Object.defineProperty(i, "query", Object.getOwnPropertyDescriptor(t.Object, "query")), i.new = function (t, e) {return new i(t, e);}, t.Object._classMap[e] = i, i;}, Object.defineProperty(t.Object.prototype, "className", { get: function get() {var t = this._className || this.constructor._LCClassName || this.constructor.name;return "User" === t ? "_User" : t;} }), t.Object.register = function (e, n) {if (!(e.prototype instanceof t.Object)) throw new Error("registered class is not a subclass of AV.Object");var r = n || e.name;if (!r.length) throw new Error("registered class must be named");n && (e._LCClassName = n), t.Object._classMap[r] = e;}, Object.defineProperty(t.Object, "query", { get: function get() {return new t.Query(this.prototype.className);} }), t.Object._findUnsavedChildren = function (e, n, r) {t._traverse(e, function (e) {return e instanceof t.Object ? void (e.dirty() && n.push(e)) : e instanceof t.File ? void (e.id || r.push(e)) : void 0;});}, t.Object._canBeSerializedAsValue = function (e) {var n = !0;return e instanceof t.Object || e instanceof t.File ? n = !!e.id : o.isArray(e) ? t._arrayEach(e, function (e) {t.Object._canBeSerializedAsValue(e) || (n = !1);}) : o.isObject(e) && t._objectEach(e, function (e) {t.Object._canBeSerializedAsValue(e) || (n = !1);}), n;}, t.Object._deepSaveAsync = function (e, n, r) {var i = [],u = [];t.Object._findUnsavedChildren(e, i, u);var l = a.resolve();o.each(u, function (t) {l = l.then(function () {return t.save();});});var h = o.uniq(i),f = o.uniq(h);return l.then(function () {return a._continueWhile(function () {return f.length > 0;}, function () {var e = [],n = [];if (t._arrayEach(f, function (t) {if (e.length > 20) return void n.push(t);t._canBeSerialized() ? e.push(t) : n.push(t);}), f = n, 0 === e.length) return a.reject(new s(s.OTHER_CAUSE, "Tried to save a batch with a cycle."));var i = a.resolve(o.map(e, function (t) {return t._allPreviousSaves || a.resolve();})),u = i.then(function () {return c("batch", null, null, "POST", { requests: o.map(e, function (t) {var e = t.id ? "PUT" : "POST",n = t._getSaveJSON();o.extend(n, t._flags);var r = t.className,i = "/classes/" + r;"_User" !== t.className || t.id || (i = "/users");var i = "/1.1" + i;return t.id && (i = i + "/" + t.id), t._startSave(), { method: e, path: i, body: n };}) }, r).then(function (t) {var n = o.map(e, function (e, n) {return t[n].success ? (e._finishSave(e.parse(t[n].success)), e) : (e._cancelSave(), new s(t[n].error.code, t[n].error.error));});return b(n);});});return t._arrayEach(e, function (t) {t._allPreviousSaves = u;}), u;});}).then(function () {return e;});};};}, function (t, e, n) {"use strict";var r = n(0),i = n(4);t.exports = function (t) {t.Role = t.Object.extend("_Role", { constructor: function constructor(e, n) {if (r.isString(e) ? (t.Object.prototype.constructor.call(this, null, null), this.setName(e)) : t.Object.prototype.constructor.call(this, e, n), n) {if (!(n instanceof t.ACL)) throw new TypeError("acl must be an instance of AV.ACL");this.setACL(n);}}, getName: function getName() {return this.get("name");}, setName: function setName(t, e) {return this.set("name", t, e);}, getUsers: function getUsers() {return this.relation("users");}, getRoles: function getRoles() {return this.relation("roles");}, validate: function validate(e, n) {if ("name" in e && e.name !== this.getName()) {var o = e.name;if (this.id && this.id !== e.objectId) return new i(i.OTHER_CAUSE, "A role's name can only be set before it has been saved.");if (!r.isString(o)) return new i(i.OTHER_CAUSE, "A role's name must be a String.");if (!/^[0-9a-zA-Z\-_ ]+$/.test(o)) return new i(i.OTHER_CAUSE, "A role's name can only contain alphanumeric characters, _, -, and spaces.");}return !!t.Object.prototype.validate && t.Object.prototype.validate.call(this, e, n);} });};}, function (t, e, n) {"use strict";function r(t, e, n) {return e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;}var i = n(0),o = n(17),s = n(4),a = n(2),u = a._request,c = a.request,l = n(1),h = function h() {if ("undefined" == typeof wx || "function" != typeof wx.login) throw new Error("wx.login is not a function（当前平台不支持一键登录）");return new l(function (t, e) {wx.login({ success: function success(n) {var r = n.code,i = n.errMsg;r ? t(r) : e(new Error(i));}, fail: function fail() {return e(new Error("login 失败"));} });});},f = function f() {var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "weixin";return function (e) {var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},r = n.preferUnionId,i = n.unionIdPlatform,o = void 0 === i ? t : i,s = n.asMainAccount,a = void 0 === s || s;return r ? { platform: o, main_account: a, code: e } : { code: e };};},d = function d() {var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "weixin";return function (e, n) {var r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},o = r.unionIdPlatform,a = void 0 === o ? t : o,u = r.asMainAccount,c = void 0 !== u && u;if ("string" != typeof n) throw new s(s.OTHER_CAUSE, "unionId is not a string");if ("string" != typeof a) throw new s(s.OTHER_CAUSE, "unionIdPlatform is not a string");return i.extend({}, e, { platform: a, unionid: n, main_account: Boolean(c) });};};t.exports = function (t) {t.User = t.Object.extend("_User", { _isCurrentUser: !1, _mergeMagicFields: function _mergeMagicFields(e) {return e.sessionToken && (this._sessionToken = e.sessionToken, delete e.sessionToken), t.User.__super__._mergeMagicFields.call(this, e);}, _cleanupAuthData: function _cleanupAuthData() {if (this.isCurrent()) {var e = this.get("authData");e && t._objectEach(this.get("authData"), function (t, n) {e[n] || delete e[n];});}}, _synchronizeAllAuthData: function _synchronizeAllAuthData() {if (this.get("authData")) {var e = this;t._objectEach(this.get("authData"), function (t, n) {e._synchronizeAuthData(n);});}}, _synchronizeAuthData: function _synchronizeAuthData(e) {if (this.isCurrent()) {var n;i.isString(e) ? (n = e, e = t.User._authProviders[n]) : n = e.getAuthType();var r = this.get("authData");if (r && e) {e.restoreAuthentication(r[n]) || this.dissociateAuthData(e);}}}, _handleSaveResult: function _handleSaveResult(e) {return e && !t._config.disableCurrentUser && (this._isCurrentUser = !0), this._cleanupAuthData(), this._synchronizeAllAuthData(), delete this._serverData.password, this._rebuildEstimatedDataForKey("password"), this._refreshCache(), !e && !this.isCurrent() || t._config.disableCurrentUser ? l.resolve() : l.resolve(t.User._saveCurrentUser(this));}, _linkWith: function _linkWith(e, n) {var o,s = this,a = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},u = a.failOnNotExist,c = void 0 !== u && u;return i.isString(e) ? (o = e, e = t.User._authProviders[e]) : o = e.getAuthType(), n ? this.save({ authData: r({}, o, n) }, { fetchWhenSave: !!this.get("authData"), _failOnNotExist: c }).then(function (t) {return t._handleSaveResult(!0).then(function () {return t;});}) : e.authenticate().then(function (t) {return s._linkWith(e, t);});}, associateWithAuthData: function associateWithAuthData(t, e) {return this._linkWith(e, t);}, associateWithAuthDataAndUnionId: function associateWithAuthDataAndUnionId(t, e, n, r) {return this._linkWith(e, d()(t, n, r));}, associateWithQQApp: function associateWithQQApp(t) {var e = this;return h().then(function (n) {return e._linkWith("lc_qqapp", f("qq")(n, t));});}, associateWithWeapp: function associateWithWeapp(t) {var e = this;return h().then(function (n) {return e._linkWith("lc_weapp", f()(n, t));});}, linkWithWeapp: function linkWithWeapp(t) {return console.warn("DEPRECATED: User#linkWithWeapp 已废弃，请使用 User#associateWithWeapp 代替"), this.associateWithWeapp(t);}, associateWithQQAppWithUnionId: function associateWithQQAppWithUnionId(t, e) {var n = this;return h().then(function (r) {return n._linkWith("lc_qqapp", d("qq")({ code: r }, t, e));});}, associateWithWeappWithUnionId: function associateWithWeappWithUnionId(t, e) {var n = this;return h().then(function (r) {return n._linkWith("lc_weapp", d()({ code: r }, t, e));});}, dissociateAuthData: function dissociateAuthData(t) {return this.unset("authData." + t), this.save().then(function (t) {return t._handleSaveResult(!0).then(function () {return t;});});}, _unlinkFrom: function _unlinkFrom(t) {return console.warn("DEPRECATED: User#_unlinkFrom 已废弃，请使用 User#dissociateAuthData 代替"), this.dissociateAuthData(t);}, _isLinked: function _isLinked(t) {var e;return e = i.isString(t) ? t : t.getAuthType(), !!(this.get("authData") || {})[e];}, isAnonymous: function isAnonymous() {return this._isLinked("anonymous");}, logOut: function logOut() {this._logOutWithAll(), this._isCurrentUser = !1;}, _logOutWithAll: function _logOutWithAll() {if (this.get("authData")) {var e = this;t._objectEach(this.get("authData"), function (t, n) {e._logOutWith(n);});}}, _logOutWith: function _logOutWith(e) {this.isCurrent() && (i.isString(e) && (e = t.User._authProviders[e]), e && e.deauthenticate && e.deauthenticate());}, signUp: function signUp(t, e) {var n = t && t.username || this.get("username");if (!n || "" === n) throw new s(s.OTHER_CAUSE, "Cannot sign up user with an empty name.");var r = t && t.password || this.get("password");if (!r || "" === r) throw new s(s.OTHER_CAUSE, "Cannot sign up user with an empty password.");return this.save(t, e).then(function (t) {return t.isAnonymous() && (t.unset("authData.anonymous"), t._opSetQueue = [{}]), t._handleSaveResult(!0).then(function () {return t;});});}, signUpOrlogInWithMobilePhone: function signUpOrlogInWithMobilePhone(t) {var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},n = t && t.mobilePhoneNumber || this.get("mobilePhoneNumber");if (!n || "" === n) throw new s(s.OTHER_CAUSE, "Cannot sign up or login user by mobilePhoneNumber with an empty mobilePhoneNumber.");var r = t && t.smsCode || this.get("smsCode");if (!r || "" === r) throw new s(s.OTHER_CAUSE, "Cannot sign up or login user by mobilePhoneNumber  with an empty smsCode.");return e._makeRequest = function (t, e, n, r, i) {return u("usersByMobilePhone", null, null, "POST", i);}, this.save(t, e).then(function (t) {return delete t.attributes.smsCode, delete t._serverData.smsCode, t._handleSaveResult(!0).then(function () {return t;});});}, loginWithAuthData: function loginWithAuthData(t, e, n) {return this._linkWith(e, t, n);}, loginWithAuthDataAndUnionId: function loginWithAuthDataAndUnionId(t, e, n, r) {return this.loginWithAuthData(d()(t, n, r), e, r);}, loginWithWeapp: function loginWithWeapp(t) {var e = this;return h().then(function (n) {return e.loginWithAuthData(f()(n, t), "lc_weapp", t);});}, loginWithWeappWithUnionId: function loginWithWeappWithUnionId(t, e) {var n = this;return h().then(function (r) {return n.loginWithAuthData(d()({ code: r }, t, e), "lc_weapp", e);});}, loginWithQQApp: function loginWithQQApp(t) {var e = this;return h().then(function (n) {return e.loginWithAuthData(f("qq")(n, t), "lc_weapp", t);});}, loginWithQQAppWithUnionId: function loginWithQQAppWithUnionId(t, e) {var n = this;return h().then(function (r) {return n.loginWithAuthData(d("qq")({ code: r }, t, e), "lc_weapp", e);});}, logIn: function logIn() {var t = this;return u("login", null, null, "POST", this.toJSON()).then(function (e) {var n = t.parse(e);return t._finishFetch(n), t._handleSaveResult(!0).then(function () {return n.smsCode || delete t.attributes.smsCode, t;});});}, save: function save(e, n, r) {var o, s;return i.isObject(e) || i.isNull(e) || i.isUndefined(e) ? (o = e, s = n) : (o = {}, o[e] = n, s = r), s = s || {}, t.Object.prototype.save.call(this, o, s).then(function (t) {return t._handleSaveResult(!1).then(function () {return t;});});}, follow: function follow(e, n) {if (!this.id) throw new Error("Please signin.");var r = void 0,o = void 0;e.user ? (r = e.user, o = e.attributes) : r = e;var s = i.isString(r) ? r : r.id;if (!s) throw new Error("Invalid target user.");var a = "users/" + this.id + "/friendship/" + s;return u(a, null, null, "POST", t._encode(o), n);}, unfollow: function unfollow(t, e) {if (!this.id) throw new Error("Please signin.");var n = void 0;n = t.user ? t.user : t;var r = i.isString(n) ? n : n.id;if (!r) throw new Error("Invalid target user.");var o = "users/" + this.id + "/friendship/" + r;return u(o, null, null, "DELETE", null, e);}, followerQuery: function followerQuery() {return t.User.followerQuery(this.id);}, followeeQuery: function followeeQuery() {return t.User.followeeQuery(this.id);}, fetch: function fetch(e, n) {return t.Object.prototype.fetch.call(this, e, n).then(function (t) {return t._handleSaveResult(!1).then(function () {return t;});});}, updatePassword: function updatePassword(t, e, n) {var r = "users/" + this.id + "/updatePassword";return u(r, null, null, "PUT", { old_password: t, new_password: e }, n);}, isCurrent: function isCurrent() {return this._isCurrentUser;}, getUsername: function getUsername() {return this.get("username");}, getMobilePhoneNumber: function getMobilePhoneNumber() {return this.get("mobilePhoneNumber");}, setMobilePhoneNumber: function setMobilePhoneNumber(t, e) {return this.set("mobilePhoneNumber", t, e);}, setUsername: function setUsername(t, e) {return this.set("username", t, e);}, setPassword: function setPassword(t, e) {return this.set("password", t, e);}, getEmail: function getEmail() {return this.get("email");}, setEmail: function setEmail(t, e) {return this.set("email", t, e);}, authenticated: function authenticated() {return console.warn("DEPRECATED: 如果要判断当前用户的登录状态是否有效，请使用 currentUser.isAuthenticated().then()，如果要判断该用户是否是当前登录用户，请使用 user.id === currentUser.id。"), !!this._sessionToken && !t._config.disableCurrentUser && t.User.current() && t.User.current().id === this.id;}, isAuthenticated: function isAuthenticated() {var e = this;return l.resolve().then(function () {return !!e._sessionToken && t.User._fetchUserBySessionToken(e._sessionToken).then(function () {return !0;}, function (t) {if (211 === t.code) return !1;throw t;});});}, getSessionToken: function getSessionToken() {return this._sessionToken;}, refreshSessionToken: function refreshSessionToken(t) {var e = this;return u("users/" + this.id + "/refreshSessionToken", null, null, "PUT", null, t).then(function (t) {return e._finishFetch(t), e._handleSaveResult(!0).then(function () {return e;});});}, getRoles: function getRoles(e) {return t.Relation.reverseQuery("_Role", "users", this).find(e);} }, { _currentUser: null, _currentUserMatchesDisk: !1, _CURRENT_USER_KEY: "currentUser", _authProviders: {}, signUp: function signUp(e, n, r, i) {return r = r || {}, r.username = e, r.password = n, t.Object._create("_User").signUp(r, i);}, logIn: function logIn(e, n) {var r = t.Object._create("_User");return r._finishFetch({ username: e, password: n }), r.logIn();}, become: function become(t) {return this._fetchUserBySessionToken(t).then(function (t) {return t._handleSaveResult(!0).then(function () {return t;});});}, _fetchUserBySessionToken: function _fetchUserBySessionToken(e) {var n = t.Object._create("_User");return c({ method: "GET", path: "/users/me", authOptions: { sessionToken: e } }).then(function (t) {var e = n.parse(t);return n._finishFetch(e), n;});}, logInWithMobilePhoneSmsCode: function logInWithMobilePhoneSmsCode(e, n) {var r = t.Object._create("_User");return r._finishFetch({ mobilePhoneNumber: e, smsCode: n }), r.logIn();}, signUpOrlogInWithMobilePhone: function signUpOrlogInWithMobilePhone(e, n, r, i) {return r = r || {}, r.mobilePhoneNumber = e, r.smsCode = n, t.Object._create("_User").signUpOrlogInWithMobilePhone(r, i);}, logInWithMobilePhone: function logInWithMobilePhone(e, n) {var r = t.Object._create("_User");return r._finishFetch({ mobilePhoneNumber: e, password: n }), r.logIn();}, loginWithEmail: function loginWithEmail(e, n) {var r = t.Object._create("_User");return r._finishFetch({ email: e, password: n }), r.logIn();}, loginWithAuthData: function loginWithAuthData(e, n, r) {return t.User._logInWith(n, e, r);}, signUpOrlogInWithAuthData: function signUpOrlogInWithAuthData() {return console.warn("DEPRECATED: User.signUpOrlogInWithAuthData 已废弃，请使用 User#loginWithAuthData 代替"), this.loginWithAuthData.apply(this, arguments);}, loginWithAuthDataAndUnionId: function loginWithAuthDataAndUnionId(t, e, n, r) {return this.loginWithAuthData(d()(t, n, r), e, r);}, signUpOrlogInWithAuthDataAndUnionId: function signUpOrlogInWithAuthDataAndUnionId() {return console.warn("DEPRECATED: User.signUpOrlogInWithAuthDataAndUnionId 已废弃，请使用 User#loginWithAuthDataAndUnionId 代替"), this.loginWithAuthDataAndUnionId.apply(this, arguments);}, loginWithWeapp: function loginWithWeapp(t) {var e = this;return h().then(function (n) {return e.loginWithAuthData(f()(n, t), "lc_weapp", t);});}, loginWithWeappWithUnionId: function loginWithWeappWithUnionId(t, e) {var n = this;return h().then(function (r) {return n.loginWithAuthData(d()({ code: r }, t, e), "lc_weapp", e);});}, loginWithQQApp: function loginWithQQApp(t) {var e = this;return h().then(function (n) {return e.loginWithAuthData(f("qq")(n, t), "lc_qqapp", t);});}, loginWithQQAppWithUnionId: function loginWithQQAppWithUnionId(t, e) {var n = this;return h().then(function (r) {return n.loginWithAuthData(d("qq")({ code: r }, t, e), "lc_qqapp", e);});}, _genId: function _genId() {return o();}, loginAnonymously: function loginAnonymously() {return this.loginWithAuthData({ id: t.User._genId() }, "anonymous");}, associateWithAuthData: function associateWithAuthData(t, e, n) {return console.warn("DEPRECATED: User.associateWithAuthData 已废弃，请使用 User#associateWithAuthData 代替"), t._linkWith(e, n);}, logOut: function logOut() {return t._config.disableCurrentUser ? (console.warn("AV.User.current() was disabled in multi-user environment, call logOut() from user object instead https://leancloud.cn/docs/leanengine-node-sdk-upgrade-1.html"), l.resolve(null)) : (null !== t.User._currentUser && (t.User._currentUser._logOutWithAll(), t.User._currentUser._isCurrentUser = !1), t.User._currentUserMatchesDisk = !0, t.User._currentUser = null, t.localStorage.removeItemAsync(t._getAVPath(t.User._CURRENT_USER_KEY)).then(function () {return t._refreshSubscriptionId();}));}, followerQuery: function followerQuery(e) {if (!e || !i.isString(e)) throw new Error("Invalid user object id.");var n = new t.FriendShipQuery("_Follower");return n._friendshipTag = "follower", n.equalTo("user", t.Object.createWithoutData("_User", e)), n;}, followeeQuery: function followeeQuery(e) {if (!e || !i.isString(e)) throw new Error("Invalid user object id.");var n = new t.FriendShipQuery("_Followee");return n._friendshipTag = "followee", n.equalTo("user", t.Object.createWithoutData("_User", e)), n;}, requestPasswordReset: function requestPasswordReset(t) {return u("requestPasswordReset", null, null, "POST", { email: t });}, requestEmailVerify: function requestEmailVerify(t) {return u("requestEmailVerify", null, null, "POST", { email: t });}, requestMobilePhoneVerify: function requestMobilePhoneVerify(t) {var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},n = { mobilePhoneNumber: t };return e.validateToken && (n.validate_token = e.validateToken), u("requestMobilePhoneVerify", null, null, "POST", n, e);}, requestPasswordResetBySmsCode: function requestPasswordResetBySmsCode(t) {var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},n = { mobilePhoneNumber: t };return e.validateToken && (n.validate_token = e.validateToken), u("requestPasswordResetBySmsCode", null, null, "POST", n, e);}, resetPasswordBySmsCode: function resetPasswordBySmsCode(t, e) {return u("resetPasswordBySmsCode", null, t, "PUT", { password: e });}, verifyMobilePhone: function verifyMobilePhone(t) {return u("verifyMobilePhone", null, t, "POST", null);}, requestLoginSmsCode: function requestLoginSmsCode(t) {var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},n = { mobilePhoneNumber: t };return e.validateToken && (n.validate_token = e.validateToken), u("requestLoginSmsCode", null, null, "POST", n, e);}, currentAsync: function currentAsync() {return t._config.disableCurrentUser ? (console.warn("AV.User.currentAsync() was disabled in multi-user environment, access user from request instead https://leancloud.cn/docs/leanengine-node-sdk-upgrade-1.html"), l.resolve(null)) : t.User._currentUser ? l.resolve(t.User._currentUser) : t.User._currentUserMatchesDisk ? l.resolve(t.User._currentUser) : t.localStorage.getItemAsync(t._getAVPath(t.User._CURRENT_USER_KEY)).then(function (e) {if (!e) return null;t.User._currentUserMatchesDisk = !0, t.User._currentUser = t.Object._create("_User"), t.User._currentUser._isCurrentUser = !0;var n = JSON.parse(e);return t.User._currentUser.id = n._id, delete n._id, t.User._currentUser._sessionToken = n._sessionToken, delete n._sessionToken, t.User._currentUser._finishFetch(n), t.User._currentUser._synchronizeAllAuthData(), t.User._currentUser._refreshCache(), t.User._currentUser._opSetQueue = [{}], t.User._currentUser;});}, current: function current() {if (t._config.disableCurrentUser) return console.warn("AV.User.current() was disabled in multi-user environment, access user from request instead https://leancloud.cn/docs/leanengine-node-sdk-upgrade-1.html"), null;if (t.User._currentUser) return t.User._currentUser;if (t.User._currentUserMatchesDisk) return t.User._currentUser;t.User._currentUserMatchesDisk = !0;var e = t.localStorage.getItem(t._getAVPath(t.User._CURRENT_USER_KEY));if (!e) return null;t.User._currentUser = t.Object._create("_User"), t.User._currentUser._isCurrentUser = !0;var n = JSON.parse(e);return t.User._currentUser.id = n._id, delete n._id, t.User._currentUser._sessionToken = n._sessionToken, delete n._sessionToken, t.User._currentUser._finishFetch(n), t.User._currentUser._synchronizeAllAuthData(), t.User._currentUser._refreshCache(), t.User._currentUser._opSetQueue = [{}], t.User._currentUser;}, _saveCurrentUser: function _saveCurrentUser(e) {var n;return n = t.User._currentUser !== e ? t.User.logOut() : l.resolve(), n.then(function () {e._isCurrentUser = !0, t.User._currentUser = e;var n = e._toFullJSON();return n._id = e.id, n._sessionToken = e._sessionToken, t.localStorage.setItemAsync(t._getAVPath(t.User._CURRENT_USER_KEY), JSON.stringify(n)).then(function () {return t.User._currentUserMatchesDisk = !0, t._refreshSubscriptionId();});});}, _registerAuthenticationProvider: function _registerAuthenticationProvider(e) {t.User._authProviders[e.getAuthType()] = e, !t._config.disableCurrentUser && t.User.current() && t.User.current()._synchronizeAuthData(e.getAuthType());}, _logInWith: function _logInWith(e, n, r) {return t.Object._create("_User")._linkWith(e, n, r);} });};}, function (t, e, n) {"use strict";var r = n(0),i = n(6)("leancloud:query"),o = n(1),s = n(4),a = n(2),u = a._request,c = a.request,l = n(3),h = l.ensureArray,f = l.transformFetchOptions,d = function d(t, e) {if (void 0 === t) throw new Error(e);};t.exports = function (t) {t.Query = function (e) {r.isString(e) && (e = t.Object._getSubclass(e)), this.objectClass = e, this.className = e.prototype.className, this._where = {}, this._include = [], this._select = [], this._limit = -1, this._skip = 0;}, t.Query.or = function () {var e = r.toArray(arguments),n = null;t._arrayEach(e, function (t) {if (r.isNull(n) && (n = t.className), n !== t.className) throw new Error("All queries must be for the same class");});var i = new t.Query(n);return i._orQuery(e), i;}, t.Query.and = function () {var e = r.toArray(arguments),n = null;t._arrayEach(e, function (t) {if (r.isNull(n) && (n = t.className), n !== t.className) throw new Error("All queries must be for the same class");});var i = new t.Query(n);return i._andQuery(e), i;}, t.Query.doCloudQuery = function (e, n, i) {var o = { cql: e };return r.isArray(n) ? o.pvalues = n : i = n, u("cloudQuery", null, null, "GET", o, i).then(function (e) {var n = new t.Query(e.className);return { results: r.map(e.results, function (t) {var r = n._newObject(e);return r._finishFetch && r._finishFetch(n._processResult(t), !0), r;}), count: e.count, className: e.className };});}, t.Query.fromJSON = function (e) {var n = e.className,i = e.where,o = e.include,s = e.select,a = e.includeACL,u = e.limit,c = e.skip,l = e.order;if ("string" != typeof n) throw new TypeError("Invalid Query JSON, className must be a String.");var h = new t.Query(n);return r.extend(h, { _where: i, _include: o, _select: s, _includeACL: a, _limit: u, _skip: c, _order: l }), h;}, t.Query._extend = t._extend, r.extend(t.Query.prototype, { _processResult: function _processResult(t) {return t;}, get: function get(t, e) {if (!r.isString(t)) throw new Error("objectId must be a string");if ("" === t) return o.reject(new s(s.OBJECT_NOT_FOUND, "Object not found."));var n = this._newObject();n.id = t;var i = this._getParams(),a = {};return i.keys && (a.keys = i.keys), i.include && (a.include = i.include), i.includeACL && (a.includeACL = i.includeACL), u("classes", this.className, t, "GET", f(a), e).then(function (t) {if (r.isEmpty(t)) throw new s(s.OBJECT_NOT_FOUND, "Object not found.");return n._finishFetch(n.parse(t), !0), n;});}, toJSON: function toJSON() {return { className: this.className, where: this._where, include: this._include, select: this._select, includeACL: this._includeACL, limit: this._limit, skip: this._skip, order: this._order };}, _getParams: function _getParams() {var t = { where: this._where };return this._include.length > 0 && (t.include = this._include.join(",")), this._select.length > 0 && (t.keys = this._select.join(",")), void 0 !== this._includeACL && (t.returnACL = this._includeACL), this._limit >= 0 && (t.limit = this._limit), this._skip > 0 && (t.skip = this._skip), void 0 !== this._order && (t.order = this._order), t;}, _newObject: function _newObject(e) {return e && e.className ? new t.Object(e.className) : new this.objectClass();}, _createRequest: function _createRequest() {var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this._getParams(),e = arguments[1],n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "/classes/" + this.className;if (encodeURIComponent(JSON.stringify(t)).length > 2e3) {return c({ path: "/batch", method: "POST", data: { requests: [{ method: "GET", path: "/1.1" + n, params: t }] }, authOptions: e }).then(function (t) {var e = t[0];if (e.success) return e.success;var n = new Error(e.error.error || "Unknown batch error");throw n.code = e.error.code, n;});}return c({ method: "GET", path: n, query: t, authOptions: e });}, _parseResponse: function _parseResponse(t) {var e = this;return r.map(t.results, function (n) {var r = e._newObject(t);return r._finishFetch && r._finishFetch(e._processResult(n), !0), r;});}, find: function find(t) {return this._createRequest(void 0, t).then(this._parseResponse.bind(this));}, scan: function scan() {var t = this,e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},n = e.orderedBy,s = e.batchSize,a = arguments[1],c = this._getParams();i("scan %O", c), c.order && (console.warn("The order of the query is ignored for Query#scan. Checkout the orderedBy option of Query#scan."), delete c.order), c.skip && (console.warn("The skip option of the query is ignored for Query#scan."), delete c.skip), c.limit && (console.warn("The limit option of the query is ignored for Query#scan."), delete c.limit), n && (c.scan_key = n), s && (c.limit = s);var l = o.resolve([]),h = void 0,f = !1;return { next: function next() {return l = l.then(function (e) {return f ? [] : e.length > 1 ? e : h || 0 === e.length ? u("scan/classes", t.className, null, "GET", h ? r.extend({}, c, { cursor: h }) : c, a).then(function (e) {return h = e.cursor, t._parseResponse(e);}).then(function (t) {return t.length || (f = !0), e.concat(t);}) : (f = !0, e);}), l.then(function (t) {return t.shift();}).then(function (t) {return { value: t, done: f };});} };}, destroyAll: function destroyAll(e) {return this.find(e).then(function (n) {return t.Object.destroyAll(n, e);});}, count: function count(t) {var e = this._getParams();return e.limit = 0, e.count = 1, this._createRequest(e, t).then(function (t) {return t.count;});}, first: function first(t) {var e = this,n = this._getParams();return n.limit = 1, this._createRequest(n, t).then(function (t) {return r.map(t.results, function (t) {var n = e._newObject();return n._finishFetch && n._finishFetch(e._processResult(t), !0), n;})[0];});}, skip: function skip(t) {return d(t, "undefined is not a valid skip value"), this._skip = t, this;}, limit: function limit(t) {return d(t, "undefined is not a valid limit value"), this._limit = t, this;}, equalTo: function equalTo(e, n) {return d(e, "undefined is not a valid key"), d(n, "undefined is not a valid value"), this._where[e] = t._encode(n), this;}, _addCondition: function _addCondition(e, n, r) {return d(e, "undefined is not a valid condition key"), d(n, "undefined is not a valid condition"), d(r, "undefined is not a valid condition value"), this._where[e] || (this._where[e] = {}), this._where[e][n] = t._encode(r), this;}, sizeEqualTo: function sizeEqualTo(t, e) {return this._addCondition(t, "$size", e), this;}, notEqualTo: function notEqualTo(t, e) {return this._addCondition(t, "$ne", e), this;}, lessThan: function lessThan(t, e) {return this._addCondition(t, "$lt", e), this;}, greaterThan: function greaterThan(t, e) {return this._addCondition(t, "$gt", e), this;}, lessThanOrEqualTo: function lessThanOrEqualTo(t, e) {return this._addCondition(t, "$lte", e), this;}, greaterThanOrEqualTo: function greaterThanOrEqualTo(t, e) {return this._addCondition(t, "$gte", e), this;}, containedIn: function containedIn(t, e) {return this._addCondition(t, "$in", e), this;}, notContainedIn: function notContainedIn(t, e) {return this._addCondition(t, "$nin", e), this;}, containsAll: function containsAll(t, e) {return this._addCondition(t, "$all", e), this;}, exists: function exists(t) {return this._addCondition(t, "$exists", !0), this;}, doesNotExist: function doesNotExist(t) {return this._addCondition(t, "$exists", !1), this;}, matches: function matches(t, e, n) {return this._addCondition(t, "$regex", e), n || (n = ""), e.ignoreCase && (n += "i"), e.multiline && (n += "m"), n && n.length && this._addCondition(t, "$options", n), this;}, matchesQuery: function matchesQuery(t, e) {var n = e._getParams();return n.className = e.className, this._addCondition(t, "$inQuery", n), this;}, doesNotMatchQuery: function doesNotMatchQuery(t, e) {var n = e._getParams();return n.className = e.className, this._addCondition(t, "$notInQuery", n), this;}, matchesKeyInQuery: function matchesKeyInQuery(t, e, n) {var r = n._getParams();return r.className = n.className, this._addCondition(t, "$select", { key: e, query: r }), this;}, doesNotMatchKeyInQuery: function doesNotMatchKeyInQuery(t, e, n) {var r = n._getParams();return r.className = n.className, this._addCondition(t, "$dontSelect", { key: e, query: r }), this;}, _orQuery: function _orQuery(t) {var e = r.map(t, function (t) {return t._getParams().where;});return this._where.$or = e, this;}, _andQuery: function _andQuery(t) {var e = r.map(t, function (t) {return t._getParams().where;});return this._where.$and = e, this;}, _quote: function _quote(t) {return "\\Q" + t.replace("\\E", "\\E\\\\E\\Q") + "\\E";}, contains: function contains(t, e) {return this._addCondition(t, "$regex", this._quote(e)), this;}, startsWith: function startsWith(t, e) {return this._addCondition(t, "$regex", "^" + this._quote(e)), this;}, endsWith: function endsWith(t, e) {return this._addCondition(t, "$regex", this._quote(e) + "$"), this;}, ascending: function ascending(t) {return d(t, "undefined is not a valid key"), this._order = t, this;}, addAscending: function addAscending(t) {return d(t, "undefined is not a valid key"), this._order ? this._order += "," + t : this._order = t, this;}, descending: function descending(t) {return d(t, "undefined is not a valid key"), this._order = "-" + t, this;}, addDescending: function addDescending(t) {return d(t, "undefined is not a valid key"), this._order ? this._order += ",-" + t : this._order = "-" + t, this;}, near: function near(e, n) {return n instanceof t.GeoPoint || (n = new t.GeoPoint(n)), this._addCondition(e, "$nearSphere", n), this;}, withinRadians: function withinRadians(t, e, n) {return this.near(t, e), this._addCondition(t, "$maxDistance", n), this;}, withinMiles: function withinMiles(t, e, n) {return this.withinRadians(t, e, n / 3958.8);}, withinKilometers: function withinKilometers(t, e, n) {return this.withinRadians(t, e, n / 6371);}, withinGeoBox: function withinGeoBox(e, n, r) {return n instanceof t.GeoPoint || (n = new t.GeoPoint(n)), r instanceof t.GeoPoint || (r = new t.GeoPoint(r)), this._addCondition(e, "$within", { $box: [n, r] }), this;}, include: function include(t) {var e = this;return d(t, "undefined is not a valid key"), r.forEach(arguments, function (t) {e._include = e._include.concat(h(t));}), this;}, includeACL: function includeACL() {var t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];return this._includeACL = t, this;}, select: function select(t) {var e = this;return d(t, "undefined is not a valid key"), r.forEach(arguments, function (t) {e._select = e._select.concat(h(t));}), this;}, each: function each(e) {var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};if (this._order || this._skip || this._limit >= 0) {var i = new Error("Cannot iterate on a query with sort, skip, or limit.");return o.reject(i);}var s = new t.Query(this.objectClass);s._limit = n.batchSize || 100, s._where = r.clone(this._where), s._include = r.clone(this._include), s.ascending("objectId");var a = !1;return o._continueWhile(function () {return !a;}, function () {return s.find(n).then(function (t) {var n = o.resolve();return r.each(t, function (t) {n = n.then(function () {return e(t);});}), n.then(function () {t.length >= s._limit ? s.greaterThan("objectId", t[t.length - 1].id) : a = !0;});});});}, subscribe: function subscribe(e) {return t.LiveQuery.init(this, e);} }), t.FriendShipQuery = t.Query._extend({ _newObject: function _newObject() {return new (t.Object._getSubclass("_User"))();}, _processResult: function _processResult(t) {if (t && t[this._friendshipTag]) {var e = t[this._friendshipTag];return "Pointer" === e.__type && "_User" === e.className && (delete e.__type, delete e.className), e;}return null;} });};}, function (t, e, n) {"use strict";var r = n(0),i = n(66),o = n(1),s = n(3),a = s.inherits,u = n(2),c = u.request,l = function l(t, e) {return c({ method: "POST", path: "/LiveQuery/subscribe", data: { query: t, id: e } });};t.exports = function (t) {var e = function e() {if (!t._config.realtime) throw new Error("LiveQuery not supported. Please use the LiveQuery bundle. https://url.leanapp.cn/enable-live-query");};t.LiveQuery = a(i, { constructor: function constructor(t, e, n, r) {var o = this;i.apply(this), this.id = t, this._client = e, this._client.register(this), this._queryJSON = n, this._subscriptionId = r, this._onMessage = this._dispatch.bind(this), this._onReconnect = function () {l(o._queryJSON, o._subscriptionId).catch(function (t) {return console.error("LiveQuery resubscribe error: " + t.message);});}, e.on("message", this._onMessage), e.on("reconnect", this._onReconnect);}, _dispatch: function _dispatch(e) {var n = this;e.forEach(function (e) {var i = e.op,o = e.object,s = e.query_id,a = e.updatedKeys;if (s === n.id) {var u = t.parseJSON(r.extend({ __type: "_File" === o.className ? "File" : "Object" }, o));a ? n.emit(i, u, a) : n.emit(i, u);}});}, unsubscribe: function unsubscribe() {var t = this._client;return t.off("message", this._onMessage), t.off("reconnect", this._onReconnect), t.deregister(this), c({ method: "POST", path: "/LiveQuery/unsubscribe", data: { id: t.id, query_id: this.id } });} }, { init: function init(n) {var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},i = r.subscriptionId,s = void 0 === i ? t._getSubscriptionId() : i;if (e(), !(n instanceof t.Query)) throw new TypeError("LiveQuery must be inited with a Query");return o.resolve(s).then(function (e) {return t._config.realtime.createLiveQueryClient(e).then(function (r) {var i = n._getParams(),o = i.where,s = i.keys,a = i.returnACL,u = { where: o, keys: s, returnACL: a, className: n.className },c = l(u, e).then(function (n) {var i = n.query_id;return new t.LiveQuery(i, r, u, e);}).finally(function () {r.deregister(c);});return r.register(c), c;});});}, pause: function pause() {return e(), t._config.realtime.pause();}, resume: function resume() {return e(), t._config.realtime.resume();} });};}, function (t, e, n) {"use strict";function r() {}function i(t, e, n) {this.fn = t, this.context = e, this.once = n || !1;}function o() {this._events = new r(), this._eventsCount = 0;}var s = Object.prototype.hasOwnProperty,a = "~";Object.create && (r.prototype = Object.create(null), new r().__proto__ || (a = !1)), o.prototype.eventNames = function () {var t,e,n = [];if (0 === this._eventsCount) return n;for (e in t = this._events) {s.call(t, e) && n.push(a ? e.slice(1) : e);}return Object.getOwnPropertySymbols ? n.concat(Object.getOwnPropertySymbols(t)) : n;}, o.prototype.listeners = function (t, e) {var n = a ? a + t : t,r = this._events[n];if (e) return !!r;if (!r) return [];if (r.fn) return [r.fn];for (var i = 0, o = r.length, s = new Array(o); i < o; i++) {s[i] = r[i].fn;}return s;}, o.prototype.emit = function (t, e, n, r, i, o) {var s = a ? a + t : t;if (!this._events[s]) return !1;var u,c,l = this._events[s],h = arguments.length;if (l.fn) {switch (l.once && this.removeListener(t, l.fn, void 0, !0), h) {case 1:return l.fn.call(l.context), !0;case 2:return l.fn.call(l.context, e), !0;case 3:return l.fn.call(l.context, e, n), !0;case 4:return l.fn.call(l.context, e, n, r), !0;case 5:return l.fn.call(l.context, e, n, r, i), !0;case 6:return l.fn.call(l.context, e, n, r, i, o), !0;}for (c = 1, u = new Array(h - 1); c < h; c++) {u[c - 1] = arguments[c];}l.fn.apply(l.context, u);} else {var f,d = l.length;for (c = 0; c < d; c++) {switch (l[c].once && this.removeListener(t, l[c].fn, void 0, !0), h) {case 1:l[c].fn.call(l[c].context);break;case 2:l[c].fn.call(l[c].context, e);break;case 3:l[c].fn.call(l[c].context, e, n);break;case 4:l[c].fn.call(l[c].context, e, n, r);break;default:if (!u) for (f = 1, u = new Array(h - 1); f < h; f++) {u[f - 1] = arguments[f];}l[c].fn.apply(l[c].context, u);}}}return !0;}, o.prototype.on = function (t, e, n) {var r = new i(e, n || this),o = a ? a + t : t;return this._events[o] ? this._events[o].fn ? this._events[o] = [this._events[o], r] : this._events[o].push(r) : (this._events[o] = r, this._eventsCount++), this;}, o.prototype.once = function (t, e, n) {var r = new i(e, n || this, !0),o = a ? a + t : t;return this._events[o] ? this._events[o].fn ? this._events[o] = [this._events[o], r] : this._events[o].push(r) : (this._events[o] = r, this._eventsCount++), this;}, o.prototype.removeListener = function (t, e, n, i) {var o = a ? a + t : t;if (!this._events[o]) return this;if (!e) return 0 == --this._eventsCount ? this._events = new r() : delete this._events[o], this;var s = this._events[o];if (s.fn) s.fn !== e || i && !s.once || n && s.context !== n || (0 == --this._eventsCount ? this._events = new r() : delete this._events[o]);else {for (var u = 0, c = [], l = s.length; u < l; u++) {(s[u].fn !== e || i && !s[u].once || n && s[u].context !== n) && c.push(s[u]);}c.length ? this._events[o] = 1 === c.length ? c[0] : c : 0 == --this._eventsCount ? this._events = new r() : delete this._events[o];}return this;}, o.prototype.removeAllListeners = function (t) {var e;return t ? (e = a ? a + t : t, this._events[e] && (0 == --this._eventsCount ? this._events = new r() : delete this._events[e])) : (this._events = new r(), this._eventsCount = 0), this;}, o.prototype.off = o.prototype.removeListener, o.prototype.addListener = o.prototype.on, o.prototype.setMaxListeners = function () {return this;}, o.prefixed = a, o.EventEmitter = o, t.exports = o;}, function (t, e, n) {"use strict";var r = n(0),i = n(3),o = i.tap;t.exports = function (t) {t.Captcha = function (t, e) {this._options = t, this._authOptions = e, this.url = void 0, this.captchaToken = void 0, this.validateToken = void 0;}, t.Captcha.prototype.refresh = function () {var e = this;return t.Cloud._requestCaptcha(this._options, this._authOptions).then(function (t) {var n = t.captchaToken,i = t.url;return r.extend(e, { captchaToken: n, url: i }), i;});}, t.Captcha.prototype.verify = function (e) {var n = this;return t.Cloud.verifyCaptcha(e, this.captchaToken).then(o(function (t) {return n.validateToken = t;}));}, t.Captcha.request = function (e, n) {var r = new t.Captcha(e, n);return r.refresh().then(function () {return r;});};};}, function (t, e, n) {"use strict";var r = n(0),i = n(2),o = i._request,s = i.request,a = n(1);t.exports = function (t) {t.Cloud = t.Cloud || {}, r.extend(t.Cloud, { run: function run(e, n, r) {return s({ service: "engine", method: "POST", path: "/functions/" + e, data: t._encode(n, null, !0), authOptions: r }).then(function (e) {return t._decode(e).result;});}, rpc: function rpc(e, n, i) {return r.isArray(n) ? a.reject(new Error("Can't pass Array as the param of rpc function in JavaScript SDK.")) : s({ service: "engine", method: "POST", path: "/call/" + e, data: t._encodeObjectOrArray(n), authOptions: i }).then(function (e) {return t._decode(e).result;});}, getServerDate: function getServerDate() {return o("date", null, null, "GET").then(function (e) {return t._decode(e);});}, requestSmsCode: function requestSmsCode(t) {var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};if (r.isString(t) && (t = { mobilePhoneNumber: t }), !t.mobilePhoneNumber) throw new Error("Missing mobilePhoneNumber.");return e.validateToken && (t = r.extend({}, t, { validate_token: e.validateToken })), o("requestSmsCode", null, null, "POST", t, e);}, verifySmsCode: function verifySmsCode(t, e) {if (!t) throw new Error("Missing sms code.");var n = {};return r.isString(e) && (n.mobilePhoneNumber = e), o("verifySmsCode", t, null, "POST", n);}, _requestCaptcha: function _requestCaptcha(t, e) {return o("requestCaptcha", null, null, "GET", t, e).then(function (t) {var e = t.captcha_url;return { captchaToken: t.captcha_token, url: e };});}, requestCaptcha: t.Captcha.request, verifyCaptcha: function verifyCaptcha(t, e) {return o("verifyCaptcha", null, null, "POST", { captcha_code: t, captcha_token: e }).then(function (t) {return t.validate_token;});} });};}, function (t, e, n) {"use strict";var r = n(2).request;t.exports = function (t) {t.Installation = t.Object.extend("_Installation"), t.Push = t.Push || {}, t.Push.send = function (t, e) {if (t.where && (t.where = t.where._getParams().where), t.where && t.cql) throw new Error("Both where and cql can't be set");if (t.push_time && (t.push_time = t.push_time.toJSON()), t.expiration_time && (t.expiration_time = t.expiration_time.toJSON()), t.expiration_time && t.expiration_time_interval) throw new Error("Both expiration_time and expiration_time_interval can't be set");return r({ service: "push", method: "POST", path: "/push", data: t, authOptions: e });};};}, function (t, e, n) {"use strict";var r = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (t) {return typeof t;} : function (t) {return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;},i = n(0),o = n(1),s = n(2)._request,a = n(3),u = a.getSessionToken;t.exports = function (t) {var e = function e() {var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};return u(e) ? t.User._fetchUserBySessionToken(u(e)) : t.User.currentAsync();},n = function n(_n) {return e(_n).then(function (e) {return t.Object.createWithoutData("_User", e.id)._toPointer();});};t.Status = function (t, e) {return this.data = {}, this.inboxType = "default", this.query = null, t && "object" === (void 0 === t ? "undefined" : r(t)) ? this.data = t : (t && (this.data.image = t), e && (this.data.message = e)), this;}, i.extend(t.Status.prototype, { get: function get(t) {return this.data[t];}, set: function set(t, e) {return this.data[t] = e, this;}, destroy: function destroy(t) {return this.id ? s("statuses", null, this.id, "DELETE", t) : o.reject(new Error("The status id is not exists."));}, toObject: function toObject() {return this.id ? t.Object.createWithoutData("_Status", this.id) : null;}, _getDataJSON: function _getDataJSON() {var e = i.clone(this.data);return t._encode(e);}, send: function send() {var e = this,r = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};if (!u(r) && !t.User.current()) throw new Error("Please signin an user.");return this.query ? n(r).then(function (t) {var n = e.query._getParams();n.className = e.query.className;var i = {};return i.query = n, e.data = e.data || {}, e.data.source = e.data.source || t, i.data = e._getDataJSON(), i.inboxType = e.inboxType || "default", s("statuses", null, null, "POST", i, r);}).then(function (n) {return e.id = n.objectId, e.createdAt = t._parseDate(n.createdAt), e;}) : t.Status.sendStatusToFollowers(this, r);}, _finishFetch: function _finishFetch(e) {this.id = e.objectId, this.createdAt = t._parseDate(e.createdAt), this.updatedAt = t._parseDate(e.updatedAt), this.messageId = e.messageId, delete e.messageId, delete e.objectId, delete e.createdAt, delete e.updatedAt, this.data = t._decode(e);} }), t.Status.sendStatusToFollowers = function (e) {var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};if (!u(r) && !t.User.current()) throw new Error("Please signin an user.");return n(r).then(function (n) {var i = {};i.className = "_Follower", i.keys = "follower", i.where = { user: n };var o = {};return o.query = i, e.data = e.data || {}, e.data.source = e.data.source || n, o.data = e._getDataJSON(), o.inboxType = e.inboxType || "default", s("statuses", null, null, "POST", o, r).then(function (n) {return e.id = n.objectId, e.createdAt = t._parseDate(n.createdAt), e;});});}, t.Status.sendPrivateStatus = function (e, r) {var o = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};if (!u(o) && !t.User.current()) throw new Error("Please signin an user.");if (!r) throw new Error("Invalid target user.");var a = i.isString(r) ? r : r.id;if (!a) throw new Error("Invalid target user.");return n(o).then(function (n) {var r = {};r.className = "_User", r.where = { objectId: a };var i = {};return i.query = r, e.data = e.data || {}, e.data.source = e.data.source || n, i.data = e._getDataJSON(), i.inboxType = "private", e.inboxType = "private", s("statuses", null, null, "POST", i, o).then(function (n) {return e.id = n.objectId, e.createdAt = t._parseDate(n.createdAt), e;});});}, t.Status.countUnreadStatuses = function (n) {var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "default",a = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};if (i.isString(r) || (a = r), !u(a) && null == n && !t.User.current()) throw new Error("Please signin an user or pass the owner objectId.");return o.resolve(n || e(a)).then(function (e) {var n = {};return n.inboxType = t._encode(r), n.owner = t._encode(e), s("subscribe/statuses/count", null, null, "GET", n, a);});}, t.Status.resetUnreadCount = function (n) {var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "default",a = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};if (i.isString(r) || (a = r), !u(a) && null == n && !t.User.current()) throw new Error("Please signin an user or pass the owner objectId.");return o.resolve(n || e(a)).then(function (e) {var n = {};return n.inboxType = t._encode(r), n.owner = t._encode(e), s("subscribe/statuses/resetUnreadCount", null, null, "POST", n, a);});}, t.Status.statusQuery = function (e) {var n = new t.Query("_Status");return e && n.equalTo("source", e), n;}, t.InboxQuery = t.Query._extend({ _objectClass: t.Status, _sinceId: 0, _maxId: 0, _inboxType: "default", _owner: null, _newObject: function _newObject() {return new t.Status();}, _createRequest: function _createRequest(e, n) {return t.InboxQuery.__super__._createRequest.call(this, e, n, "/subscribe/statuses");}, sinceId: function sinceId(t) {return this._sinceId = t, this;}, maxId: function maxId(t) {return this._maxId = t, this;}, owner: function owner(t) {return this._owner = t, this;}, inboxType: function inboxType(t) {return this._inboxType = t, this;}, _getParams: function _getParams() {var e = t.InboxQuery.__super__._getParams.call(this);return e.owner = t._encode(this._owner), e.inboxType = t._encode(this._inboxType), e.sinceId = t._encode(this._sinceId), e.maxId = t._encode(this._maxId), e;} }), t.Status.inboxQuery = function (e, n) {var r = new t.InboxQuery(t.Status);return e && (r._owner = e), n && (r._inboxType = n), r;};};}, function (t, e, n) {"use strict";var r = n(0),i = n(2)._request;t.exports = function (t) {t.SearchSortBuilder = function () {this._sortFields = [];}, r.extend(t.SearchSortBuilder.prototype, { _addField: function _addField(t, e, n, r) {var i = {};return i[t] = { order: e || "asc", mode: n || "avg", missing: "_" + (r || "last") }, this._sortFields.push(i), this;}, ascending: function ascending(t, e, n) {return this._addField(t, "asc", e, n);}, descending: function descending(t, e, n) {return this._addField(t, "desc", e, n);}, whereNear: function whereNear(t, e, n) {n = n || {};var r = {},i = { lat: e.latitude, lon: e.longitude },o = { order: n.order || "asc", mode: n.mode || "avg", unit: n.unit || "km" };return o[t] = i, r._geo_distance = o, this._sortFields.push(r), this;}, build: function build() {return JSON.stringify(t._encode(this._sortFields));} }), t.SearchQuery = t.Query._extend({ _sid: null, _hits: 0, _queryString: null, _highlights: null, _sortBuilder: null, _createRequest: function _createRequest(t, e) {return i("search/select", null, null, "GET", t || this._getParams(), e);}, sid: function sid(t) {return this._sid = t, this;}, queryString: function queryString(t) {return this._queryString = t, this;}, highlights: function highlights(t) {var e;return e = t && r.isString(t) ? arguments : t, this._highlights = e, this;}, sortBy: function sortBy(t) {return this._sortBuilder = t, this;}, hits: function hits() {return this._hits || (this._hits = 0), this._hits;}, _processResult: function _processResult(t) {return delete t.className, delete t._app_url, delete t._deeplink, t;}, hasMore: function hasMore() {return !this._hitEnd;}, reset: function reset() {this._hitEnd = !1, this._sid = null, this._hits = 0;}, find: function find() {var t = this;return this._createRequest().then(function (e) {return e.sid ? (t._oldSid = t._sid, t._sid = e.sid) : (t._sid = null, t._hitEnd = !0), t._hits = e.hits || 0, r.map(e.results, function (n) {n.className && (e.className = n.className);var r = t._newObject(e);return r.appURL = n._app_url, r._finishFetch(t._processResult(n), !0), r;});});}, _getParams: function _getParams() {var e = t.SearchQuery.__super__._getParams.call(this);if (delete e.where, this.className && (e.clazz = this.className), this._sid && (e.sid = this._sid), !this._queryString) throw new Error("Please set query string.");if (e.q = this._queryString, this._highlights && (e.highlights = this._highlights.join(",")), this._sortBuilder && e.order) throw new Error("sort and order can not be set at same time.");return this._sortBuilder && (e.sort = this._sortBuilder.build()), e;} });};}, function (t, e, n) {"use strict";var r = n(0),i = n(4),o = n(2),s = o.request,a = n(1);t.exports = function (t) {t.Insight = t.Insight || {}, r.extend(t.Insight, { startJob: function startJob(e, n) {if (!e || !e.sql) throw new Error("Please provide the sql to run the job.");var r = { jobConfig: e, appId: t.applicationId };return s({ path: "/bigquery/jobs", method: "POST", data: t._encode(r, null, !0), authOptions: n, signKey: !1 }).then(function (e) {return t._decode(e).id;});}, on: function on(t, e) {} }), t.Insight.JobQuery = function (t, e) {if (!t) throw new Error("Please provide the job id.");this.id = t, this.className = e, this._skip = 0, this._limit = 100;}, r.extend(t.Insight.JobQuery.prototype, { skip: function skip(t) {return this._skip = t, this;}, limit: function limit(t) {return this._limit = t, this;}, find: function find(t) {var e = { skip: this._skip, limit: this._limit };return s({ path: "/bigquery/jobs/" + this.id, method: "GET", query: e, authOptions: t, signKey: !1 }).then(function (t) {return t.error ? a.reject(new i(t.code, t.error)) : a.resolve(t);});} });};}, function (t, e, n) {"use strict";var r = n(0),i = n(2),o = i._request,s = n(5),a = function a(t) {return "string" == typeof t ? t : "function" == typeof t.getPayload ? JSON.stringify(t.getPayload()) : JSON.stringify(t);};t.exports = s.Object.extend("_Conversation", { constructor: function constructor(t) {var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};s.Object.prototype.constructor.call(this, null, null), this.set("name", t), void 0 !== e.isSystem && this.set("sys", !!e.isSystem), void 0 !== e.isTransient && this.set("tr", !!e.isTransient);}, getCreator: function getCreator() {return this.get("c");}, getLastMessageAt: function getLastMessageAt() {return this.get("lm");}, getMembers: function getMembers() {return this.get("m");}, addMember: function addMember(t) {return this.add("m", t);}, getMutedMembers: function getMutedMembers() {return this.get("mu");}, getName: function getName() {return this.get("name");}, isTransient: function isTransient() {return this.get("tr");}, isSystem: function isSystem() {return this.get("sys");}, send: function send(t, e) {var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {},i = { from_peer: t, conv_id: this.id, transient: !1, message: a(e) };return void 0 !== n.toClients && (i.to_peers = n.toClients), void 0 !== n.transient && (i.transient = !!n.transient), void 0 !== n.pushData && (i.push_data = n.pushData), o("rtm", "messages", null, "POST", i, r);}, broadcast: function broadcast(t, e) {var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {},s = { from_peer: t, conv_id: this.id, message: a(e) };if (void 0 !== n.pushData && (s.push = n.pushData), void 0 !== n.validTill) {var u = n.validTill;r.isDate(u) && (u = u.getTime()), n.valid_till = u;}return o("rtm", "broadcast", null, "POST", s, i);} });}, function (t, e, n) {"use strict";function r(t) {var e = t.name,n = t.value,r = t.version;this.name = e, this.value = n, this.version = r;}var i = n(0),o = n(1),s = n(2),a = s.request,u = n(3),c = u.ensureArray,l = u.parseDate,h = n(5);h.LeaderboardVersionChangeInterval = { NEVER: "never", DAY: "day", WEEK: "week", MONTH: "month" }, h.LeaderboardOrder = { ASCENDING: "ascending", DESCENDING: "descending" }, h.LeaderboardUpdateStrategy = { BETTER: "better", LAST: "last", SUM: "sum" };var f = function f(t) {var e = h._decode(t);return new r({ name: e.statisticName, value: e.statisticValue, version: e.version });};h.Leaderboard = function (t) {this.statisticName = t, this.order = void 0, this.updateStrategy = void 0, this.versionChangeInterval = void 0, this.version = void 0, this.nextResetAt = void 0, this.createdAt = void 0;};var d = h.Leaderboard;h.Leaderboard.createWithoutData = function (t) {return new d(t);}, h.Leaderboard.createLeaderboard = function (t, e) {var n = t.statisticName,r = t.order,i = t.versionChangeInterval,o = t.updateStrategy;return a({ method: "POST", path: "/leaderboard/leaderboards", data: { statisticName: n, order: r, versionChangeInterval: i, updateStrategy: o }, authOptions: e }).then(function (t) {return new d(n)._finishFetch(t);});}, h.Leaderboard.getLeaderboard = function (t, e) {return d.createWithoutData(t).fetch(e);}, h.Leaderboard.getStatistics = function (t) {var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},n = e.statisticNames,r = arguments[2];return o.resolve().then(function () {if (!t || !t.id) throw new Error("user must be an AV.User");return a({ method: "GET", path: "/leaderboard/users/" + t.id + "/statistics", query: { statistics: n ? c(n).join(",") : void 0 }, authOptions: r }).then(function (t) {return t.results.map(f);});});}, h.Leaderboard.updateStatistics = function (t, e) {var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};return o.resolve().then(function () {if (!t || !t.id) throw new Error("user must be an AV.User");var r = i.map(e, function (t, e) {return { statisticName: e, statisticValue: t };}),o = n.overwrite;return a({ method: "POST", path: "/leaderboard/users/" + t.id + "/statistics", query: { overwrite: o ? 1 : void 0 }, data: r, authOptions: n }).then(function (t) {return t.results.map(f);});});}, h.Leaderboard.deleteStatistics = function (t, e, n) {return o.resolve().then(function () {if (!t || !t.id) throw new Error("user must be an AV.User");return a({ method: "DELETE", path: "/leaderboard/users/" + t.id + "/statistics", query: { statistics: c(e).join(",") }, authOptions: n }).then(function () {});});}, i.extend(d.prototype, { _finishFetch: function _finishFetch(t) {var e = this;return i.forEach(t, function (t, n) {"updatedAt" !== n && "objectId" !== n && ("expiredAt" === n && (n = "nextResetAt"), "createdAt" === n && (t = l(t)), t && "Date" === t.__type && (t = l(t.iso)), e[n] = t);}), this;}, fetch: function fetch(t) {var e = this;return a({ method: "GET", path: "/leaderboard/leaderboards/" + this.statisticName, authOptions: t }).then(function (t) {return e._finishFetch(t);});}, count: function count() {var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},e = t.version,n = arguments[1];return a({ method: "GET", path: "/leaderboard/leaderboards/" + this.statisticName + "/ranks", query: { count: 1, limit: 0, version: e }, authOptions: n }).then(function (t) {return t.count;});}, _getResults: function _getResults(t, e, n) {var r = t.skip,o = t.limit,s = t.selectUserKeys,u = t.includeUserKeys,l = t.includeStatistics,d = t.version;return a({ method: "GET", path: "/leaderboard/leaderboards/" + this.statisticName + "/ranks" + (n ? "/" + n : ""), query: { skip: r, limit: o, selectUserKeys: i.union(c(s), c(u)).join(",") || void 0, includeUser: u ? c(u).join(",") : void 0, includeStatistics: l ? c(l).join(",") : void 0, version: d }, authOptions: e }).then(function (t) {return t.results.map(function (t) {var e = h._decode(t),n = e.user,r = e.statisticValue,i = e.rank,o = e.statistics;return { user: n, value: r, rank: i, includedStatistics: (void 0 === o ? [] : o).map(f) };});});}, getResults: function getResults() {var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},e = t.skip,n = t.limit,r = t.selectUserKeys,i = t.includeUserKeys,o = t.includeStatistics,s = t.version,a = arguments[1];return this._getResults({ skip: e, limit: n, selectUserKeys: r, includeUserKeys: i, includeStatistics: o, version: s }, a);}, getResultsAroundUser: function getResultsAroundUser(t) {var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},n = arguments[2];if (t && "string" != typeof t.id) return this.getResultsAroundUser(void 0, t, e);var r = e.limit,i = e.selectUserKeys,o = e.includeUserKeys,s = e.includeStatistics,a = e.version;return this._getResults({ limit: r, selectUserKeys: i, includeUserKeys: o, includeStatistics: s, version: a }, n, t ? t.id : "self");}, _update: function _update(t, e) {var n = this;return a({ method: "PUT", path: "/leaderboard/leaderboards/" + this.statisticName, data: t, authOptions: e }).then(function (t) {return n._finishFetch(t);});}, updateVersionChangeInterval: function updateVersionChangeInterval(t, e) {return this._update({ versionChangeInterval: t }, e);}, updateUpdateStrategy: function updateUpdateStrategy(t, e) {return this._update({ updateStrategy: t }, e);}, reset: function reset(t) {var e = this;return a({ method: "PUT", path: "/leaderboard/leaderboards/" + this.statisticName + "/incrementVersion", authOptions: t }).then(function (t) {return e._finishFetch(t);});}, destroy: function destroy(t) {return h.request({ method: "DELETE", path: "/leaderboard/leaderboards/" + this.statisticName, authOptions: t }).then(function () {});}, getArchives: function getArchives() {var t = this,e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},n = e.skip,r = e.limit,i = arguments[1];return a({ method: "GET", path: "/leaderboard/leaderboards/" + this.statisticName + "/archives", query: { skip: n, limit: r }, authOptions: i }).then(function (e) {return e.results.map(function (e) {var n = e.version,r = e.status,i = e.url,o = e.activatedAt,s = e.deactivatedAt;return { statisticName: t.statisticName, version: n, status: r, url: i, activatedAt: l(o.iso), deactivatedAt: l(s.iso) };});});} });}]);});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/node-libs-browser/mock/process.js */ 22)))

/***/ }),

/***/ 22:
/*!********************************************************!*\
  !*** ./node_modules/node-libs-browser/mock/process.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports.nextTick = function nextTick(fn) {
    var args = Array.prototype.slice.call(arguments);
    args.shift();
    setTimeout(function () {
        fn.apply(null, args);
    }, 0);
};

exports.platform = exports.arch = 
exports.execPath = exports.title = 'browser';
exports.pid = 1;
exports.browser = true;
exports.env = {};
exports.argv = [];

exports.binding = function (name) {
	throw new Error('No such module. (Possibly not yet loaded)')
};

(function () {
    var cwd = '/';
    var path;
    exports.cwd = function () { return cwd };
    exports.chdir = function (dir) {
        if (!path) path = __webpack_require__(/*! path */ 23);
        cwd = path.resolve(dir, cwd);
    };
})();

exports.exit = exports.kill = 
exports.umask = exports.dlopen = 
exports.uptime = exports.memoryUsage = 
exports.uvCounters = function() {};
exports.features = {};


/***/ }),

/***/ 23:
/*!***********************************************!*\
  !*** ./node_modules/path-browserify/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,
// backported and transplited with Babel, with backwards-compat fixes

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function (path) {
  if (typeof path !== 'string') path = path + '';
  if (path.length === 0) return '.';
  var code = path.charCodeAt(0);
  var hasRoot = code === 47 /*/*/;
  var end = -1;
  var matchedSlash = true;
  for (var i = path.length - 1; i >= 1; --i) {
    code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        if (!matchedSlash) {
          end = i;
          break;
        }
      } else {
      // We saw the first non-path separator
      matchedSlash = false;
    }
  }

  if (end === -1) return hasRoot ? '/' : '.';
  if (hasRoot && end === 1) {
    // return '//';
    // Backwards-compat fix:
    return '/';
  }
  return path.slice(0, end);
};

function basename(path) {
  if (typeof path !== 'string') path = path + '';

  var start = 0;
  var end = -1;
  var matchedSlash = true;
  var i;

  for (i = path.length - 1; i >= 0; --i) {
    if (path.charCodeAt(i) === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          start = i + 1;
          break;
        }
      } else if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // path component
      matchedSlash = false;
      end = i + 1;
    }
  }

  if (end === -1) return '';
  return path.slice(start, end);
}

// Uses a mixed approach for backwards-compatibility, as ext behavior changed
// in new Node.js versions, so only basename() above is backported here
exports.basename = function (path, ext) {
  var f = basename(path);
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};

exports.extname = function (path) {
  if (typeof path !== 'string') path = path + '';
  var startDot = -1;
  var startPart = 0;
  var end = -1;
  var matchedSlash = true;
  // Track the state of characters (if any) we see before our first dot and
  // after any path separator we find
  var preDotState = 0;
  for (var i = path.length - 1; i >= 0; --i) {
    var code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          startPart = i + 1;
          break;
        }
        continue;
      }
    if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // extension
      matchedSlash = false;
      end = i + 1;
    }
    if (code === 46 /*.*/) {
        // If this is our first dot, mark it as the start of our extension
        if (startDot === -1)
          startDot = i;
        else if (preDotState !== 1)
          preDotState = 1;
    } else if (startDot !== -1) {
      // We saw a non-dot and non-path separator before our dot, so we should
      // have a good chance at having a non-empty extension
      preDotState = -1;
    }
  }

  if (startDot === -1 || end === -1 ||
      // We saw a non-dot character immediately before the dot
      preDotState === 0 ||
      // The (right-most) trimmed path component is exactly '..'
      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return '';
  }
  return path.slice(startDot, end);
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node-libs-browser/mock/process.js */ 22)))

/***/ }),

/***/ 262:
/*!*************************************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/watchapp-frontend/node_modules/@dcloudio/uni-ui/lib/uni-swipe-action-item/mpwxs.js ***!
  \*************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(uni) {Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _default = {
  data: function data() {
    return {
      position: [],
      button: [] };

  },
  computed: {
    pos: function pos() {
      return JSON.stringify(this.position);
    },
    btn: function btn() {
      return JSON.stringify(this.button);
    } },

  watch: {
    show: function show(newVal) {
      if (this.autoClose) return;
      var valueObj = this.position[0];
      if (!valueObj) {
        this.init();
        return;
      }
      valueObj.show = newVal;
      this.$set(this.position, 0, valueObj);
    } },

  created: function created() {
    if (this.swipeaction.children !== undefined) {
      this.swipeaction.children.push(this);
    }
  },
  mounted: function mounted() {
    this.init();

  },
  beforeDestroy: function beforeDestroy() {var _this = this;
    this.swipeaction.children.forEach(function (item, index) {
      if (item === _this) {
        _this.swipeaction.children.splice(index, 1);
      }
    });
  },
  methods: {
    init: function init() {var _this2 = this;

      setTimeout(function () {
        _this2.getSize();
        _this2.getButtonSize();
      }, 50);
    },
    closeSwipe: function closeSwipe(e) {
      if (!this.autoClose) return;
      this.swipeaction.closeOther(this);
    },

    change: function change(e) {
      this.$emit('change', e.open);
      var valueObj = this.position[0];
      if (valueObj.show !== e.open) {
        valueObj.show = e.open;
        this.$set(this.position, 0, valueObj);
      }
    },
    onClick: function onClick(index, item) {
      this.$emit('click', {
        content: item,
        index: index });

    },
    getSize: function getSize() {var _this3 = this;
      var views = uni.createSelectorQuery().in(this);
      views.
      selectAll('.selector-query-hock').
      boundingClientRect(function (data) {
        if (_this3.autoClose) {
          data[0].show = false;
        } else {
          data[0].show = _this3.show;
        }
        _this3.position = data;
      }).
      exec();
    },
    getButtonSize: function getButtonSize() {var _this4 = this;
      var views = uni.createSelectorQuery().in(this);
      views.
      selectAll('.button-hock').
      boundingClientRect(function (data) {
        _this4.button = data;
      }).
      exec();
    } } };exports.default = _default;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-mp-weixin/dist/index.js */ 1)["default"]))

/***/ }),

/***/ 277:
/*!**************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/watchapp-frontend/components/uni-icons/icons.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _default = {
  'contact': "\uE100",
  'person': "\uE101",
  'personadd': "\uE102",
  'contact-filled': "\uE130",
  'person-filled': "\uE131",
  'personadd-filled': "\uE132",
  'phone': "\uE200",
  'email': "\uE201",
  'chatbubble': "\uE202",
  'chatboxes': "\uE203",
  'phone-filled': "\uE230",
  'email-filled': "\uE231",
  'chatbubble-filled': "\uE232",
  'chatboxes-filled': "\uE233",
  'weibo': "\uE260",
  'weixin': "\uE261",
  'pengyouquan': "\uE262",
  'chat': "\uE263",
  'qq': "\uE264",
  'videocam': "\uE300",
  'camera': "\uE301",
  'mic': "\uE302",
  'location': "\uE303",
  'mic-filled': "\uE332",
  'speech': "\uE332",
  'location-filled': "\uE333",
  'micoff': "\uE360",
  'image': "\uE363",
  'map': "\uE364",
  'compose': "\uE400",
  'trash': "\uE401",
  'upload': "\uE402",
  'download': "\uE403",
  'close': "\uE404",
  'redo': "\uE405",
  'undo': "\uE406",
  'refresh': "\uE407",
  'star': "\uE408",
  'plus': "\uE409",
  'minus': "\uE410",
  'circle': "\uE411",
  'checkbox': "\uE411",
  'close-filled': "\uE434",
  'clear': "\uE434",
  'refresh-filled': "\uE437",
  'star-filled': "\uE438",
  'plus-filled': "\uE439",
  'minus-filled': "\uE440",
  'circle-filled': "\uE441",
  'checkbox-filled': "\uE442",
  'closeempty': "\uE460",
  'refreshempty': "\uE461",
  'reload': "\uE462",
  'starhalf': "\uE463",
  'spinner': "\uE464",
  'spinner-cycle': "\uE465",
  'search': "\uE466",
  'plusempty': "\uE468",
  'forward': "\uE470",
  'back': "\uE471",
  'left-nav': "\uE471",
  'checkmarkempty': "\uE472",
  'home': "\uE500",
  'navigate': "\uE501",
  'gear': "\uE502",
  'paperplane': "\uE503",
  'info': "\uE504",
  'help': "\uE505",
  'locked': "\uE506",
  'more': "\uE507",
  'flag': "\uE508",
  'home-filled': "\uE530",
  'gear-filled': "\uE532",
  'info-filled': "\uE534",
  'help-filled': "\uE535",
  'more-filled': "\uE537",
  'settings': "\uE560",
  'list': "\uE562",
  'bars': "\uE563",
  'loop': "\uE565",
  'paperclip': "\uE567",
  'eye': "\uE568",
  'arrowup': "\uE580",
  'arrowdown': "\uE581",
  'arrowleft': "\uE582",
  'arrowright': "\uE583",
  'arrowthinup': "\uE584",
  'arrowthindown': "\uE585",
  'arrowthinleft': "\uE586",
  'arrowthinright': "\uE587",
  'pulldown': "\uE588",
  'closefill': "\uE589",
  'sound': "\uE590",
  'scan': "\uE612" };exports.default = _default;

/***/ }),

/***/ 285:
/*!*************************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/watchapp-frontend/node_modules/@dcloudio/uni-ui/lib/uni-icons/icons.js ***!
  \*************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _default = {
  'contact': "\uE100",
  'person': "\uE101",
  'personadd': "\uE102",
  'contact-filled': "\uE130",
  'person-filled': "\uE131",
  'personadd-filled': "\uE132",
  'phone': "\uE200",
  'email': "\uE201",
  'chatbubble': "\uE202",
  'chatboxes': "\uE203",
  'phone-filled': "\uE230",
  'email-filled': "\uE231",
  'chatbubble-filled': "\uE232",
  'chatboxes-filled': "\uE233",
  'weibo': "\uE260",
  'weixin': "\uE261",
  'pengyouquan': "\uE262",
  'chat': "\uE263",
  'qq': "\uE264",
  'videocam': "\uE300",
  'camera': "\uE301",
  'mic': "\uE302",
  'location': "\uE303",
  'mic-filled': "\uE332",
  'speech': "\uE332",
  'location-filled': "\uE333",
  'micoff': "\uE360",
  'image': "\uE363",
  'map': "\uE364",
  'compose': "\uE400",
  'trash': "\uE401",
  'upload': "\uE402",
  'download': "\uE403",
  'close': "\uE404",
  'redo': "\uE405",
  'undo': "\uE406",
  'refresh': "\uE407",
  'star': "\uE408",
  'plus': "\uE409",
  'minus': "\uE410",
  'circle': "\uE411",
  'checkbox': "\uE411",
  'close-filled': "\uE434",
  'clear': "\uE434",
  'refresh-filled': "\uE437",
  'star-filled': "\uE438",
  'plus-filled': "\uE439",
  'minus-filled': "\uE440",
  'circle-filled': "\uE441",
  'checkbox-filled': "\uE442",
  'closeempty': "\uE460",
  'refreshempty': "\uE461",
  'reload': "\uE462",
  'starhalf': "\uE463",
  'spinner': "\uE464",
  'spinner-cycle': "\uE465",
  'search': "\uE466",
  'plusempty': "\uE468",
  'forward': "\uE470",
  'back': "\uE471",
  'left-nav': "\uE471",
  'checkmarkempty': "\uE472",
  'home': "\uE500",
  'navigate': "\uE501",
  'gear': "\uE502",
  'paperplane': "\uE503",
  'info': "\uE504",
  'help': "\uE505",
  'locked': "\uE506",
  'more': "\uE507",
  'flag': "\uE508",
  'home-filled': "\uE530",
  'gear-filled': "\uE532",
  'info-filled': "\uE534",
  'help-filled': "\uE535",
  'more-filled': "\uE537",
  'settings': "\uE560",
  'list': "\uE562",
  'bars': "\uE563",
  'loop': "\uE565",
  'paperclip': "\uE567",
  'eye': "\uE568",
  'arrowup': "\uE580",
  'arrowdown': "\uE581",
  'arrowleft': "\uE582",
  'arrowright': "\uE583",
  'arrowthinup': "\uE584",
  'arrowthindown': "\uE585",
  'arrowthinleft': "\uE586",
  'arrowthinright': "\uE587",
  'pulldown': "\uE588",
  'closefill': "\uE589",
  'sound': "\uE590",
  'scan': "\uE612" };exports.default = _default;

/***/ }),

/***/ 3:
/*!******************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/mp-vue/dist/mp.runtime.esm.js ***!
  \******************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * Vue.js v2.6.11
 * (c) 2014-2021 Evan You
 * Released under the MIT License.
 */
/*  */

var emptyObject = Object.freeze({});

// These helpers produce better VM code in JS engines due to their
// explicitness and function inlining.
function isUndef (v) {
  return v === undefined || v === null
}

function isDef (v) {
  return v !== undefined && v !== null
}

function isTrue (v) {
  return v === true
}

function isFalse (v) {
  return v === false
}

/**
 * Check if value is primitive.
 */
function isPrimitive (value) {
  return (
    typeof value === 'string' ||
    typeof value === 'number' ||
    // $flow-disable-line
    typeof value === 'symbol' ||
    typeof value === 'boolean'
  )
}

/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */
function isObject (obj) {
  return obj !== null && typeof obj === 'object'
}

/**
 * Get the raw type string of a value, e.g., [object Object].
 */
var _toString = Object.prototype.toString;

function toRawType (value) {
  return _toString.call(value).slice(8, -1)
}

/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */
function isPlainObject (obj) {
  return _toString.call(obj) === '[object Object]'
}

function isRegExp (v) {
  return _toString.call(v) === '[object RegExp]'
}

/**
 * Check if val is a valid array index.
 */
function isValidArrayIndex (val) {
  var n = parseFloat(String(val));
  return n >= 0 && Math.floor(n) === n && isFinite(val)
}

function isPromise (val) {
  return (
    isDef(val) &&
    typeof val.then === 'function' &&
    typeof val.catch === 'function'
  )
}

/**
 * Convert a value to a string that is actually rendered.
 */
function toString (val) {
  return val == null
    ? ''
    : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)
      ? JSON.stringify(val, null, 2)
      : String(val)
}

/**
 * Convert an input value to a number for persistence.
 * If the conversion fails, return original string.
 */
function toNumber (val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n
}

/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */
function makeMap (
  str,
  expectsLowerCase
) {
  var map = Object.create(null);
  var list = str.split(',');
  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }
  return expectsLowerCase
    ? function (val) { return map[val.toLowerCase()]; }
    : function (val) { return map[val]; }
}

/**
 * Check if a tag is a built-in tag.
 */
var isBuiltInTag = makeMap('slot,component', true);

/**
 * Check if an attribute is a reserved attribute.
 */
var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');

/**
 * Remove an item from an array.
 */
function remove (arr, item) {
  if (arr.length) {
    var index = arr.indexOf(item);
    if (index > -1) {
      return arr.splice(index, 1)
    }
  }
}

/**
 * Check whether an object has the property.
 */
var hasOwnProperty = Object.prototype.hasOwnProperty;
function hasOwn (obj, key) {
  return hasOwnProperty.call(obj, key)
}

/**
 * Create a cached version of a pure function.
 */
function cached (fn) {
  var cache = Object.create(null);
  return (function cachedFn (str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str))
  })
}

/**
 * Camelize a hyphen-delimited string.
 */
var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })
});

/**
 * Capitalize a string.
 */
var capitalize = cached(function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1)
});

/**
 * Hyphenate a camelCase string.
 */
var hyphenateRE = /\B([A-Z])/g;
var hyphenate = cached(function (str) {
  return str.replace(hyphenateRE, '-$1').toLowerCase()
});

/**
 * Simple bind polyfill for environments that do not support it,
 * e.g., PhantomJS 1.x. Technically, we don't need this anymore
 * since native bind is now performant enough in most browsers.
 * But removing it would mean breaking code that was able to run in
 * PhantomJS 1.x, so this must be kept for backward compatibility.
 */

/* istanbul ignore next */
function polyfillBind (fn, ctx) {
  function boundFn (a) {
    var l = arguments.length;
    return l
      ? l > 1
        ? fn.apply(ctx, arguments)
        : fn.call(ctx, a)
      : fn.call(ctx)
  }

  boundFn._length = fn.length;
  return boundFn
}

function nativeBind (fn, ctx) {
  return fn.bind(ctx)
}

var bind = Function.prototype.bind
  ? nativeBind
  : polyfillBind;

/**
 * Convert an Array-like object to a real Array.
 */
function toArray (list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);
  while (i--) {
    ret[i] = list[i + start];
  }
  return ret
}

/**
 * Mix properties into target object.
 */
function extend (to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }
  return to
}

/**
 * Merge an Array of Objects into a single Object.
 */
function toObject (arr) {
  var res = {};
  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }
  return res
}

/* eslint-disable no-unused-vars */

/**
 * Perform no operation.
 * Stubbing args to make Flow happy without leaving useless transpiled code
 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).
 */
function noop (a, b, c) {}

/**
 * Always return false.
 */
var no = function (a, b, c) { return false; };

/* eslint-enable no-unused-vars */

/**
 * Return the same value.
 */
var identity = function (_) { return _; };

/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */
function looseEqual (a, b) {
  if (a === b) { return true }
  var isObjectA = isObject(a);
  var isObjectB = isObject(b);
  if (isObjectA && isObjectB) {
    try {
      var isArrayA = Array.isArray(a);
      var isArrayB = Array.isArray(b);
      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i])
        })
      } else if (a instanceof Date && b instanceof Date) {
        return a.getTime() === b.getTime()
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key])
        })
      } else {
        /* istanbul ignore next */
        return false
      }
    } catch (e) {
      /* istanbul ignore next */
      return false
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b)
  } else {
    return false
  }
}

/**
 * Return the first index at which a loosely equal value can be
 * found in the array (if value is a plain object, the array must
 * contain an object of the same shape), or -1 if it is not present.
 */
function looseIndexOf (arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val)) { return i }
  }
  return -1
}

/**
 * Ensure a function is called only once.
 */
function once (fn) {
  var called = false;
  return function () {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  }
}

var ASSET_TYPES = [
  'component',
  'directive',
  'filter'
];

var LIFECYCLE_HOOKS = [
  'beforeCreate',
  'created',
  'beforeMount',
  'mounted',
  'beforeUpdate',
  'updated',
  'beforeDestroy',
  'destroyed',
  'activated',
  'deactivated',
  'errorCaptured',
  'serverPrefetch'
];

/*  */



var config = ({
  /**
   * Option merge strategies (used in core/util/options)
   */
  // $flow-disable-line
  optionMergeStrategies: Object.create(null),

  /**
   * Whether to suppress warnings.
   */
  silent: false,

  /**
   * Show production mode tip message on boot?
   */
  productionTip: "development" !== 'production',

  /**
   * Whether to enable devtools
   */
  devtools: "development" !== 'production',

  /**
   * Whether to record perf
   */
  performance: false,

  /**
   * Error handler for watcher errors
   */
  errorHandler: null,

  /**
   * Warn handler for watcher warns
   */
  warnHandler: null,

  /**
   * Ignore certain custom elements
   */
  ignoredElements: [],

  /**
   * Custom user key aliases for v-on
   */
  // $flow-disable-line
  keyCodes: Object.create(null),

  /**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */
  isReservedTag: no,

  /**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */
  isReservedAttr: no,

  /**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */
  isUnknownElement: no,

  /**
   * Get the namespace of an element
   */
  getTagNamespace: noop,

  /**
   * Parse the real tag name for the specific platform.
   */
  parsePlatformTagName: identity,

  /**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */
  mustUseProp: no,

  /**
   * Perform updates asynchronously. Intended to be used by Vue Test Utils
   * This will significantly reduce performance if set to false.
   */
  async: true,

  /**
   * Exposed for legacy reasons
   */
  _lifecycleHooks: LIFECYCLE_HOOKS
});

/*  */

/**
 * unicode letters used for parsing html tags, component names and property paths.
 * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname
 * skipping \u10000-\uEFFFF due to it freezing up PhantomJS
 */
var unicodeRegExp = /a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;

/**
 * Check if a string starts with $ or _
 */
function isReserved (str) {
  var c = (str + '').charCodeAt(0);
  return c === 0x24 || c === 0x5F
}

/**
 * Define a property.
 */
function def (obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}

/**
 * Parse simple path.
 */
var bailRE = new RegExp(("[^" + (unicodeRegExp.source) + ".$_\\d]"));
function parsePath (path) {
  if (bailRE.test(path)) {
    return
  }
  var segments = path.split('.');
  return function (obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj) { return }
      obj = obj[segments[i]];
    }
    return obj
  }
}

/*  */

// can we use __proto__?
var hasProto = '__proto__' in {};

// Browser environment sniffing
var inBrowser = typeof window !== 'undefined';
var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
var isEdge = UA && UA.indexOf('edge/') > 0;
var isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');
var isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');
var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;
var isPhantomJS = UA && /phantomjs/.test(UA);
var isFF = UA && UA.match(/firefox\/(\d+)/);

// Firefox has a "watch" function on Object.prototype...
var nativeWatch = ({}).watch;
if (inBrowser) {
  try {
    var opts = {};
    Object.defineProperty(opts, 'passive', ({
      get: function get () {
      }
    })); // https://github.com/facebook/flow/issues/285
    window.addEventListener('test-passive', null, opts);
  } catch (e) {}
}

// this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV
var _isServer;
var isServerRendering = function () {
  if (_isServer === undefined) {
    /* istanbul ignore if */
    if (!inBrowser && !inWeex && typeof global !== 'undefined') {
      // detect presence of vue-server-renderer and avoid
      // Webpack shimming the process
      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';
    } else {
      _isServer = false;
    }
  }
  return _isServer
};

// detect devtools
var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

/* istanbul ignore next */
function isNative (Ctor) {
  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())
}

var hasSymbol =
  typeof Symbol !== 'undefined' && isNative(Symbol) &&
  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

var _Set;
/* istanbul ignore if */ // $flow-disable-line
if (typeof Set !== 'undefined' && isNative(Set)) {
  // use native Set when available.
  _Set = Set;
} else {
  // a non-standard Set polyfill that only works with primitive keys.
  _Set = /*@__PURE__*/(function () {
    function Set () {
      this.set = Object.create(null);
    }
    Set.prototype.has = function has (key) {
      return this.set[key] === true
    };
    Set.prototype.add = function add (key) {
      this.set[key] = true;
    };
    Set.prototype.clear = function clear () {
      this.set = Object.create(null);
    };

    return Set;
  }());
}

/*  */

var warn = noop;
var tip = noop;
var generateComponentTrace = (noop); // work around flow check
var formatComponentName = (noop);

if (true) {
  var hasConsole = typeof console !== 'undefined';
  var classifyRE = /(?:^|[-_])(\w)/g;
  var classify = function (str) { return str
    .replace(classifyRE, function (c) { return c.toUpperCase(); })
    .replace(/[-_]/g, ''); };

  warn = function (msg, vm) {
    var trace = vm ? generateComponentTrace(vm) : '';

    if (config.warnHandler) {
      config.warnHandler.call(null, msg, vm, trace);
    } else if (hasConsole && (!config.silent)) {
      console.error(("[Vue warn]: " + msg + trace));
    }
  };

  tip = function (msg, vm) {
    if (hasConsole && (!config.silent)) {
      console.warn("[Vue tip]: " + msg + (
        vm ? generateComponentTrace(vm) : ''
      ));
    }
  };

  formatComponentName = function (vm, includeFile) {
    if (vm.$root === vm) {
      if (vm.$options && vm.$options.__file) { // fixed by xxxxxx
        return ('') + vm.$options.__file
      }
      return '<Root>'
    }
    var options = typeof vm === 'function' && vm.cid != null
      ? vm.options
      : vm._isVue
        ? vm.$options || vm.constructor.options
        : vm;
    var name = options.name || options._componentTag;
    var file = options.__file;
    if (!name && file) {
      var match = file.match(/([^/\\]+)\.vue$/);
      name = match && match[1];
    }

    return (
      (name ? ("<" + (classify(name)) + ">") : "<Anonymous>") +
      (file && includeFile !== false ? (" at " + file) : '')
    )
  };

  var repeat = function (str, n) {
    var res = '';
    while (n) {
      if (n % 2 === 1) { res += str; }
      if (n > 1) { str += str; }
      n >>= 1;
    }
    return res
  };

  generateComponentTrace = function (vm) {
    if (vm._isVue && vm.$parent) {
      var tree = [];
      var currentRecursiveSequence = 0;
      while (vm && vm.$options.name !== 'PageBody') {
        if (tree.length > 0) {
          var last = tree[tree.length - 1];
          if (last.constructor === vm.constructor) {
            currentRecursiveSequence++;
            vm = vm.$parent;
            continue
          } else if (currentRecursiveSequence > 0) {
            tree[tree.length - 1] = [last, currentRecursiveSequence];
            currentRecursiveSequence = 0;
          }
        }
        !vm.$options.isReserved && tree.push(vm);
        vm = vm.$parent;
      }
      return '\n\nfound in\n\n' + tree
        .map(function (vm, i) { return ("" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)
            ? ((formatComponentName(vm[0])) + "... (" + (vm[1]) + " recursive calls)")
            : formatComponentName(vm))); })
        .join('\n')
    } else {
      return ("\n\n(found in " + (formatComponentName(vm)) + ")")
    }
  };
}

/*  */

var uid = 0;

/**
 * A dep is an observable that can have multiple
 * directives subscribing to it.
 */
var Dep = function Dep () {
  this.id = uid++;
  this.subs = [];
};

Dep.prototype.addSub = function addSub (sub) {
  this.subs.push(sub);
};

Dep.prototype.removeSub = function removeSub (sub) {
  remove(this.subs, sub);
};

Dep.prototype.depend = function depend () {
  if (Dep.SharedObject.target) {
    Dep.SharedObject.target.addDep(this);
  }
};

Dep.prototype.notify = function notify () {
  // stabilize the subscriber list first
  var subs = this.subs.slice();
  if ( true && !config.async) {
    // subs aren't sorted in scheduler if not running async
    // we need to sort them now to make sure they fire in correct
    // order
    subs.sort(function (a, b) { return a.id - b.id; });
  }
  for (var i = 0, l = subs.length; i < l; i++) {
    subs[i].update();
  }
};

// The current target watcher being evaluated.
// This is globally unique because only one watcher
// can be evaluated at a time.
// fixed by xxxxxx (nvue shared vuex)
/* eslint-disable no-undef */
Dep.SharedObject = {};
Dep.SharedObject.target = null;
Dep.SharedObject.targetStack = [];

function pushTarget (target) {
  Dep.SharedObject.targetStack.push(target);
  Dep.SharedObject.target = target;
  Dep.target = target;
}

function popTarget () {
  Dep.SharedObject.targetStack.pop();
  Dep.SharedObject.target = Dep.SharedObject.targetStack[Dep.SharedObject.targetStack.length - 1];
  Dep.target = Dep.SharedObject.target;
}

/*  */

var VNode = function VNode (
  tag,
  data,
  children,
  text,
  elm,
  context,
  componentOptions,
  asyncFactory
) {
  this.tag = tag;
  this.data = data;
  this.children = children;
  this.text = text;
  this.elm = elm;
  this.ns = undefined;
  this.context = context;
  this.fnContext = undefined;
  this.fnOptions = undefined;
  this.fnScopeId = undefined;
  this.key = data && data.key;
  this.componentOptions = componentOptions;
  this.componentInstance = undefined;
  this.parent = undefined;
  this.raw = false;
  this.isStatic = false;
  this.isRootInsert = true;
  this.isComment = false;
  this.isCloned = false;
  this.isOnce = false;
  this.asyncFactory = asyncFactory;
  this.asyncMeta = undefined;
  this.isAsyncPlaceholder = false;
};

var prototypeAccessors = { child: { configurable: true } };

// DEPRECATED: alias for componentInstance for backwards compat.
/* istanbul ignore next */
prototypeAccessors.child.get = function () {
  return this.componentInstance
};

Object.defineProperties( VNode.prototype, prototypeAccessors );

var createEmptyVNode = function (text) {
  if ( text === void 0 ) text = '';

  var node = new VNode();
  node.text = text;
  node.isComment = true;
  return node
};

function createTextVNode (val) {
  return new VNode(undefined, undefined, undefined, String(val))
}

// optimized shallow clone
// used for static nodes and slot nodes because they may be reused across
// multiple renders, cloning them avoids errors when DOM manipulations rely
// on their elm reference.
function cloneVNode (vnode) {
  var cloned = new VNode(
    vnode.tag,
    vnode.data,
    // #7975
    // clone children array to avoid mutating original in case of cloning
    // a child.
    vnode.children && vnode.children.slice(),
    vnode.text,
    vnode.elm,
    vnode.context,
    vnode.componentOptions,
    vnode.asyncFactory
  );
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.fnContext = vnode.fnContext;
  cloned.fnOptions = vnode.fnOptions;
  cloned.fnScopeId = vnode.fnScopeId;
  cloned.asyncMeta = vnode.asyncMeta;
  cloned.isCloned = true;
  return cloned
}

/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */

var arrayProto = Array.prototype;
var arrayMethods = Object.create(arrayProto);

var methodsToPatch = [
  'push',
  'pop',
  'shift',
  'unshift',
  'splice',
  'sort',
  'reverse'
];

/**
 * Intercept mutating methods and emit events
 */
methodsToPatch.forEach(function (method) {
  // cache original method
  var original = arrayProto[method];
  def(arrayMethods, method, function mutator () {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    var result = original.apply(this, args);
    var ob = this.__ob__;
    var inserted;
    switch (method) {
      case 'push':
      case 'unshift':
        inserted = args;
        break
      case 'splice':
        inserted = args.slice(2);
        break
    }
    if (inserted) { ob.observeArray(inserted); }
    // notify change
    ob.dep.notify();
    return result
  });
});

/*  */

var arrayKeys = Object.getOwnPropertyNames(arrayMethods);

/**
 * In some cases we may want to disable observation inside a component's
 * update computation.
 */
var shouldObserve = true;

function toggleObserving (value) {
  shouldObserve = value;
}

/**
 * Observer class that is attached to each observed
 * object. Once attached, the observer converts the target
 * object's property keys into getter/setters that
 * collect dependencies and dispatch updates.
 */
var Observer = function Observer (value) {
  this.value = value;
  this.dep = new Dep();
  this.vmCount = 0;
  def(value, '__ob__', this);
  if (Array.isArray(value)) {
    if (hasProto) {
      {// fixed by xxxxxx 微信小程序使用 plugins 之后，数组方法被直接挂载到了数组对象上，需要执行 copyAugment 逻辑
        if(value.push !== value.__proto__.push){
          copyAugment(value, arrayMethods, arrayKeys);
        } else {
          protoAugment(value, arrayMethods);
        }
      }
    } else {
      copyAugment(value, arrayMethods, arrayKeys);
    }
    this.observeArray(value);
  } else {
    this.walk(value);
  }
};

/**
 * Walk through all properties and convert them into
 * getter/setters. This method should only be called when
 * value type is Object.
 */
Observer.prototype.walk = function walk (obj) {
  var keys = Object.keys(obj);
  for (var i = 0; i < keys.length; i++) {
    defineReactive$$1(obj, keys[i]);
  }
};

/**
 * Observe a list of Array items.
 */
Observer.prototype.observeArray = function observeArray (items) {
  for (var i = 0, l = items.length; i < l; i++) {
    observe(items[i]);
  }
};

// helpers

/**
 * Augment a target Object or Array by intercepting
 * the prototype chain using __proto__
 */
function protoAugment (target, src) {
  /* eslint-disable no-proto */
  target.__proto__ = src;
  /* eslint-enable no-proto */
}

/**
 * Augment a target Object or Array by defining
 * hidden properties.
 */
/* istanbul ignore next */
function copyAugment (target, src, keys) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    def(target, key, src[key]);
  }
}

/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */
function observe (value, asRootData) {
  if (!isObject(value) || value instanceof VNode) {
    return
  }
  var ob;
  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (
    shouldObserve &&
    !isServerRendering() &&
    (Array.isArray(value) || isPlainObject(value)) &&
    Object.isExtensible(value) &&
    !value._isVue
  ) {
    ob = new Observer(value);
  }
  if (asRootData && ob) {
    ob.vmCount++;
  }
  return ob
}

/**
 * Define a reactive property on an Object.
 */
function defineReactive$$1 (
  obj,
  key,
  val,
  customSetter,
  shallow
) {
  var dep = new Dep();

  var property = Object.getOwnPropertyDescriptor(obj, key);
  if (property && property.configurable === false) {
    return
  }

  // cater for pre-defined getter/setters
  var getter = property && property.get;
  var setter = property && property.set;
  if ((!getter || setter) && arguments.length === 2) {
    val = obj[key];
  }

  var childOb = !shallow && observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter () {
      var value = getter ? getter.call(obj) : val;
      if (Dep.SharedObject.target) { // fixed by xxxxxx
        dep.depend();
        if (childOb) {
          childOb.dep.depend();
          if (Array.isArray(value)) {
            dependArray(value);
          }
        }
      }
      return value
    },
    set: function reactiveSetter (newVal) {
      var value = getter ? getter.call(obj) : val;
      /* eslint-disable no-self-compare */
      if (newVal === value || (newVal !== newVal && value !== value)) {
        return
      }
      /* eslint-enable no-self-compare */
      if ( true && customSetter) {
        customSetter();
      }
      // #7981: for accessor properties without setter
      if (getter && !setter) { return }
      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }
      childOb = !shallow && observe(newVal);
      dep.notify();
    }
  });
}

/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */
function set (target, key, val) {
  if ( true &&
    (isUndef(target) || isPrimitive(target))
  ) {
    warn(("Cannot set reactive property on undefined, null, or primitive value: " + ((target))));
  }
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val
  }
  if (key in target && !(key in Object.prototype)) {
    target[key] = val;
    return val
  }
  var ob = (target).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
     true && warn(
      'Avoid adding reactive properties to a Vue instance or its root $data ' +
      'at runtime - declare it upfront in the data option.'
    );
    return val
  }
  if (!ob) {
    target[key] = val;
    return val
  }
  defineReactive$$1(ob.value, key, val);
  ob.dep.notify();
  return val
}

/**
 * Delete a property and trigger change if necessary.
 */
function del (target, key) {
  if ( true &&
    (isUndef(target) || isPrimitive(target))
  ) {
    warn(("Cannot delete reactive property on undefined, null, or primitive value: " + ((target))));
  }
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.splice(key, 1);
    return
  }
  var ob = (target).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
     true && warn(
      'Avoid deleting properties on a Vue instance or its root $data ' +
      '- just set it to null.'
    );
    return
  }
  if (!hasOwn(target, key)) {
    return
  }
  delete target[key];
  if (!ob) {
    return
  }
  ob.dep.notify();
}

/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */
function dependArray (value) {
  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {
    e = value[i];
    e && e.__ob__ && e.__ob__.dep.depend();
    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}

/*  */

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */
var strats = config.optionMergeStrategies;

/**
 * Options with restrictions
 */
if (true) {
  strats.el = strats.propsData = function (parent, child, vm, key) {
    if (!vm) {
      warn(
        "option \"" + key + "\" can only be used during instance " +
        'creation with the `new` keyword.'
      );
    }
    return defaultStrat(parent, child)
  };
}

/**
 * Helper that recursively merges two data objects together.
 */
function mergeData (to, from) {
  if (!from) { return to }
  var key, toVal, fromVal;

  var keys = hasSymbol
    ? Reflect.ownKeys(from)
    : Object.keys(from);

  for (var i = 0; i < keys.length; i++) {
    key = keys[i];
    // in case the object is already observed...
    if (key === '__ob__') { continue }
    toVal = to[key];
    fromVal = from[key];
    if (!hasOwn(to, key)) {
      set(to, key, fromVal);
    } else if (
      toVal !== fromVal &&
      isPlainObject(toVal) &&
      isPlainObject(fromVal)
    ) {
      mergeData(toVal, fromVal);
    }
  }
  return to
}

/**
 * Data
 */
function mergeDataOrFn (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    // in a Vue.extend merge, both should be functions
    if (!childVal) {
      return parentVal
    }
    if (!parentVal) {
      return childVal
    }
    // when parentVal & childVal are both present,
    // we need to return a function that returns the
    // merged result of both functions... no need to
    // check if parentVal is a function here because
    // it has to be a function to pass previous merges.
    return function mergedDataFn () {
      return mergeData(
        typeof childVal === 'function' ? childVal.call(this, this) : childVal,
        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal
      )
    }
  } else {
    return function mergedInstanceDataFn () {
      // instance merge
      var instanceData = typeof childVal === 'function'
        ? childVal.call(vm, vm)
        : childVal;
      var defaultData = typeof parentVal === 'function'
        ? parentVal.call(vm, vm)
        : parentVal;
      if (instanceData) {
        return mergeData(instanceData, defaultData)
      } else {
        return defaultData
      }
    }
  }
}

strats.data = function (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    if (childVal && typeof childVal !== 'function') {
       true && warn(
        'The "data" option should be a function ' +
        'that returns a per-instance value in component ' +
        'definitions.',
        vm
      );

      return parentVal
    }
    return mergeDataOrFn(parentVal, childVal)
  }

  return mergeDataOrFn(parentVal, childVal, vm)
};

/**
 * Hooks and props are merged as arrays.
 */
function mergeHook (
  parentVal,
  childVal
) {
  var res = childVal
    ? parentVal
      ? parentVal.concat(childVal)
      : Array.isArray(childVal)
        ? childVal
        : [childVal]
    : parentVal;
  return res
    ? dedupeHooks(res)
    : res
}

function dedupeHooks (hooks) {
  var res = [];
  for (var i = 0; i < hooks.length; i++) {
    if (res.indexOf(hooks[i]) === -1) {
      res.push(hooks[i]);
    }
  }
  return res
}

LIFECYCLE_HOOKS.forEach(function (hook) {
  strats[hook] = mergeHook;
});

/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */
function mergeAssets (
  parentVal,
  childVal,
  vm,
  key
) {
  var res = Object.create(parentVal || null);
  if (childVal) {
     true && assertObjectType(key, childVal, vm);
    return extend(res, childVal)
  } else {
    return res
  }
}

ASSET_TYPES.forEach(function (type) {
  strats[type + 's'] = mergeAssets;
});

/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */
strats.watch = function (
  parentVal,
  childVal,
  vm,
  key
) {
  // work around Firefox's Object.prototype.watch...
  if (parentVal === nativeWatch) { parentVal = undefined; }
  if (childVal === nativeWatch) { childVal = undefined; }
  /* istanbul ignore if */
  if (!childVal) { return Object.create(parentVal || null) }
  if (true) {
    assertObjectType(key, childVal, vm);
  }
  if (!parentVal) { return childVal }
  var ret = {};
  extend(ret, parentVal);
  for (var key$1 in childVal) {
    var parent = ret[key$1];
    var child = childVal[key$1];
    if (parent && !Array.isArray(parent)) {
      parent = [parent];
    }
    ret[key$1] = parent
      ? parent.concat(child)
      : Array.isArray(child) ? child : [child];
  }
  return ret
};

/**
 * Other object hashes.
 */
strats.props =
strats.methods =
strats.inject =
strats.computed = function (
  parentVal,
  childVal,
  vm,
  key
) {
  if (childVal && "development" !== 'production') {
    assertObjectType(key, childVal, vm);
  }
  if (!parentVal) { return childVal }
  var ret = Object.create(null);
  extend(ret, parentVal);
  if (childVal) { extend(ret, childVal); }
  return ret
};
strats.provide = mergeDataOrFn;

/**
 * Default strategy.
 */
var defaultStrat = function (parentVal, childVal) {
  return childVal === undefined
    ? parentVal
    : childVal
};

/**
 * Validate component names
 */
function checkComponents (options) {
  for (var key in options.components) {
    validateComponentName(key);
  }
}

function validateComponentName (name) {
  if (!new RegExp(("^[a-zA-Z][\\-\\.0-9_" + (unicodeRegExp.source) + "]*$")).test(name)) {
    warn(
      'Invalid component name: "' + name + '". Component names ' +
      'should conform to valid custom element name in html5 specification.'
    );
  }
  if (isBuiltInTag(name) || config.isReservedTag(name)) {
    warn(
      'Do not use built-in or reserved HTML elements as component ' +
      'id: ' + name
    );
  }
}

/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */
function normalizeProps (options, vm) {
  var props = options.props;
  if (!props) { return }
  var res = {};
  var i, val, name;
  if (Array.isArray(props)) {
    i = props.length;
    while (i--) {
      val = props[i];
      if (typeof val === 'string') {
        name = camelize(val);
        res[name] = { type: null };
      } else if (true) {
        warn('props must be strings when using array syntax.');
      }
    }
  } else if (isPlainObject(props)) {
    for (var key in props) {
      val = props[key];
      name = camelize(key);
      res[name] = isPlainObject(val)
        ? val
        : { type: val };
    }
  } else if (true) {
    warn(
      "Invalid value for option \"props\": expected an Array or an Object, " +
      "but got " + (toRawType(props)) + ".",
      vm
    );
  }
  options.props = res;
}

/**
 * Normalize all injections into Object-based format
 */
function normalizeInject (options, vm) {
  var inject = options.inject;
  if (!inject) { return }
  var normalized = options.inject = {};
  if (Array.isArray(inject)) {
    for (var i = 0; i < inject.length; i++) {
      normalized[inject[i]] = { from: inject[i] };
    }
  } else if (isPlainObject(inject)) {
    for (var key in inject) {
      var val = inject[key];
      normalized[key] = isPlainObject(val)
        ? extend({ from: key }, val)
        : { from: val };
    }
  } else if (true) {
    warn(
      "Invalid value for option \"inject\": expected an Array or an Object, " +
      "but got " + (toRawType(inject)) + ".",
      vm
    );
  }
}

/**
 * Normalize raw function directives into object format.
 */
function normalizeDirectives (options) {
  var dirs = options.directives;
  if (dirs) {
    for (var key in dirs) {
      var def$$1 = dirs[key];
      if (typeof def$$1 === 'function') {
        dirs[key] = { bind: def$$1, update: def$$1 };
      }
    }
  }
}

function assertObjectType (name, value, vm) {
  if (!isPlainObject(value)) {
    warn(
      "Invalid value for option \"" + name + "\": expected an Object, " +
      "but got " + (toRawType(value)) + ".",
      vm
    );
  }
}

/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */
function mergeOptions (
  parent,
  child,
  vm
) {
  if (true) {
    checkComponents(child);
  }

  if (typeof child === 'function') {
    child = child.options;
  }

  normalizeProps(child, vm);
  normalizeInject(child, vm);
  normalizeDirectives(child);

  // Apply extends and mixins on the child options,
  // but only if it is a raw options object that isn't
  // the result of another mergeOptions call.
  // Only merged options has the _base property.
  if (!child._base) {
    if (child.extends) {
      parent = mergeOptions(parent, child.extends, vm);
    }
    if (child.mixins) {
      for (var i = 0, l = child.mixins.length; i < l; i++) {
        parent = mergeOptions(parent, child.mixins[i], vm);
      }
    }
  }

  var options = {};
  var key;
  for (key in parent) {
    mergeField(key);
  }
  for (key in child) {
    if (!hasOwn(parent, key)) {
      mergeField(key);
    }
  }
  function mergeField (key) {
    var strat = strats[key] || defaultStrat;
    options[key] = strat(parent[key], child[key], vm, key);
  }
  return options
}

/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */
function resolveAsset (
  options,
  type,
  id,
  warnMissing
) {
  /* istanbul ignore if */
  if (typeof id !== 'string') {
    return
  }
  var assets = options[type];
  // check local registration variations first
  if (hasOwn(assets, id)) { return assets[id] }
  var camelizedId = camelize(id);
  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }
  var PascalCaseId = capitalize(camelizedId);
  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }
  // fallback to prototype chain
  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
  if ( true && warnMissing && !res) {
    warn(
      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,
      options
    );
  }
  return res
}

/*  */



function validateProp (
  key,
  propOptions,
  propsData,
  vm
) {
  var prop = propOptions[key];
  var absent = !hasOwn(propsData, key);
  var value = propsData[key];
  // boolean casting
  var booleanIndex = getTypeIndex(Boolean, prop.type);
  if (booleanIndex > -1) {
    if (absent && !hasOwn(prop, 'default')) {
      value = false;
    } else if (value === '' || value === hyphenate(key)) {
      // only cast empty string / same name to boolean if
      // boolean has higher priority
      var stringIndex = getTypeIndex(String, prop.type);
      if (stringIndex < 0 || booleanIndex < stringIndex) {
        value = true;
      }
    }
  }
  // check default value
  if (value === undefined) {
    value = getPropDefaultValue(vm, prop, key);
    // since the default value is a fresh copy,
    // make sure to observe it.
    var prevShouldObserve = shouldObserve;
    toggleObserving(true);
    observe(value);
    toggleObserving(prevShouldObserve);
  }
  if (
    true
  ) {
    assertProp(prop, key, value, vm, absent);
  }
  return value
}

/**
 * Get the default value of a prop.
 */
function getPropDefaultValue (vm, prop, key) {
  // no default, return undefined
  if (!hasOwn(prop, 'default')) {
    return undefined
  }
  var def = prop.default;
  // warn against non-factory defaults for Object & Array
  if ( true && isObject(def)) {
    warn(
      'Invalid default value for prop "' + key + '": ' +
      'Props with type Object/Array must use a factory function ' +
      'to return the default value.',
      vm
    );
  }
  // the raw prop value was also undefined from previous render,
  // return previous default value to avoid unnecessary watcher trigger
  if (vm && vm.$options.propsData &&
    vm.$options.propsData[key] === undefined &&
    vm._props[key] !== undefined
  ) {
    return vm._props[key]
  }
  // call factory function for non-Function types
  // a value is Function if its prototype is function even across different execution context
  return typeof def === 'function' && getType(prop.type) !== 'Function'
    ? def.call(vm)
    : def
}

/**
 * Assert whether a prop is valid.
 */
function assertProp (
  prop,
  name,
  value,
  vm,
  absent
) {
  if (prop.required && absent) {
    warn(
      'Missing required prop: "' + name + '"',
      vm
    );
    return
  }
  if (value == null && !prop.required) {
    return
  }
  var type = prop.type;
  var valid = !type || type === true;
  var expectedTypes = [];
  if (type) {
    if (!Array.isArray(type)) {
      type = [type];
    }
    for (var i = 0; i < type.length && !valid; i++) {
      var assertedType = assertType(value, type[i]);
      expectedTypes.push(assertedType.expectedType || '');
      valid = assertedType.valid;
    }
  }

  if (!valid) {
    warn(
      getInvalidTypeMessage(name, value, expectedTypes),
      vm
    );
    return
  }
  var validator = prop.validator;
  if (validator) {
    if (!validator(value)) {
      warn(
        'Invalid prop: custom validator check failed for prop "' + name + '".',
        vm
      );
    }
  }
}

var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

function assertType (value, type) {
  var valid;
  var expectedType = getType(type);
  if (simpleCheckRE.test(expectedType)) {
    var t = typeof value;
    valid = t === expectedType.toLowerCase();
    // for primitive wrapper objects
    if (!valid && t === 'object') {
      valid = value instanceof type;
    }
  } else if (expectedType === 'Object') {
    valid = isPlainObject(value);
  } else if (expectedType === 'Array') {
    valid = Array.isArray(value);
  } else {
    valid = value instanceof type;
  }
  return {
    valid: valid,
    expectedType: expectedType
  }
}

/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */
function getType (fn) {
  var match = fn && fn.toString().match(/^\s*function (\w+)/);
  return match ? match[1] : ''
}

function isSameType (a, b) {
  return getType(a) === getType(b)
}

function getTypeIndex (type, expectedTypes) {
  if (!Array.isArray(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1
  }
  for (var i = 0, len = expectedTypes.length; i < len; i++) {
    if (isSameType(expectedTypes[i], type)) {
      return i
    }
  }
  return -1
}

function getInvalidTypeMessage (name, value, expectedTypes) {
  var message = "Invalid prop: type check failed for prop \"" + name + "\"." +
    " Expected " + (expectedTypes.map(capitalize).join(', '));
  var expectedType = expectedTypes[0];
  var receivedType = toRawType(value);
  var expectedValue = styleValue(value, expectedType);
  var receivedValue = styleValue(value, receivedType);
  // check if we need to specify expected value
  if (expectedTypes.length === 1 &&
      isExplicable(expectedType) &&
      !isBoolean(expectedType, receivedType)) {
    message += " with value " + expectedValue;
  }
  message += ", got " + receivedType + " ";
  // check if we need to specify received value
  if (isExplicable(receivedType)) {
    message += "with value " + receivedValue + ".";
  }
  return message
}

function styleValue (value, type) {
  if (type === 'String') {
    return ("\"" + value + "\"")
  } else if (type === 'Number') {
    return ("" + (Number(value)))
  } else {
    return ("" + value)
  }
}

function isExplicable (value) {
  var explicitTypes = ['string', 'number', 'boolean'];
  return explicitTypes.some(function (elem) { return value.toLowerCase() === elem; })
}

function isBoolean () {
  var args = [], len = arguments.length;
  while ( len-- ) args[ len ] = arguments[ len ];

  return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })
}

/*  */

function handleError (err, vm, info) {
  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.
  // See: https://github.com/vuejs/vuex/issues/1505
  pushTarget();
  try {
    if (vm) {
      var cur = vm;
      while ((cur = cur.$parent)) {
        var hooks = cur.$options.errorCaptured;
        if (hooks) {
          for (var i = 0; i < hooks.length; i++) {
            try {
              var capture = hooks[i].call(cur, err, vm, info) === false;
              if (capture) { return }
            } catch (e) {
              globalHandleError(e, cur, 'errorCaptured hook');
            }
          }
        }
      }
    }
    globalHandleError(err, vm, info);
  } finally {
    popTarget();
  }
}

function invokeWithErrorHandling (
  handler,
  context,
  args,
  vm,
  info
) {
  var res;
  try {
    res = args ? handler.apply(context, args) : handler.call(context);
    if (res && !res._isVue && isPromise(res) && !res._handled) {
      res.catch(function (e) { return handleError(e, vm, info + " (Promise/async)"); });
      // issue #9511
      // avoid catch triggering multiple times when nested calls
      res._handled = true;
    }
  } catch (e) {
    handleError(e, vm, info);
  }
  return res
}

function globalHandleError (err, vm, info) {
  if (config.errorHandler) {
    try {
      return config.errorHandler.call(null, err, vm, info)
    } catch (e) {
      // if the user intentionally throws the original error in the handler,
      // do not log it twice
      if (e !== err) {
        logError(e, null, 'config.errorHandler');
      }
    }
  }
  logError(err, vm, info);
}

function logError (err, vm, info) {
  if (true) {
    warn(("Error in " + info + ": \"" + (err.toString()) + "\""), vm);
  }
  /* istanbul ignore else */
  if ((inBrowser || inWeex) && typeof console !== 'undefined') {
    console.error(err);
  } else {
    throw err
  }
}

/*  */

var callbacks = [];
var pending = false;

function flushCallbacks () {
  pending = false;
  var copies = callbacks.slice(0);
  callbacks.length = 0;
  for (var i = 0; i < copies.length; i++) {
    copies[i]();
  }
}

// Here we have async deferring wrappers using microtasks.
// In 2.5 we used (macro) tasks (in combination with microtasks).
// However, it has subtle problems when state is changed right before repaint
// (e.g. #6813, out-in transitions).
// Also, using (macro) tasks in event handler would cause some weird behaviors
// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).
// So we now use microtasks everywhere, again.
// A major drawback of this tradeoff is that there are some scenarios
// where microtasks have too high a priority and fire in between supposedly
// sequential events (e.g. #4521, #6690, which have workarounds)
// or even between bubbling of the same event (#6566).
var timerFunc;

// The nextTick behavior leverages the microtask queue, which can be accessed
// via either native Promise.then or MutationObserver.
// MutationObserver has wider support, however it is seriously bugged in
// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
// completely stops working after triggering a few times... so, if native
// Promise is available, we will use it:
/* istanbul ignore next, $flow-disable-line */
if (typeof Promise !== 'undefined' && isNative(Promise)) {
  var p = Promise.resolve();
  timerFunc = function () {
    p.then(flushCallbacks);
    // In problematic UIWebViews, Promise.then doesn't completely break, but
    // it can get stuck in a weird state where callbacks are pushed into the
    // microtask queue but the queue isn't being flushed, until the browser
    // needs to do some other work, e.g. handle a timer. Therefore we can
    // "force" the microtask queue to be flushed by adding an empty timer.
    if (isIOS) { setTimeout(noop); }
  };
} else if (!isIE && typeof MutationObserver !== 'undefined' && (
  isNative(MutationObserver) ||
  // PhantomJS and iOS 7.x
  MutationObserver.toString() === '[object MutationObserverConstructor]'
)) {
  // Use MutationObserver where native Promise is not available,
  // e.g. PhantomJS, iOS7, Android 4.4
  // (#6466 MutationObserver is unreliable in IE11)
  var counter = 1;
  var observer = new MutationObserver(flushCallbacks);
  var textNode = document.createTextNode(String(counter));
  observer.observe(textNode, {
    characterData: true
  });
  timerFunc = function () {
    counter = (counter + 1) % 2;
    textNode.data = String(counter);
  };
} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
  // Fallback to setImmediate.
  // Technically it leverages the (macro) task queue,
  // but it is still a better choice than setTimeout.
  timerFunc = function () {
    setImmediate(flushCallbacks);
  };
} else {
  // Fallback to setTimeout.
  timerFunc = function () {
    setTimeout(flushCallbacks, 0);
  };
}

function nextTick (cb, ctx) {
  var _resolve;
  callbacks.push(function () {
    if (cb) {
      try {
        cb.call(ctx);
      } catch (e) {
        handleError(e, ctx, 'nextTick');
      }
    } else if (_resolve) {
      _resolve(ctx);
    }
  });
  if (!pending) {
    pending = true;
    timerFunc();
  }
  // $flow-disable-line
  if (!cb && typeof Promise !== 'undefined') {
    return new Promise(function (resolve) {
      _resolve = resolve;
    })
  }
}

/*  */

/* not type checking this file because flow doesn't play well with Proxy */

var initProxy;

if (true) {
  var allowedGlobals = makeMap(
    'Infinity,undefined,NaN,isFinite,isNaN,' +
    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +
    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +
    'require' // for Webpack/Browserify
  );

  var warnNonPresent = function (target, key) {
    warn(
      "Property or method \"" + key + "\" is not defined on the instance but " +
      'referenced during render. Make sure that this property is reactive, ' +
      'either in the data option, or for class-based components, by ' +
      'initializing the property. ' +
      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',
      target
    );
  };

  var warnReservedPrefix = function (target, key) {
    warn(
      "Property \"" + key + "\" must be accessed with \"$data." + key + "\" because " +
      'properties starting with "$" or "_" are not proxied in the Vue instance to ' +
      'prevent conflicts with Vue internals. ' +
      'See: https://vuejs.org/v2/api/#data',
      target
    );
  };

  var hasProxy =
    typeof Proxy !== 'undefined' && isNative(Proxy);

  if (hasProxy) {
    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');
    config.keyCodes = new Proxy(config.keyCodes, {
      set: function set (target, key, value) {
        if (isBuiltInModifier(key)) {
          warn(("Avoid overwriting built-in modifier in config.keyCodes: ." + key));
          return false
        } else {
          target[key] = value;
          return true
        }
      }
    });
  }

  var hasHandler = {
    has: function has (target, key) {
      var has = key in target;
      var isAllowed = allowedGlobals(key) ||
        (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data));
      if (!has && !isAllowed) {
        if (key in target.$data) { warnReservedPrefix(target, key); }
        else { warnNonPresent(target, key); }
      }
      return has || !isAllowed
    }
  };

  var getHandler = {
    get: function get (target, key) {
      if (typeof key === 'string' && !(key in target)) {
        if (key in target.$data) { warnReservedPrefix(target, key); }
        else { warnNonPresent(target, key); }
      }
      return target[key]
    }
  };

  initProxy = function initProxy (vm) {
    if (hasProxy) {
      // determine which proxy handler to use
      var options = vm.$options;
      var handlers = options.render && options.render._withStripped
        ? getHandler
        : hasHandler;
      vm._renderProxy = new Proxy(vm, handlers);
    } else {
      vm._renderProxy = vm;
    }
  };
}

/*  */

var seenObjects = new _Set();

/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */
function traverse (val) {
  _traverse(val, seenObjects);
  seenObjects.clear();
}

function _traverse (val, seen) {
  var i, keys;
  var isA = Array.isArray(val);
  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {
    return
  }
  if (val.__ob__) {
    var depId = val.__ob__.dep.id;
    if (seen.has(depId)) {
      return
    }
    seen.add(depId);
  }
  if (isA) {
    i = val.length;
    while (i--) { _traverse(val[i], seen); }
  } else {
    keys = Object.keys(val);
    i = keys.length;
    while (i--) { _traverse(val[keys[i]], seen); }
  }
}

var mark;
var measure;

if (true) {
  var perf = inBrowser && window.performance;
  /* istanbul ignore if */
  if (
    perf &&
    perf.mark &&
    perf.measure &&
    perf.clearMarks &&
    perf.clearMeasures
  ) {
    mark = function (tag) { return perf.mark(tag); };
    measure = function (name, startTag, endTag) {
      perf.measure(name, startTag, endTag);
      perf.clearMarks(startTag);
      perf.clearMarks(endTag);
      // perf.clearMeasures(name)
    };
  }
}

/*  */

var normalizeEvent = cached(function (name) {
  var passive = name.charAt(0) === '&';
  name = passive ? name.slice(1) : name;
  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first
  name = once$$1 ? name.slice(1) : name;
  var capture = name.charAt(0) === '!';
  name = capture ? name.slice(1) : name;
  return {
    name: name,
    once: once$$1,
    capture: capture,
    passive: passive
  }
});

function createFnInvoker (fns, vm) {
  function invoker () {
    var arguments$1 = arguments;

    var fns = invoker.fns;
    if (Array.isArray(fns)) {
      var cloned = fns.slice();
      for (var i = 0; i < cloned.length; i++) {
        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, "v-on handler");
      }
    } else {
      // return handler return value for single handlers
      return invokeWithErrorHandling(fns, null, arguments, vm, "v-on handler")
    }
  }
  invoker.fns = fns;
  return invoker
}

function updateListeners (
  on,
  oldOn,
  add,
  remove$$1,
  createOnceHandler,
  vm
) {
  var name, def$$1, cur, old, event;
  for (name in on) {
    def$$1 = cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);
    if (isUndef(cur)) {
       true && warn(
        "Invalid handler for event \"" + (event.name) + "\": got " + String(cur),
        vm
      );
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur, vm);
      }
      if (isTrue(event.once)) {
        cur = on[name] = createOnceHandler(event.name, cur, event.capture);
      }
      add(event.name, cur, event.capture, event.passive, event.params);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }
  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name);
      remove$$1(event.name, oldOn[name], event.capture);
    }
  }
}

/*  */

/*  */

// fixed by xxxxxx (mp properties)
function extractPropertiesFromVNodeData(data, Ctor, res, context) {
  var propOptions = Ctor.options.mpOptions && Ctor.options.mpOptions.properties;
  if (isUndef(propOptions)) {
    return res
  }
  var externalClasses = Ctor.options.mpOptions.externalClasses || [];
  var attrs = data.attrs;
  var props = data.props;
  if (isDef(attrs) || isDef(props)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);
      var result = checkProp(res, props, key, altKey, true) ||
          checkProp(res, attrs, key, altKey, false);
      // externalClass
      if (
        result &&
        res[key] &&
        externalClasses.indexOf(altKey) !== -1 &&
        context[camelize(res[key])]
      ) {
        // 赋值 externalClass 真正的值(模板里 externalClass 的值可能是字符串)
        res[key] = context[camelize(res[key])];
      }
    }
  }
  return res
}

function extractPropsFromVNodeData (
  data,
  Ctor,
  tag,
  context// fixed by xxxxxx
) {
  // we are only extracting raw values here.
  // validation and default values are handled in the child
  // component itself.
  var propOptions = Ctor.options.props;
  if (isUndef(propOptions)) {
    // fixed by xxxxxx
    return extractPropertiesFromVNodeData(data, Ctor, {}, context)
  }
  var res = {};
  var attrs = data.attrs;
  var props = data.props;
  if (isDef(attrs) || isDef(props)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);
      if (true) {
        var keyInLowerCase = key.toLowerCase();
        if (
          key !== keyInLowerCase &&
          attrs && hasOwn(attrs, keyInLowerCase)
        ) {
          tip(
            "Prop \"" + keyInLowerCase + "\" is passed to component " +
            (formatComponentName(tag || Ctor)) + ", but the declared prop name is" +
            " \"" + key + "\". " +
            "Note that HTML attributes are case-insensitive and camelCased " +
            "props need to use their kebab-case equivalents when using in-DOM " +
            "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\"."
          );
        }
      }
      checkProp(res, props, key, altKey, true) ||
      checkProp(res, attrs, key, altKey, false);
    }
  }
  // fixed by xxxxxx
  return extractPropertiesFromVNodeData(data, Ctor, res, context)
}

function checkProp (
  res,
  hash,
  key,
  altKey,
  preserve
) {
  if (isDef(hash)) {
    if (hasOwn(hash, key)) {
      res[key] = hash[key];
      if (!preserve) {
        delete hash[key];
      }
      return true
    } else if (hasOwn(hash, altKey)) {
      res[key] = hash[altKey];
      if (!preserve) {
        delete hash[altKey];
      }
      return true
    }
  }
  return false
}

/*  */

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
function simpleNormalizeChildren (children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children)
    }
  }
  return children
}

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
function normalizeChildren (children) {
  return isPrimitive(children)
    ? [createTextVNode(children)]
    : Array.isArray(children)
      ? normalizeArrayChildren(children)
      : undefined
}

function isTextNode (node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment)
}

function normalizeArrayChildren (children, nestedIndex) {
  var res = [];
  var i, c, lastIndex, last;
  for (i = 0; i < children.length; i++) {
    c = children[i];
    if (isUndef(c) || typeof c === 'boolean') { continue }
    lastIndex = res.length - 1;
    last = res[lastIndex];
    //  nested
    if (Array.isArray(c)) {
      if (c.length > 0) {
        c = normalizeArrayChildren(c, ((nestedIndex || '') + "_" + i));
        // merge adjacent text nodes
        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + (c[0]).text);
          c.shift();
        }
        res.push.apply(res, c);
      }
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = createTextVNode(last.text + c);
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[lastIndex] = createTextVNode(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) &&
          isDef(c.tag) &&
          isUndef(c.key) &&
          isDef(nestedIndex)) {
          c.key = "__vlist" + nestedIndex + "_" + i + "__";
        }
        res.push(c);
      }
    }
  }
  return res
}

/*  */

function initProvide (vm) {
  var provide = vm.$options.provide;
  if (provide) {
    vm._provided = typeof provide === 'function'
      ? provide.call(vm)
      : provide;
  }
}

function initInjections (vm) {
  var result = resolveInject(vm.$options.inject, vm);
  if (result) {
    toggleObserving(false);
    Object.keys(result).forEach(function (key) {
      /* istanbul ignore else */
      if (true) {
        defineReactive$$1(vm, key, result[key], function () {
          warn(
            "Avoid mutating an injected value directly since the changes will be " +
            "overwritten whenever the provided component re-renders. " +
            "injection being mutated: \"" + key + "\"",
            vm
          );
        });
      } else {}
    });
    toggleObserving(true);
  }
}

function resolveInject (inject, vm) {
  if (inject) {
    // inject is :any because flow is not smart enough to figure out cached
    var result = Object.create(null);
    var keys = hasSymbol
      ? Reflect.ownKeys(inject)
      : Object.keys(inject);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      // #6574 in case the inject object is observed...
      if (key === '__ob__') { continue }
      var provideKey = inject[key].from;
      var source = vm;
      while (source) {
        if (source._provided && hasOwn(source._provided, provideKey)) {
          result[key] = source._provided[provideKey];
          break
        }
        source = source.$parent;
      }
      if (!source) {
        if ('default' in inject[key]) {
          var provideDefault = inject[key].default;
          result[key] = typeof provideDefault === 'function'
            ? provideDefault.call(vm)
            : provideDefault;
        } else if (true) {
          warn(("Injection \"" + key + "\" not found"), vm);
        }
      }
    }
    return result
  }
}

/*  */



/**
 * Runtime helper for resolving raw children VNodes into a slot object.
 */
function resolveSlots (
  children,
  context
) {
  if (!children || !children.length) {
    return {}
  }
  var slots = {};
  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    var data = child.data;
    // remove slot attribute if the node is resolved as a Vue slot node
    if (data && data.attrs && data.attrs.slot) {
      delete data.attrs.slot;
    }
    // named slots should only be respected if the vnode was rendered in the
    // same context.
    if ((child.context === context || child.fnContext === context) &&
      data && data.slot != null
    ) {
      var name = data.slot;
      var slot = (slots[name] || (slots[name] = []));
      if (child.tag === 'template') {
        slot.push.apply(slot, child.children || []);
      } else {
        slot.push(child);
      }
    } else {
      // fixed by xxxxxx 临时 hack 掉 uni-app 中的异步 name slot page
      if(child.asyncMeta && child.asyncMeta.data && child.asyncMeta.data.slot === 'page'){
        (slots['page'] || (slots['page'] = [])).push(child);
      }else{
        (slots.default || (slots.default = [])).push(child);
      }
    }
  }
  // ignore slots that contains only whitespace
  for (var name$1 in slots) {
    if (slots[name$1].every(isWhitespace)) {
      delete slots[name$1];
    }
  }
  return slots
}

function isWhitespace (node) {
  return (node.isComment && !node.asyncFactory) || node.text === ' '
}

/*  */

function normalizeScopedSlots (
  slots,
  normalSlots,
  prevSlots
) {
  var res;
  var hasNormalSlots = Object.keys(normalSlots).length > 0;
  var isStable = slots ? !!slots.$stable : !hasNormalSlots;
  var key = slots && slots.$key;
  if (!slots) {
    res = {};
  } else if (slots._normalized) {
    // fast path 1: child component re-render only, parent did not change
    return slots._normalized
  } else if (
    isStable &&
    prevSlots &&
    prevSlots !== emptyObject &&
    key === prevSlots.$key &&
    !hasNormalSlots &&
    !prevSlots.$hasNormal
  ) {
    // fast path 2: stable scoped slots w/ no normal slots to proxy,
    // only need to normalize once
    return prevSlots
  } else {
    res = {};
    for (var key$1 in slots) {
      if (slots[key$1] && key$1[0] !== '$') {
        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);
      }
    }
  }
  // expose normal slots on scopedSlots
  for (var key$2 in normalSlots) {
    if (!(key$2 in res)) {
      res[key$2] = proxyNormalSlot(normalSlots, key$2);
    }
  }
  // avoriaz seems to mock a non-extensible $scopedSlots object
  // and when that is passed down this would cause an error
  if (slots && Object.isExtensible(slots)) {
    (slots)._normalized = res;
  }
  def(res, '$stable', isStable);
  def(res, '$key', key);
  def(res, '$hasNormal', hasNormalSlots);
  return res
}

function normalizeScopedSlot(normalSlots, key, fn) {
  var normalized = function () {
    var res = arguments.length ? fn.apply(null, arguments) : fn({});
    res = res && typeof res === 'object' && !Array.isArray(res)
      ? [res] // single vnode
      : normalizeChildren(res);
    return res && (
      res.length === 0 ||
      (res.length === 1 && res[0].isComment) // #9658
    ) ? undefined
      : res
  };
  // this is a slot using the new v-slot syntax without scope. although it is
  // compiled as a scoped slot, render fn users would expect it to be present
  // on this.$slots because the usage is semantically a normal slot.
  if (fn.proxy) {
    Object.defineProperty(normalSlots, key, {
      get: normalized,
      enumerable: true,
      configurable: true
    });
  }
  return normalized
}

function proxyNormalSlot(slots, key) {
  return function () { return slots[key]; }
}

/*  */

/**
 * Runtime helper for rendering v-for lists.
 */
function renderList (
  val,
  render
) {
  var ret, i, l, keys, key;
  if (Array.isArray(val) || typeof val === 'string') {
    ret = new Array(val.length);
    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render(val[i], i, i, i); // fixed by xxxxxx
    }
  } else if (typeof val === 'number') {
    ret = new Array(val);
    for (i = 0; i < val; i++) {
      ret[i] = render(i + 1, i, i, i); // fixed by xxxxxx
    }
  } else if (isObject(val)) {
    if (hasSymbol && val[Symbol.iterator]) {
      ret = [];
      var iterator = val[Symbol.iterator]();
      var result = iterator.next();
      while (!result.done) {
        ret.push(render(result.value, ret.length, i, i++)); // fixed by xxxxxx
        result = iterator.next();
      }
    } else {
      keys = Object.keys(val);
      ret = new Array(keys.length);
      for (i = 0, l = keys.length; i < l; i++) {
        key = keys[i];
        ret[i] = render(val[key], key, i, i); // fixed by xxxxxx
      }
    }
  }
  if (!isDef(ret)) {
    ret = [];
  }
  (ret)._isVList = true;
  return ret
}

/*  */

/**
 * Runtime helper for rendering <slot>
 */
function renderSlot (
  name,
  fallback,
  props,
  bindObject
) {
  var scopedSlotFn = this.$scopedSlots[name];
  var nodes;
  if (scopedSlotFn) { // scoped slot
    props = props || {};
    if (bindObject) {
      if ( true && !isObject(bindObject)) {
        warn(
          'slot v-bind without argument expects an Object',
          this
        );
      }
      props = extend(extend({}, bindObject), props);
    }
    // fixed by xxxxxx app-plus scopedSlot
    nodes = scopedSlotFn(props, this, props._i) || fallback;
  } else {
    nodes = this.$slots[name] || fallback;
  }

  var target = props && props.slot;
  if (target) {
    return this.$createElement('template', { slot: target }, nodes)
  } else {
    return nodes
  }
}

/*  */

/**
 * Runtime helper for resolving filters
 */
function resolveFilter (id) {
  return resolveAsset(this.$options, 'filters', id, true) || identity
}

/*  */

function isKeyNotMatch (expect, actual) {
  if (Array.isArray(expect)) {
    return expect.indexOf(actual) === -1
  } else {
    return expect !== actual
  }
}

/**
 * Runtime helper for checking keyCodes from config.
 * exposed as Vue.prototype._k
 * passing in eventKeyName as last argument separately for backwards compat
 */
function checkKeyCodes (
  eventKeyCode,
  key,
  builtInKeyCode,
  eventKeyName,
  builtInKeyName
) {
  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;
  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
    return isKeyNotMatch(builtInKeyName, eventKeyName)
  } else if (mappedKeyCode) {
    return isKeyNotMatch(mappedKeyCode, eventKeyCode)
  } else if (eventKeyName) {
    return hyphenate(eventKeyName) !== key
  }
}

/*  */

/**
 * Runtime helper for merging v-bind="object" into a VNode's data.
 */
function bindObjectProps (
  data,
  tag,
  value,
  asProp,
  isSync
) {
  if (value) {
    if (!isObject(value)) {
       true && warn(
        'v-bind without argument expects an Object or Array value',
        this
      );
    } else {
      if (Array.isArray(value)) {
        value = toObject(value);
      }
      var hash;
      var loop = function ( key ) {
        if (
          key === 'class' ||
          key === 'style' ||
          isReservedAttribute(key)
        ) {
          hash = data;
        } else {
          var type = data.attrs && data.attrs.type;
          hash = asProp || config.mustUseProp(tag, type, key)
            ? data.domProps || (data.domProps = {})
            : data.attrs || (data.attrs = {});
        }
        var camelizedKey = camelize(key);
        var hyphenatedKey = hyphenate(key);
        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {
          hash[key] = value[key];

          if (isSync) {
            var on = data.on || (data.on = {});
            on[("update:" + key)] = function ($event) {
              value[key] = $event;
            };
          }
        }
      };

      for (var key in value) loop( key );
    }
  }
  return data
}

/*  */

/**
 * Runtime helper for rendering static trees.
 */
function renderStatic (
  index,
  isInFor
) {
  var cached = this._staticTrees || (this._staticTrees = []);
  var tree = cached[index];
  // if has already-rendered static tree and not inside v-for,
  // we can reuse the same tree.
  if (tree && !isInFor) {
    return tree
  }
  // otherwise, render a fresh tree.
  tree = cached[index] = this.$options.staticRenderFns[index].call(
    this._renderProxy,
    null,
    this // for render fns generated for functional component templates
  );
  markStatic(tree, ("__static__" + index), false);
  return tree
}

/**
 * Runtime helper for v-once.
 * Effectively it means marking the node as static with a unique key.
 */
function markOnce (
  tree,
  index,
  key
) {
  markStatic(tree, ("__once__" + index + (key ? ("_" + key) : "")), true);
  return tree
}

function markStatic (
  tree,
  key,
  isOnce
) {
  if (Array.isArray(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== 'string') {
        markStaticNode(tree[i], (key + "_" + i), isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}

function markStaticNode (node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}

/*  */

function bindObjectListeners (data, value) {
  if (value) {
    if (!isPlainObject(value)) {
       true && warn(
        'v-on without argument expects an Object value',
        this
      );
    } else {
      var on = data.on = data.on ? extend({}, data.on) : {};
      for (var key in value) {
        var existing = on[key];
        var ours = value[key];
        on[key] = existing ? [].concat(existing, ours) : ours;
      }
    }
  }
  return data
}

/*  */

function resolveScopedSlots (
  fns, // see flow/vnode
  res,
  // the following are added in 2.6
  hasDynamicKeys,
  contentHashKey
) {
  res = res || { $stable: !hasDynamicKeys };
  for (var i = 0; i < fns.length; i++) {
    var slot = fns[i];
    if (Array.isArray(slot)) {
      resolveScopedSlots(slot, res, hasDynamicKeys);
    } else if (slot) {
      // marker for reverse proxying v-slot without scope on this.$slots
      if (slot.proxy) {
        slot.fn.proxy = true;
      }
      res[slot.key] = slot.fn;
    }
  }
  if (contentHashKey) {
    (res).$key = contentHashKey;
  }
  return res
}

/*  */

function bindDynamicKeys (baseObj, values) {
  for (var i = 0; i < values.length; i += 2) {
    var key = values[i];
    if (typeof key === 'string' && key) {
      baseObj[values[i]] = values[i + 1];
    } else if ( true && key !== '' && key !== null) {
      // null is a special value for explicitly removing a binding
      warn(
        ("Invalid value for dynamic directive argument (expected string or null): " + key),
        this
      );
    }
  }
  return baseObj
}

// helper to dynamically append modifier runtime markers to event names.
// ensure only append when value is already string, otherwise it will be cast
// to string and cause the type check to miss.
function prependModifier (value, symbol) {
  return typeof value === 'string' ? symbol + value : value
}

/*  */

function installRenderHelpers (target) {
  target._o = markOnce;
  target._n = toNumber;
  target._s = toString;
  target._l = renderList;
  target._t = renderSlot;
  target._q = looseEqual;
  target._i = looseIndexOf;
  target._m = renderStatic;
  target._f = resolveFilter;
  target._k = checkKeyCodes;
  target._b = bindObjectProps;
  target._v = createTextVNode;
  target._e = createEmptyVNode;
  target._u = resolveScopedSlots;
  target._g = bindObjectListeners;
  target._d = bindDynamicKeys;
  target._p = prependModifier;
}

/*  */

function FunctionalRenderContext (
  data,
  props,
  children,
  parent,
  Ctor
) {
  var this$1 = this;

  var options = Ctor.options;
  // ensure the createElement function in functional components
  // gets a unique context - this is necessary for correct named slot check
  var contextVm;
  if (hasOwn(parent, '_uid')) {
    contextVm = Object.create(parent);
    // $flow-disable-line
    contextVm._original = parent;
  } else {
    // the context vm passed in is a functional context as well.
    // in this case we want to make sure we are able to get a hold to the
    // real context instance.
    contextVm = parent;
    // $flow-disable-line
    parent = parent._original;
  }
  var isCompiled = isTrue(options._compiled);
  var needNormalization = !isCompiled;

  this.data = data;
  this.props = props;
  this.children = children;
  this.parent = parent;
  this.listeners = data.on || emptyObject;
  this.injections = resolveInject(options.inject, parent);
  this.slots = function () {
    if (!this$1.$slots) {
      normalizeScopedSlots(
        data.scopedSlots,
        this$1.$slots = resolveSlots(children, parent)
      );
    }
    return this$1.$slots
  };

  Object.defineProperty(this, 'scopedSlots', ({
    enumerable: true,
    get: function get () {
      return normalizeScopedSlots(data.scopedSlots, this.slots())
    }
  }));

  // support for compiled functional template
  if (isCompiled) {
    // exposing $options for renderStatic()
    this.$options = options;
    // pre-resolve slots for renderSlot()
    this.$slots = this.slots();
    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);
  }

  if (options._scopeId) {
    this._c = function (a, b, c, d) {
      var vnode = createElement(contextVm, a, b, c, d, needNormalization);
      if (vnode && !Array.isArray(vnode)) {
        vnode.fnScopeId = options._scopeId;
        vnode.fnContext = parent;
      }
      return vnode
    };
  } else {
    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };
  }
}

installRenderHelpers(FunctionalRenderContext.prototype);

function createFunctionalComponent (
  Ctor,
  propsData,
  data,
  contextVm,
  children
) {
  var options = Ctor.options;
  var props = {};
  var propOptions = options.props;
  if (isDef(propOptions)) {
    for (var key in propOptions) {
      props[key] = validateProp(key, propOptions, propsData || emptyObject);
    }
  } else {
    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }
    if (isDef(data.props)) { mergeProps(props, data.props); }
  }

  var renderContext = new FunctionalRenderContext(
    data,
    props,
    children,
    contextVm,
    Ctor
  );

  var vnode = options.render.call(null, renderContext._c, renderContext);

  if (vnode instanceof VNode) {
    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)
  } else if (Array.isArray(vnode)) {
    var vnodes = normalizeChildren(vnode) || [];
    var res = new Array(vnodes.length);
    for (var i = 0; i < vnodes.length; i++) {
      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);
    }
    return res
  }
}

function cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {
  // #7817 clone node before setting fnContext, otherwise if the node is reused
  // (e.g. it was from a cached normal slot) the fnContext causes named slots
  // that should not be matched to match.
  var clone = cloneVNode(vnode);
  clone.fnContext = contextVm;
  clone.fnOptions = options;
  if (true) {
    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;
  }
  if (data.slot) {
    (clone.data || (clone.data = {})).slot = data.slot;
  }
  return clone
}

function mergeProps (to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}

/*  */

/*  */

/*  */

/*  */

// inline hooks to be invoked on component VNodes during patch
var componentVNodeHooks = {
  init: function init (vnode, hydrating) {
    if (
      vnode.componentInstance &&
      !vnode.componentInstance._isDestroyed &&
      vnode.data.keepAlive
    ) {
      // kept-alive components, treat as a patch
      var mountedNode = vnode; // work around flow
      componentVNodeHooks.prepatch(mountedNode, mountedNode);
    } else {
      var child = vnode.componentInstance = createComponentInstanceForVnode(
        vnode,
        activeInstance
      );
      child.$mount(hydrating ? vnode.elm : undefined, hydrating);
    }
  },

  prepatch: function prepatch (oldVnode, vnode) {
    var options = vnode.componentOptions;
    var child = vnode.componentInstance = oldVnode.componentInstance;
    updateChildComponent(
      child,
      options.propsData, // updated props
      options.listeners, // updated listeners
      vnode, // new parent vnode
      options.children // new children
    );
  },

  insert: function insert (vnode) {
    var context = vnode.context;
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isMounted) {
      callHook(componentInstance, 'onServiceCreated');
      callHook(componentInstance, 'onServiceAttached');
      componentInstance._isMounted = true;
      callHook(componentInstance, 'mounted');
    }
    if (vnode.data.keepAlive) {
      if (context._isMounted) {
        // vue-router#1212
        // During updates, a kept-alive component's child components may
        // change, so directly walking the tree here may call activated hooks
        // on incorrect children. Instead we push them into a queue which will
        // be processed after the whole patch process ended.
        queueActivatedComponent(componentInstance);
      } else {
        activateChildComponent(componentInstance, true /* direct */);
      }
    }
  },

  destroy: function destroy (vnode) {
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isDestroyed) {
      if (!vnode.data.keepAlive) {
        componentInstance.$destroy();
      } else {
        deactivateChildComponent(componentInstance, true /* direct */);
      }
    }
  }
};

var hooksToMerge = Object.keys(componentVNodeHooks);

function createComponent (
  Ctor,
  data,
  context,
  children,
  tag
) {
  if (isUndef(Ctor)) {
    return
  }

  var baseCtor = context.$options._base;

  // plain options object: turn it into a constructor
  if (isObject(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  }

  // if at this stage it's not a constructor or an async component factory,
  // reject.
  if (typeof Ctor !== 'function') {
    if (true) {
      warn(("Invalid Component definition: " + (String(Ctor))), context);
    }
    return
  }

  // async component
  var asyncFactory;
  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor;
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);
    if (Ctor === undefined) {
      // return a placeholder node for async component, which is rendered
      // as a comment node but preserves all the raw information for the node.
      // the information will be used for async server-rendering and hydration.
      return createAsyncPlaceholder(
        asyncFactory,
        data,
        context,
        children,
        tag
      )
    }
  }

  data = data || {};

  // resolve constructor options in case global mixins are applied after
  // component constructor creation
  resolveConstructorOptions(Ctor);

  // transform component v-model data into props & events
  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  }

  // extract props
  var propsData = extractPropsFromVNodeData(data, Ctor, tag, context); // fixed by xxxxxx

  // functional component
  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children)
  }

  // extract listeners, since these needs to be treated as
  // child component listeners instead of DOM listeners
  var listeners = data.on;
  // replace with listeners with .native modifier
  // so it gets processed during parent component patch.
  data.on = data.nativeOn;

  if (isTrue(Ctor.options.abstract)) {
    // abstract components do not keep anything
    // other than props & listeners & slot

    // work around flow
    var slot = data.slot;
    data = {};
    if (slot) {
      data.slot = slot;
    }
  }

  // install component management hooks onto the placeholder node
  installComponentHooks(data);

  // return a placeholder vnode
  var name = Ctor.options.name || tag;
  var vnode = new VNode(
    ("vue-component-" + (Ctor.cid) + (name ? ("-" + name) : '')),
    data, undefined, undefined, undefined, context,
    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },
    asyncFactory
  );

  return vnode
}

function createComponentInstanceForVnode (
  vnode, // we know it's MountedComponentVNode but flow doesn't
  parent // activeInstance in lifecycle state
) {
  var options = {
    _isComponent: true,
    _parentVnode: vnode,
    parent: parent
  };
  // check inline-template render functions
  var inlineTemplate = vnode.data.inlineTemplate;
  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }
  return new vnode.componentOptions.Ctor(options)
}

function installComponentHooks (data) {
  var hooks = data.hook || (data.hook = {});
  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    var existing = hooks[key];
    var toMerge = componentVNodeHooks[key];
    if (existing !== toMerge && !(existing && existing._merged)) {
      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;
    }
  }
}

function mergeHook$1 (f1, f2) {
  var merged = function (a, b) {
    // flow complains about extra args which is why we use any
    f1(a, b);
    f2(a, b);
  };
  merged._merged = true;
  return merged
}

// transform component v-model info (value and callback) into
// prop and event handler respectively.
function transformModel (options, data) {
  var prop = (options.model && options.model.prop) || 'value';
  var event = (options.model && options.model.event) || 'input'
  ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;
  var on = data.on || (data.on = {});
  var existing = on[event];
  var callback = data.model.callback;
  if (isDef(existing)) {
    if (
      Array.isArray(existing)
        ? existing.indexOf(callback) === -1
        : existing !== callback
    ) {
      on[event] = [callback].concat(existing);
    }
  } else {
    on[event] = callback;
  }
}

/*  */

var SIMPLE_NORMALIZE = 1;
var ALWAYS_NORMALIZE = 2;

// wrapper function for providing a more flexible interface
// without getting yelled at by flow
function createElement (
  context,
  tag,
  data,
  children,
  normalizationType,
  alwaysNormalize
) {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = undefined;
  }
  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }
  return _createElement(context, tag, data, children, normalizationType)
}

function _createElement (
  context,
  tag,
  data,
  children,
  normalizationType
) {
  if (isDef(data) && isDef((data).__ob__)) {
     true && warn(
      "Avoid using observed data object as vnode data: " + (JSON.stringify(data)) + "\n" +
      'Always create fresh vnode data objects in each render!',
      context
    );
    return createEmptyVNode()
  }
  // object syntax in v-bind
  if (isDef(data) && isDef(data.is)) {
    tag = data.is;
  }
  if (!tag) {
    // in case of component :is set to falsy value
    return createEmptyVNode()
  }
  // warn against non-primitive key
  if ( true &&
    isDef(data) && isDef(data.key) && !isPrimitive(data.key)
  ) {
    {
      warn(
        'Avoid using non-primitive value as key, ' +
        'use string/number value instead.',
        context
      );
    }
  }
  // support single function children as default scoped slot
  if (Array.isArray(children) &&
    typeof children[0] === 'function'
  ) {
    data = data || {};
    data.scopedSlots = { default: children[0] };
    children.length = 0;
  }
  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }
  var vnode, ns;
  if (typeof tag === 'string') {
    var Ctor;
    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);
    if (config.isReservedTag(tag)) {
      // platform built-in elements
      if ( true && isDef(data) && isDef(data.nativeOn)) {
        warn(
          ("The .native modifier for v-on is only valid on components but it was used on <" + tag + ">."),
          context
        );
      }
      vnode = new VNode(
        config.parsePlatformTagName(tag), data, children,
        undefined, undefined, context
      );
    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
      // component
      vnode = createComponent(Ctor, data, context, children, tag);
    } else {
      // unknown or unlisted namespaced elements
      // check at runtime because it may get assigned a namespace when its
      // parent normalizes children
      vnode = new VNode(
        tag, data, children,
        undefined, undefined, context
      );
    }
  } else {
    // direct component options / constructor
    vnode = createComponent(tag, data, context, children);
  }
  if (Array.isArray(vnode)) {
    return vnode
  } else if (isDef(vnode)) {
    if (isDef(ns)) { applyNS(vnode, ns); }
    if (isDef(data)) { registerDeepBindings(data); }
    return vnode
  } else {
    return createEmptyVNode()
  }
}

function applyNS (vnode, ns, force) {
  vnode.ns = ns;
  if (vnode.tag === 'foreignObject') {
    // use default namespace inside foreignObject
    ns = undefined;
    force = true;
  }
  if (isDef(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];
      if (isDef(child.tag) && (
        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {
        applyNS(child, ns, force);
      }
    }
  }
}

// ref #5318
// necessary to ensure parent re-render when deep bindings like :style and
// :class are used on slot nodes
function registerDeepBindings (data) {
  if (isObject(data.style)) {
    traverse(data.style);
  }
  if (isObject(data.class)) {
    traverse(data.class);
  }
}

/*  */

function initRender (vm) {
  vm._vnode = null; // the root of the child tree
  vm._staticTrees = null; // v-once cached trees
  var options = vm.$options;
  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree
  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(options._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject;
  // bind the createElement fn to this instance
  // so that we get proper render context inside it.
  // args order: tag, data, children, normalizationType, alwaysNormalize
  // internal version is used by render functions compiled from templates
  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };
  // normalization is always applied for the public version, used in
  // user-written render functions.
  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };

  // $attrs & $listeners are exposed for easier HOC creation.
  // they need to be reactive so that HOCs using them are always updated
  var parentData = parentVnode && parentVnode.data;

  /* istanbul ignore else */
  if (true) {
    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {
      !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
    }, true);
    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {
      !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
    }, true);
  } else {}
}

var currentRenderingInstance = null;

function renderMixin (Vue) {
  // install runtime convenience helpers
  installRenderHelpers(Vue.prototype);

  Vue.prototype.$nextTick = function (fn) {
    return nextTick(fn, this)
  };

  Vue.prototype._render = function () {
    var vm = this;
    var ref = vm.$options;
    var render = ref.render;
    var _parentVnode = ref._parentVnode;

    if (_parentVnode) {
      vm.$scopedSlots = normalizeScopedSlots(
        _parentVnode.data.scopedSlots,
        vm.$slots,
        vm.$scopedSlots
      );
    }

    // set parent vnode. this allows render functions to have access
    // to the data on the placeholder node.
    vm.$vnode = _parentVnode;
    // render self
    var vnode;
    try {
      // There's no need to maintain a stack because all render fns are called
      // separately from one another. Nested component's render fns are called
      // when parent component is patched.
      currentRenderingInstance = vm;
      vnode = render.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render");
      // return error render result,
      // or previous vnode to prevent render error causing blank component
      /* istanbul ignore else */
      if ( true && vm.$options.renderError) {
        try {
          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
        } catch (e) {
          handleError(e, vm, "renderError");
          vnode = vm._vnode;
        }
      } else {
        vnode = vm._vnode;
      }
    } finally {
      currentRenderingInstance = null;
    }
    // if the returned array contains only a single node, allow it
    if (Array.isArray(vnode) && vnode.length === 1) {
      vnode = vnode[0];
    }
    // return empty vnode in case the render function errored out
    if (!(vnode instanceof VNode)) {
      if ( true && Array.isArray(vnode)) {
        warn(
          'Multiple root nodes returned from render function. Render function ' +
          'should return a single root node.',
          vm
        );
      }
      vnode = createEmptyVNode();
    }
    // set parent
    vnode.parent = _parentVnode;
    return vnode
  };
}

/*  */

function ensureCtor (comp, base) {
  if (
    comp.__esModule ||
    (hasSymbol && comp[Symbol.toStringTag] === 'Module')
  ) {
    comp = comp.default;
  }
  return isObject(comp)
    ? base.extend(comp)
    : comp
}

function createAsyncPlaceholder (
  factory,
  data,
  context,
  children,
  tag
) {
  var node = createEmptyVNode();
  node.asyncFactory = factory;
  node.asyncMeta = { data: data, context: context, children: children, tag: tag };
  return node
}

function resolveAsyncComponent (
  factory,
  baseCtor
) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp
  }

  if (isDef(factory.resolved)) {
    return factory.resolved
  }

  var owner = currentRenderingInstance;
  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {
    // already pending
    factory.owners.push(owner);
  }

  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp
  }

  if (owner && !isDef(factory.owners)) {
    var owners = factory.owners = [owner];
    var sync = true;
    var timerLoading = null;
    var timerTimeout = null

    ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });

    var forceRender = function (renderCompleted) {
      for (var i = 0, l = owners.length; i < l; i++) {
        (owners[i]).$forceUpdate();
      }

      if (renderCompleted) {
        owners.length = 0;
        if (timerLoading !== null) {
          clearTimeout(timerLoading);
          timerLoading = null;
        }
        if (timerTimeout !== null) {
          clearTimeout(timerTimeout);
          timerTimeout = null;
        }
      }
    };

    var resolve = once(function (res) {
      // cache resolved
      factory.resolved = ensureCtor(res, baseCtor);
      // invoke callbacks only if this is not a synchronous resolve
      // (async resolves are shimmed as synchronous during SSR)
      if (!sync) {
        forceRender(true);
      } else {
        owners.length = 0;
      }
    });

    var reject = once(function (reason) {
       true && warn(
        "Failed to resolve async component: " + (String(factory)) +
        (reason ? ("\nReason: " + reason) : '')
      );
      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender(true);
      }
    });

    var res = factory(resolve, reject);

    if (isObject(res)) {
      if (isPromise(res)) {
        // () => Promise
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isPromise(res.component)) {
        res.component.then(resolve, reject);

        if (isDef(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }

        if (isDef(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);
          if (res.delay === 0) {
            factory.loading = true;
          } else {
            timerLoading = setTimeout(function () {
              timerLoading = null;
              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender(false);
              }
            }, res.delay || 200);
          }
        }

        if (isDef(res.timeout)) {
          timerTimeout = setTimeout(function () {
            timerTimeout = null;
            if (isUndef(factory.resolved)) {
              reject(
                 true
                  ? ("timeout (" + (res.timeout) + "ms)")
                  : undefined
              );
            }
          }, res.timeout);
        }
      }
    }

    sync = false;
    // return in case resolved synchronously
    return factory.loading
      ? factory.loadingComp
      : factory.resolved
  }
}

/*  */

function isAsyncPlaceholder (node) {
  return node.isComment && node.asyncFactory
}

/*  */

function getFirstComponentChild (children) {
  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];
      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
        return c
      }
    }
  }
}

/*  */

/*  */

function initEvents (vm) {
  vm._events = Object.create(null);
  vm._hasHookEvent = false;
  // init parent attached events
  var listeners = vm.$options._parentListeners;
  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}

var target;

function add (event, fn) {
  target.$on(event, fn);
}

function remove$1 (event, fn) {
  target.$off(event, fn);
}

function createOnceHandler (event, fn) {
  var _target = target;
  return function onceHandler () {
    var res = fn.apply(null, arguments);
    if (res !== null) {
      _target.$off(event, onceHandler);
    }
  }
}

function updateComponentListeners (
  vm,
  listeners,
  oldListeners
) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);
  target = undefined;
}

function eventsMixin (Vue) {
  var hookRE = /^hook:/;
  Vue.prototype.$on = function (event, fn) {
    var vm = this;
    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        vm.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn);
      // optimize hook:event cost by using a boolean flag marked at registration
      // instead of a hash lookup
      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }
    return vm
  };

  Vue.prototype.$once = function (event, fn) {
    var vm = this;
    function on () {
      vm.$off(event, on);
      fn.apply(vm, arguments);
    }
    on.fn = fn;
    vm.$on(event, on);
    return vm
  };

  Vue.prototype.$off = function (event, fn) {
    var vm = this;
    // all
    if (!arguments.length) {
      vm._events = Object.create(null);
      return vm
    }
    // array of events
    if (Array.isArray(event)) {
      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
        vm.$off(event[i$1], fn);
      }
      return vm
    }
    // specific event
    var cbs = vm._events[event];
    if (!cbs) {
      return vm
    }
    if (!fn) {
      vm._events[event] = null;
      return vm
    }
    // specific handler
    var cb;
    var i = cbs.length;
    while (i--) {
      cb = cbs[i];
      if (cb === fn || cb.fn === fn) {
        cbs.splice(i, 1);
        break
      }
    }
    return vm
  };

  Vue.prototype.$emit = function (event) {
    var vm = this;
    if (true) {
      var lowerCaseEvent = event.toLowerCase();
      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
        tip(
          "Event \"" + lowerCaseEvent + "\" is emitted in component " +
          (formatComponentName(vm)) + " but the handler is registered for \"" + event + "\". " +
          "Note that HTML attributes are case-insensitive and you cannot use " +
          "v-on to listen to camelCase events when using in-DOM templates. " +
          "You should probably use \"" + (hyphenate(event)) + "\" instead of \"" + event + "\"."
        );
      }
    }
    var cbs = vm._events[event];
    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);
      var info = "event handler for \"" + event + "\"";
      for (var i = 0, l = cbs.length; i < l; i++) {
        invokeWithErrorHandling(cbs[i], vm, args, vm, info);
      }
    }
    return vm
  };
}

/*  */

var activeInstance = null;
var isUpdatingChildComponent = false;

function setActiveInstance(vm) {
  var prevActiveInstance = activeInstance;
  activeInstance = vm;
  return function () {
    activeInstance = prevActiveInstance;
  }
}

function initLifecycle (vm) {
  var options = vm.$options;

  // locate first non-abstract parent
  var parent = options.parent;
  if (parent && !options.abstract) {
    while (parent.$options.abstract && parent.$parent) {
      parent = parent.$parent;
    }
    parent.$children.push(vm);
  }

  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;

  vm.$children = [];
  vm.$refs = {};

  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}

function lifecycleMixin (Vue) {
  Vue.prototype._update = function (vnode, hydrating) {
    var vm = this;
    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var restoreActiveInstance = setActiveInstance(vm);
    vm._vnode = vnode;
    // Vue.prototype.__patch__ is injected in entry points
    // based on the rendering backend used.
    if (!prevVnode) {
      // initial render
      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);
    } else {
      // updates
      vm.$el = vm.__patch__(prevVnode, vnode);
    }
    restoreActiveInstance();
    // update __vue__ reference
    if (prevEl) {
      prevEl.__vue__ = null;
    }
    if (vm.$el) {
      vm.$el.__vue__ = vm;
    }
    // if parent is an HOC, update its $el as well
    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    }
    // updated hook is called by the scheduler to ensure that children are
    // updated in a parent's updated hook.
  };

  Vue.prototype.$forceUpdate = function () {
    var vm = this;
    if (vm._watcher) {
      vm._watcher.update();
    }
  };

  Vue.prototype.$destroy = function () {
    var vm = this;
    if (vm._isBeingDestroyed) {
      return
    }
    callHook(vm, 'beforeDestroy');
    vm._isBeingDestroyed = true;
    // remove self from parent
    var parent = vm.$parent;
    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
      remove(parent.$children, vm);
    }
    // teardown watchers
    if (vm._watcher) {
      vm._watcher.teardown();
    }
    var i = vm._watchers.length;
    while (i--) {
      vm._watchers[i].teardown();
    }
    // remove reference from data ob
    // frozen object may not have observer.
    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    }
    // call the last hook...
    vm._isDestroyed = true;
    // invoke destroy hooks on current rendered tree
    vm.__patch__(vm._vnode, null);
    // fire destroyed hook
    callHook(vm, 'destroyed');
    // turn off all instance listeners.
    vm.$off();
    // remove __vue__ reference
    if (vm.$el) {
      vm.$el.__vue__ = null;
    }
    // release circular reference (#6759)
    if (vm.$vnode) {
      vm.$vnode.parent = null;
    }
  };
}

function updateChildComponent (
  vm,
  propsData,
  listeners,
  parentVnode,
  renderChildren
) {
  if (true) {
    isUpdatingChildComponent = true;
  }

  // determine whether component has slot children
  // we need to do this before overwriting $options._renderChildren.

  // check if there are dynamic scopedSlots (hand-written or compiled but with
  // dynamic slot names). Static scoped slots compiled from template has the
  // "$stable" marker.
  var newScopedSlots = parentVnode.data.scopedSlots;
  var oldScopedSlots = vm.$scopedSlots;
  var hasDynamicScopedSlot = !!(
    (newScopedSlots && !newScopedSlots.$stable) ||
    (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||
    (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key)
  );

  // Any static slot children from the parent may have changed during parent's
  // update. Dynamic scoped slots may also have changed. In such cases, a forced
  // update is necessary to ensure correctness.
  var needsForceUpdate = !!(
    renderChildren ||               // has new static slots
    vm.$options._renderChildren ||  // has old static slots
    hasDynamicScopedSlot
  );

  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode; // update vm's placeholder node without re-render

  if (vm._vnode) { // update child tree's parent
    vm._vnode.parent = parentVnode;
  }
  vm.$options._renderChildren = renderChildren;

  // update $attrs and $listeners hash
  // these are also reactive so they may trigger child update if the child
  // used them during render
  vm.$attrs = parentVnode.data.attrs || emptyObject;
  vm.$listeners = listeners || emptyObject;

  // update props
  if (propsData && vm.$options.props) {
    toggleObserving(false);
    var props = vm._props;
    var propKeys = vm.$options._propKeys || [];
    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i];
      var propOptions = vm.$options.props; // wtf flow?
      props[key] = validateProp(key, propOptions, propsData, vm);
    }
    toggleObserving(true);
    // keep a copy of raw propsData
    vm.$options.propsData = propsData;
  }

  // fixed by xxxxxx update properties(mp runtime)
  vm._$updateProperties && vm._$updateProperties(vm);

  // update listeners
  listeners = listeners || emptyObject;
  var oldListeners = vm.$options._parentListeners;
  vm.$options._parentListeners = listeners;
  updateComponentListeners(vm, listeners, oldListeners);

  // resolve slots + force update if has children
  if (needsForceUpdate) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }

  if (true) {
    isUpdatingChildComponent = false;
  }
}

function isInInactiveTree (vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) { return true }
  }
  return false
}

function activateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = false;
    if (isInInactiveTree(vm)) {
      return
    }
  } else if (vm._directInactive) {
    return
  }
  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;
    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'activated');
  }
}

function deactivateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = true;
    if (isInInactiveTree(vm)) {
      return
    }
  }
  if (!vm._inactive) {
    vm._inactive = true;
    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'deactivated');
  }
}

function callHook (vm, hook) {
  // #7573 disable dep collection when invoking lifecycle hooks
  pushTarget();
  var handlers = vm.$options[hook];
  var info = hook + " hook";
  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      invokeWithErrorHandling(handlers[i], vm, null, vm, info);
    }
  }
  if (vm._hasHookEvent) {
    vm.$emit('hook:' + hook);
  }
  popTarget();
}

/*  */

var MAX_UPDATE_COUNT = 100;

var queue = [];
var activatedChildren = [];
var has = {};
var circular = {};
var waiting = false;
var flushing = false;
var index = 0;

/**
 * Reset the scheduler's state.
 */
function resetSchedulerState () {
  index = queue.length = activatedChildren.length = 0;
  has = {};
  if (true) {
    circular = {};
  }
  waiting = flushing = false;
}

// Async edge case #6566 requires saving the timestamp when event listeners are
// attached. However, calling performance.now() has a perf overhead especially
// if the page has thousands of event listeners. Instead, we take a timestamp
// every time the scheduler flushes and use that for all event listeners
// attached during that flush.
var currentFlushTimestamp = 0;

// Async edge case fix requires storing an event listener's attach timestamp.
var getNow = Date.now;

// Determine what event timestamp the browser is using. Annoyingly, the
// timestamp can either be hi-res (relative to page load) or low-res
// (relative to UNIX epoch), so in order to compare time we have to use the
// same timestamp type when saving the flush timestamp.
// All IE versions use low-res event timestamps, and have problematic clock
// implementations (#9632)
if (inBrowser && !isIE) {
  var performance = window.performance;
  if (
    performance &&
    typeof performance.now === 'function' &&
    getNow() > document.createEvent('Event').timeStamp
  ) {
    // if the event timestamp, although evaluated AFTER the Date.now(), is
    // smaller than it, it means the event is using a hi-res timestamp,
    // and we need to use the hi-res version for event listener timestamps as
    // well.
    getNow = function () { return performance.now(); };
  }
}

/**
 * Flush both queues and run the watchers.
 */
function flushSchedulerQueue () {
  currentFlushTimestamp = getNow();
  flushing = true;
  var watcher, id;

  // Sort queue before flush.
  // This ensures that:
  // 1. Components are updated from parent to child. (because parent is always
  //    created before the child)
  // 2. A component's user watchers are run before its render watcher (because
  //    user watchers are created before the render watcher)
  // 3. If a component is destroyed during a parent component's watcher run,
  //    its watchers can be skipped.
  queue.sort(function (a, b) { return a.id - b.id; });

  // do not cache length because more watchers might be pushed
  // as we run existing watchers
  for (index = 0; index < queue.length; index++) {
    watcher = queue[index];
    if (watcher.before) {
      watcher.before();
    }
    id = watcher.id;
    has[id] = null;
    watcher.run();
    // in dev build, check and stop circular updates.
    if ( true && has[id] != null) {
      circular[id] = (circular[id] || 0) + 1;
      if (circular[id] > MAX_UPDATE_COUNT) {
        warn(
          'You may have an infinite update loop ' + (
            watcher.user
              ? ("in watcher with expression \"" + (watcher.expression) + "\"")
              : "in a component render function."
          ),
          watcher.vm
        );
        break
      }
    }
  }

  // keep copies of post queues before resetting state
  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();

  resetSchedulerState();

  // call component updated and activated hooks
  callActivatedHooks(activatedQueue);
  callUpdatedHooks(updatedQueue);

  // devtool hook
  /* istanbul ignore if */
  if (devtools && config.devtools) {
    devtools.emit('flush');
  }
}

function callUpdatedHooks (queue) {
  var i = queue.length;
  while (i--) {
    var watcher = queue[i];
    var vm = watcher.vm;
    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {
      callHook(vm, 'updated');
    }
  }
}

/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */
function queueActivatedComponent (vm) {
  // setting _inactive to false here so that a render function can
  // rely on checking whether it's in an inactive tree (e.g. router-view)
  vm._inactive = false;
  activatedChildren.push(vm);
}

function callActivatedHooks (queue) {
  for (var i = 0; i < queue.length; i++) {
    queue[i]._inactive = true;
    activateChildComponent(queue[i], true /* true */);
  }
}

/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */
function queueWatcher (watcher) {
  var id = watcher.id;
  if (has[id] == null) {
    has[id] = true;
    if (!flushing) {
      queue.push(watcher);
    } else {
      // if already flushing, splice the watcher based on its id
      // if already past its id, it will be run next immediately.
      var i = queue.length - 1;
      while (i > index && queue[i].id > watcher.id) {
        i--;
      }
      queue.splice(i + 1, 0, watcher);
    }
    // queue the flush
    if (!waiting) {
      waiting = true;

      if ( true && !config.async) {
        flushSchedulerQueue();
        return
      }
      nextTick(flushSchedulerQueue);
    }
  }
}

/*  */



var uid$2 = 0;

/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 */
var Watcher = function Watcher (
  vm,
  expOrFn,
  cb,
  options,
  isRenderWatcher
) {
  this.vm = vm;
  if (isRenderWatcher) {
    vm._watcher = this;
  }
  vm._watchers.push(this);
  // options
  if (options) {
    this.deep = !!options.deep;
    this.user = !!options.user;
    this.lazy = !!options.lazy;
    this.sync = !!options.sync;
    this.before = options.before;
  } else {
    this.deep = this.user = this.lazy = this.sync = false;
  }
  this.cb = cb;
  this.id = ++uid$2; // uid for batching
  this.active = true;
  this.dirty = this.lazy; // for lazy watchers
  this.deps = [];
  this.newDeps = [];
  this.depIds = new _Set();
  this.newDepIds = new _Set();
  this.expression =  true
    ? expOrFn.toString()
    : undefined;
  // parse expression for getter
  if (typeof expOrFn === 'function') {
    this.getter = expOrFn;
  } else {
    this.getter = parsePath(expOrFn);
    if (!this.getter) {
      this.getter = noop;
       true && warn(
        "Failed watching path: \"" + expOrFn + "\" " +
        'Watcher only accepts simple dot-delimited paths. ' +
        'For full control, use a function instead.',
        vm
      );
    }
  }
  this.value = this.lazy
    ? undefined
    : this.get();
};

/**
 * Evaluate the getter, and re-collect dependencies.
 */
Watcher.prototype.get = function get () {
  pushTarget(this);
  var value;
  var vm = this.vm;
  try {
    value = this.getter.call(vm, vm);
  } catch (e) {
    if (this.user) {
      handleError(e, vm, ("getter for watcher \"" + (this.expression) + "\""));
    } else {
      throw e
    }
  } finally {
    // "touch" every property so they are all tracked as
    // dependencies for deep watching
    if (this.deep) {
      traverse(value);
    }
    popTarget();
    this.cleanupDeps();
  }
  return value
};

/**
 * Add a dependency to this directive.
 */
Watcher.prototype.addDep = function addDep (dep) {
  var id = dep.id;
  if (!this.newDepIds.has(id)) {
    this.newDepIds.add(id);
    this.newDeps.push(dep);
    if (!this.depIds.has(id)) {
      dep.addSub(this);
    }
  }
};

/**
 * Clean up for dependency collection.
 */
Watcher.prototype.cleanupDeps = function cleanupDeps () {
  var i = this.deps.length;
  while (i--) {
    var dep = this.deps[i];
    if (!this.newDepIds.has(dep.id)) {
      dep.removeSub(this);
    }
  }
  var tmp = this.depIds;
  this.depIds = this.newDepIds;
  this.newDepIds = tmp;
  this.newDepIds.clear();
  tmp = this.deps;
  this.deps = this.newDeps;
  this.newDeps = tmp;
  this.newDeps.length = 0;
};

/**
 * Subscriber interface.
 * Will be called when a dependency changes.
 */
Watcher.prototype.update = function update () {
  /* istanbul ignore else */
  if (this.lazy) {
    this.dirty = true;
  } else if (this.sync) {
    this.run();
  } else {
    queueWatcher(this);
  }
};

/**
 * Scheduler job interface.
 * Will be called by the scheduler.
 */
Watcher.prototype.run = function run () {
  if (this.active) {
    var value = this.get();
    if (
      value !== this.value ||
      // Deep watchers and watchers on Object/Arrays should fire even
      // when the value is the same, because the value may
      // have mutated.
      isObject(value) ||
      this.deep
    ) {
      // set new value
      var oldValue = this.value;
      this.value = value;
      if (this.user) {
        try {
          this.cb.call(this.vm, value, oldValue);
        } catch (e) {
          handleError(e, this.vm, ("callback for watcher \"" + (this.expression) + "\""));
        }
      } else {
        this.cb.call(this.vm, value, oldValue);
      }
    }
  }
};

/**
 * Evaluate the value of the watcher.
 * This only gets called for lazy watchers.
 */
Watcher.prototype.evaluate = function evaluate () {
  this.value = this.get();
  this.dirty = false;
};

/**
 * Depend on all deps collected by this watcher.
 */
Watcher.prototype.depend = function depend () {
  var i = this.deps.length;
  while (i--) {
    this.deps[i].depend();
  }
};

/**
 * Remove self from all dependencies' subscriber list.
 */
Watcher.prototype.teardown = function teardown () {
  if (this.active) {
    // remove self from vm's watcher list
    // this is a somewhat expensive operation so we skip it
    // if the vm is being destroyed.
    if (!this.vm._isBeingDestroyed) {
      remove(this.vm._watchers, this);
    }
    var i = this.deps.length;
    while (i--) {
      this.deps[i].removeSub(this);
    }
    this.active = false;
  }
};

/*  */

var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
};

function proxy (target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter () {
    return this[sourceKey][key]
  };
  sharedPropertyDefinition.set = function proxySetter (val) {
    this[sourceKey][key] = val;
  };
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function initState (vm) {
  vm._watchers = [];
  var opts = vm.$options;
  if (opts.props) { initProps(vm, opts.props); }
  if (opts.methods) { initMethods(vm, opts.methods); }
  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true /* asRootData */);
  }
  if (opts.computed) { initComputed(vm, opts.computed); }
  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch);
  }
}

function initProps (vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props = vm._props = {};
  // cache prop keys so that future props updates can iterate using Array
  // instead of dynamic object key enumeration.
  var keys = vm.$options._propKeys = [];
  var isRoot = !vm.$parent;
  // root instance props should be converted
  if (!isRoot) {
    toggleObserving(false);
  }
  var loop = function ( key ) {
    keys.push(key);
    var value = validateProp(key, propsOptions, propsData, vm);
    /* istanbul ignore else */
    if (true) {
      var hyphenatedKey = hyphenate(key);
      if (isReservedAttribute(hyphenatedKey) ||
          config.isReservedAttr(hyphenatedKey)) {
        warn(
          ("\"" + hyphenatedKey + "\" is a reserved attribute and cannot be used as component prop."),
          vm
        );
      }
      defineReactive$$1(props, key, value, function () {
        if (!isRoot && !isUpdatingChildComponent) {
          {
            if(vm.mpHost === 'mp-baidu' || vm.mpHost === 'mp-kuaishou'){//百度、快手 observer 在 setData callback 之后触发，直接忽略该 warn
                return
            }
            //fixed by xxxxxx __next_tick_pending,uni://form-field 时不告警
            if(
                key === 'value' &&
                Array.isArray(vm.$options.behaviors) &&
                vm.$options.behaviors.indexOf('uni://form-field') !== -1
              ){
              return
            }
            if(vm._getFormData){
              return
            }
            var $parent = vm.$parent;
            while($parent){
              if($parent.__next_tick_pending){
                return
              }
              $parent = $parent.$parent;
            }
          }
          warn(
            "Avoid mutating a prop directly since the value will be " +
            "overwritten whenever the parent component re-renders. " +
            "Instead, use a data or computed property based on the prop's " +
            "value. Prop being mutated: \"" + key + "\"",
            vm
          );
        }
      });
    } else {}
    // static props are already proxied on the component's prototype
    // during Vue.extend(). We only need to proxy props defined at
    // instantiation here.
    if (!(key in vm)) {
      proxy(vm, "_props", key);
    }
  };

  for (var key in propsOptions) loop( key );
  toggleObserving(true);
}

function initData (vm) {
  var data = vm.$options.data;
  data = vm._data = typeof data === 'function'
    ? getData(data, vm)
    : data || {};
  if (!isPlainObject(data)) {
    data = {};
     true && warn(
      'data functions should return an object:\n' +
      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',
      vm
    );
  }
  // proxy data on instance
  var keys = Object.keys(data);
  var props = vm.$options.props;
  var methods = vm.$options.methods;
  var i = keys.length;
  while (i--) {
    var key = keys[i];
    if (true) {
      if (methods && hasOwn(methods, key)) {
        warn(
          ("Method \"" + key + "\" has already been defined as a data property."),
          vm
        );
      }
    }
    if (props && hasOwn(props, key)) {
       true && warn(
        "The data property \"" + key + "\" is already declared as a prop. " +
        "Use prop default value instead.",
        vm
      );
    } else if (!isReserved(key)) {
      proxy(vm, "_data", key);
    }
  }
  // observe data
  observe(data, true /* asRootData */);
}

function getData (data, vm) {
  // #7573 disable dep collection when invoking data getters
  pushTarget();
  try {
    return data.call(vm, vm)
  } catch (e) {
    handleError(e, vm, "data()");
    return {}
  } finally {
    popTarget();
  }
}

var computedWatcherOptions = { lazy: true };

function initComputed (vm, computed) {
  // $flow-disable-line
  var watchers = vm._computedWatchers = Object.create(null);
  // computed properties are just getters during SSR
  var isSSR = isServerRendering();

  for (var key in computed) {
    var userDef = computed[key];
    var getter = typeof userDef === 'function' ? userDef : userDef.get;
    if ( true && getter == null) {
      warn(
        ("Getter is missing for computed property \"" + key + "\"."),
        vm
      );
    }

    if (!isSSR) {
      // create internal watcher for the computed property.
      watchers[key] = new Watcher(
        vm,
        getter || noop,
        noop,
        computedWatcherOptions
      );
    }

    // component-defined computed properties are already defined on the
    // component prototype. We only need to define computed properties defined
    // at instantiation here.
    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else if (true) {
      if (key in vm.$data) {
        warn(("The computed property \"" + key + "\" is already defined in data."), vm);
      } else if (vm.$options.props && key in vm.$options.props) {
        warn(("The computed property \"" + key + "\" is already defined as a prop."), vm);
      }
    }
  }
}

function defineComputed (
  target,
  key,
  userDef
) {
  var shouldCache = !isServerRendering();
  if (typeof userDef === 'function') {
    sharedPropertyDefinition.get = shouldCache
      ? createComputedGetter(key)
      : createGetterInvoker(userDef);
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get
      ? shouldCache && userDef.cache !== false
        ? createComputedGetter(key)
        : createGetterInvoker(userDef.get)
      : noop;
    sharedPropertyDefinition.set = userDef.set || noop;
  }
  if ( true &&
      sharedPropertyDefinition.set === noop) {
    sharedPropertyDefinition.set = function () {
      warn(
        ("Computed property \"" + key + "\" was assigned to but it has no setter."),
        this
      );
    };
  }
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function createComputedGetter (key) {
  return function computedGetter () {
    var watcher = this._computedWatchers && this._computedWatchers[key];
    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }
      if (Dep.SharedObject.target) {// fixed by xxxxxx
        watcher.depend();
      }
      return watcher.value
    }
  }
}

function createGetterInvoker(fn) {
  return function computedGetter () {
    return fn.call(this, this)
  }
}

function initMethods (vm, methods) {
  var props = vm.$options.props;
  for (var key in methods) {
    if (true) {
      if (typeof methods[key] !== 'function') {
        warn(
          "Method \"" + key + "\" has type \"" + (typeof methods[key]) + "\" in the component definition. " +
          "Did you reference the function correctly?",
          vm
        );
      }
      if (props && hasOwn(props, key)) {
        warn(
          ("Method \"" + key + "\" has already been defined as a prop."),
          vm
        );
      }
      if ((key in vm) && isReserved(key)) {
        warn(
          "Method \"" + key + "\" conflicts with an existing Vue instance method. " +
          "Avoid defining component methods that start with _ or $."
        );
      }
    }
    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);
  }
}

function initWatch (vm, watch) {
  for (var key in watch) {
    var handler = watch[key];
    if (Array.isArray(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}

function createWatcher (
  vm,
  expOrFn,
  handler,
  options
) {
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }
  if (typeof handler === 'string') {
    handler = vm[handler];
  }
  return vm.$watch(expOrFn, handler, options)
}

function stateMixin (Vue) {
  // flow somehow has problems with directly declared definition object
  // when using Object.defineProperty, so we have to procedurally build up
  // the object here.
  var dataDef = {};
  dataDef.get = function () { return this._data };
  var propsDef = {};
  propsDef.get = function () { return this._props };
  if (true) {
    dataDef.set = function () {
      warn(
        'Avoid replacing instance root $data. ' +
        'Use nested data properties instead.',
        this
      );
    };
    propsDef.set = function () {
      warn("$props is readonly.", this);
    };
  }
  Object.defineProperty(Vue.prototype, '$data', dataDef);
  Object.defineProperty(Vue.prototype, '$props', propsDef);

  Vue.prototype.$set = set;
  Vue.prototype.$delete = del;

  Vue.prototype.$watch = function (
    expOrFn,
    cb,
    options
  ) {
    var vm = this;
    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options)
    }
    options = options || {};
    options.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options);
    if (options.immediate) {
      try {
        cb.call(vm, watcher.value);
      } catch (error) {
        handleError(error, vm, ("callback for immediate watcher \"" + (watcher.expression) + "\""));
      }
    }
    return function unwatchFn () {
      watcher.teardown();
    }
  };
}

/*  */

var uid$3 = 0;

function initMixin (Vue) {
  Vue.prototype._init = function (options) {
    var vm = this;
    // a uid
    vm._uid = uid$3++;

    var startTag, endTag;
    /* istanbul ignore if */
    if ( true && config.performance && mark) {
      startTag = "vue-perf-start:" + (vm._uid);
      endTag = "vue-perf-end:" + (vm._uid);
      mark(startTag);
    }

    // a flag to avoid this being observed
    vm._isVue = true;
    // merge options
    if (options && options._isComponent) {
      // optimize internal component instantiation
      // since dynamic options merging is pretty slow, and none of the
      // internal component options needs special treatment.
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(
        resolveConstructorOptions(vm.constructor),
        options || {},
        vm
      );
    }
    /* istanbul ignore else */
    if (true) {
      initProxy(vm);
    } else {}
    // expose real self
    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, 'beforeCreate');
    !vm._$fallback && initInjections(vm); // resolve injections before data/props
    initState(vm);
    !vm._$fallback && initProvide(vm); // resolve provide after data/props
    !vm._$fallback && callHook(vm, 'created');

    /* istanbul ignore if */
    if ( true && config.performance && mark) {
      vm._name = formatComponentName(vm, false);
      mark(endTag);
      measure(("vue " + (vm._name) + " init"), startTag, endTag);
    }

    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}

function initInternalComponent (vm, options) {
  var opts = vm.$options = Object.create(vm.constructor.options);
  // doing this because it's faster than dynamic enumeration.
  var parentVnode = options._parentVnode;
  opts.parent = options.parent;
  opts._parentVnode = parentVnode;

  var vnodeComponentOptions = parentVnode.componentOptions;
  opts.propsData = vnodeComponentOptions.propsData;
  opts._parentListeners = vnodeComponentOptions.listeners;
  opts._renderChildren = vnodeComponentOptions.children;
  opts._componentTag = vnodeComponentOptions.tag;

  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}

function resolveConstructorOptions (Ctor) {
  var options = Ctor.options;
  if (Ctor.super) {
    var superOptions = resolveConstructorOptions(Ctor.super);
    var cachedSuperOptions = Ctor.superOptions;
    if (superOptions !== cachedSuperOptions) {
      // super option changed,
      // need to resolve new options.
      Ctor.superOptions = superOptions;
      // check if there are any late-modified/attached options (#4976)
      var modifiedOptions = resolveModifiedOptions(Ctor);
      // update base extend options
      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }
      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }
  return options
}

function resolveModifiedOptions (Ctor) {
  var modified;
  var latest = Ctor.options;
  var sealed = Ctor.sealedOptions;
  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified) { modified = {}; }
      modified[key] = latest[key];
    }
  }
  return modified
}

function Vue (options) {
  if ( true &&
    !(this instanceof Vue)
  ) {
    warn('Vue is a constructor and should be called with the `new` keyword');
  }
  this._init(options);
}

initMixin(Vue);
stateMixin(Vue);
eventsMixin(Vue);
lifecycleMixin(Vue);
renderMixin(Vue);

/*  */

function initUse (Vue) {
  Vue.use = function (plugin) {
    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));
    if (installedPlugins.indexOf(plugin) > -1) {
      return this
    }

    // additional parameters
    var args = toArray(arguments, 1);
    args.unshift(this);
    if (typeof plugin.install === 'function') {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === 'function') {
      plugin.apply(null, args);
    }
    installedPlugins.push(plugin);
    return this
  };
}

/*  */

function initMixin$1 (Vue) {
  Vue.mixin = function (mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this
  };
}

/*  */

function initExtend (Vue) {
  /**
   * Each instance constructor, including Vue, has a unique
   * cid. This enables us to create wrapped "child
   * constructors" for prototypal inheritance and cache them.
   */
  Vue.cid = 0;
  var cid = 1;

  /**
   * Class inheritance
   */
  Vue.extend = function (extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId]
    }

    var name = extendOptions.name || Super.options.name;
    if ( true && name) {
      validateComponentName(name);
    }

    var Sub = function VueComponent (options) {
      this._init(options);
    };
    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(
      Super.options,
      extendOptions
    );
    Sub['super'] = Super;

    // For props and computed properties, we define the proxy getters on
    // the Vue instances at extension time, on the extended prototype. This
    // avoids Object.defineProperty calls for each instance created.
    if (Sub.options.props) {
      initProps$1(Sub);
    }
    if (Sub.options.computed) {
      initComputed$1(Sub);
    }

    // allow further extension/mixin/plugin usage
    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use;

    // create asset registers, so extended classes
    // can have their private assets too.
    ASSET_TYPES.forEach(function (type) {
      Sub[type] = Super[type];
    });
    // enable recursive self-lookup
    if (name) {
      Sub.options.components[name] = Sub;
    }

    // keep a reference to the super options at extension time.
    // later at instantiation we can check if Super's options have
    // been updated.
    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options);

    // cache constructor
    cachedCtors[SuperId] = Sub;
    return Sub
  };
}

function initProps$1 (Comp) {
  var props = Comp.options.props;
  for (var key in props) {
    proxy(Comp.prototype, "_props", key);
  }
}

function initComputed$1 (Comp) {
  var computed = Comp.options.computed;
  for (var key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}

/*  */

function initAssetRegisters (Vue) {
  /**
   * Create asset registration methods.
   */
  ASSET_TYPES.forEach(function (type) {
    Vue[type] = function (
      id,
      definition
    ) {
      if (!definition) {
        return this.options[type + 's'][id]
      } else {
        /* istanbul ignore if */
        if ( true && type === 'component') {
          validateComponentName(id);
        }
        if (type === 'component' && isPlainObject(definition)) {
          definition.name = definition.name || id;
          definition = this.options._base.extend(definition);
        }
        if (type === 'directive' && typeof definition === 'function') {
          definition = { bind: definition, update: definition };
        }
        this.options[type + 's'][id] = definition;
        return definition
      }
    };
  });
}

/*  */



function getComponentName (opts) {
  return opts && (opts.Ctor.options.name || opts.tag)
}

function matches (pattern, name) {
  if (Array.isArray(pattern)) {
    return pattern.indexOf(name) > -1
  } else if (typeof pattern === 'string') {
    return pattern.split(',').indexOf(name) > -1
  } else if (isRegExp(pattern)) {
    return pattern.test(name)
  }
  /* istanbul ignore next */
  return false
}

function pruneCache (keepAliveInstance, filter) {
  var cache = keepAliveInstance.cache;
  var keys = keepAliveInstance.keys;
  var _vnode = keepAliveInstance._vnode;
  for (var key in cache) {
    var cachedNode = cache[key];
    if (cachedNode) {
      var name = getComponentName(cachedNode.componentOptions);
      if (name && !filter(name)) {
        pruneCacheEntry(cache, key, keys, _vnode);
      }
    }
  }
}

function pruneCacheEntry (
  cache,
  key,
  keys,
  current
) {
  var cached$$1 = cache[key];
  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {
    cached$$1.componentInstance.$destroy();
  }
  cache[key] = null;
  remove(keys, key);
}

var patternTypes = [String, RegExp, Array];

var KeepAlive = {
  name: 'keep-alive',
  abstract: true,

  props: {
    include: patternTypes,
    exclude: patternTypes,
    max: [String, Number]
  },

  created: function created () {
    this.cache = Object.create(null);
    this.keys = [];
  },

  destroyed: function destroyed () {
    for (var key in this.cache) {
      pruneCacheEntry(this.cache, key, this.keys);
    }
  },

  mounted: function mounted () {
    var this$1 = this;

    this.$watch('include', function (val) {
      pruneCache(this$1, function (name) { return matches(val, name); });
    });
    this.$watch('exclude', function (val) {
      pruneCache(this$1, function (name) { return !matches(val, name); });
    });
  },

  render: function render () {
    var slot = this.$slots.default;
    var vnode = getFirstComponentChild(slot);
    var componentOptions = vnode && vnode.componentOptions;
    if (componentOptions) {
      // check pattern
      var name = getComponentName(componentOptions);
      var ref = this;
      var include = ref.include;
      var exclude = ref.exclude;
      if (
        // not included
        (include && (!name || !matches(include, name))) ||
        // excluded
        (exclude && name && matches(exclude, name))
      ) {
        return vnode
      }

      var ref$1 = this;
      var cache = ref$1.cache;
      var keys = ref$1.keys;
      var key = vnode.key == null
        // same constructor may get registered as different local components
        // so cid alone is not enough (#3269)
        ? componentOptions.Ctor.cid + (componentOptions.tag ? ("::" + (componentOptions.tag)) : '')
        : vnode.key;
      if (cache[key]) {
        vnode.componentInstance = cache[key].componentInstance;
        // make current key freshest
        remove(keys, key);
        keys.push(key);
      } else {
        cache[key] = vnode;
        keys.push(key);
        // prune oldest entry
        if (this.max && keys.length > parseInt(this.max)) {
          pruneCacheEntry(cache, keys[0], keys, this._vnode);
        }
      }

      vnode.data.keepAlive = true;
    }
    return vnode || (slot && slot[0])
  }
};

var builtInComponents = {
  KeepAlive: KeepAlive
};

/*  */

function initGlobalAPI (Vue) {
  // config
  var configDef = {};
  configDef.get = function () { return config; };
  if (true) {
    configDef.set = function () {
      warn(
        'Do not replace the Vue.config object, set individual fields instead.'
      );
    };
  }
  Object.defineProperty(Vue, 'config', configDef);

  // exposed util methods.
  // NOTE: these are not considered part of the public API - avoid relying on
  // them unless you are aware of the risk.
  Vue.util = {
    warn: warn,
    extend: extend,
    mergeOptions: mergeOptions,
    defineReactive: defineReactive$$1
  };

  Vue.set = set;
  Vue.delete = del;
  Vue.nextTick = nextTick;

  // 2.6 explicit observable API
  Vue.observable = function (obj) {
    observe(obj);
    return obj
  };

  Vue.options = Object.create(null);
  ASSET_TYPES.forEach(function (type) {
    Vue.options[type + 's'] = Object.create(null);
  });

  // this is used to identify the "base" constructor to extend all plain-object
  // components with in Weex's multi-instance scenarios.
  Vue.options._base = Vue;

  extend(Vue.options.components, builtInComponents);

  initUse(Vue);
  initMixin$1(Vue);
  initExtend(Vue);
  initAssetRegisters(Vue);
}

initGlobalAPI(Vue);

Object.defineProperty(Vue.prototype, '$isServer', {
  get: isServerRendering
});

Object.defineProperty(Vue.prototype, '$ssrContext', {
  get: function get () {
    /* istanbul ignore next */
    return this.$vnode && this.$vnode.ssrContext
  }
});

// expose FunctionalRenderContext for ssr runtime helper installation
Object.defineProperty(Vue, 'FunctionalRenderContext', {
  value: FunctionalRenderContext
});

Vue.version = '2.6.11';

/**
 * https://raw.githubusercontent.com/Tencent/westore/master/packages/westore/utils/diff.js
 */
var ARRAYTYPE = '[object Array]';
var OBJECTTYPE = '[object Object]';
// const FUNCTIONTYPE = '[object Function]'

function diff(current, pre) {
    var result = {};
    syncKeys(current, pre);
    _diff(current, pre, '', result);
    return result
}

function syncKeys(current, pre) {
    if (current === pre) { return }
    var rootCurrentType = type(current);
    var rootPreType = type(pre);
    if (rootCurrentType == OBJECTTYPE && rootPreType == OBJECTTYPE) {
        if(Object.keys(current).length >= Object.keys(pre).length){
            for (var key in pre) {
                var currentValue = current[key];
                if (currentValue === undefined) {
                    current[key] = null;
                } else {
                    syncKeys(currentValue, pre[key]);
                }
            }
        }
    } else if (rootCurrentType == ARRAYTYPE && rootPreType == ARRAYTYPE) {
        if (current.length >= pre.length) {
            pre.forEach(function (item, index) {
                syncKeys(current[index], item);
            });
        }
    }
}

function _diff(current, pre, path, result) {
    if (current === pre) { return }
    var rootCurrentType = type(current);
    var rootPreType = type(pre);
    if (rootCurrentType == OBJECTTYPE) {
        if (rootPreType != OBJECTTYPE || Object.keys(current).length < Object.keys(pre).length) {
            setResult(result, path, current);
        } else {
            var loop = function ( key ) {
                var currentValue = current[key];
                var preValue = pre[key];
                var currentType = type(currentValue);
                var preType = type(preValue);
                if (currentType != ARRAYTYPE && currentType != OBJECTTYPE) {
                    // NOTE 此处将 != 修改为 !==。涉及地方太多恐怕测试不到，如果出现数据对比问题，将其修改回来。
                    if (currentValue !== pre[key]) {
                        setResult(result, (path == '' ? '' : path + ".") + key, currentValue);
                    }
                } else if (currentType == ARRAYTYPE) {
                    if (preType != ARRAYTYPE) {
                        setResult(result, (path == '' ? '' : path + ".") + key, currentValue);
                    } else {
                        if (currentValue.length < preValue.length) {
                            setResult(result, (path == '' ? '' : path + ".") + key, currentValue);
                        } else {
                            currentValue.forEach(function (item, index) {
                                _diff(item, preValue[index], (path == '' ? '' : path + ".") + key + '[' + index + ']', result);
                            });
                        }
                    }
                } else if (currentType == OBJECTTYPE) {
                    if (preType != OBJECTTYPE || Object.keys(currentValue).length < Object.keys(preValue).length) {
                        setResult(result, (path == '' ? '' : path + ".") + key, currentValue);
                    } else {
                        for (var subKey in currentValue) {
                            _diff(currentValue[subKey], preValue[subKey], (path == '' ? '' : path + ".") + key + '.' + subKey, result);
                        }
                    }
                }
            };

            for (var key in current) loop( key );
        }
    } else if (rootCurrentType == ARRAYTYPE) {
        if (rootPreType != ARRAYTYPE) {
            setResult(result, path, current);
        } else {
            if (current.length < pre.length) {
                setResult(result, path, current);
            } else {
                current.forEach(function (item, index) {
                    _diff(item, pre[index], path + '[' + index + ']', result);
                });
            }
        }
    } else {
        setResult(result, path, current);
    }
}

function setResult(result, k, v) {
    // if (type(v) != FUNCTIONTYPE) {
        result[k] = v;
    // }
}

function type(obj) {
    return Object.prototype.toString.call(obj)
}

/*  */

function flushCallbacks$1(vm) {
    if (vm.__next_tick_callbacks && vm.__next_tick_callbacks.length) {
        if (Object({"NODE_ENV":"development","VUE_APP_NAME":"watchapp-frontend","VUE_APP_PLATFORM":"mp-weixin","BASE_URL":"/"}).VUE_APP_DEBUG) {
            var mpInstance = vm.$scope;
            console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + vm._uid +
                ']:flushCallbacks[' + vm.__next_tick_callbacks.length + ']');
        }
        var copies = vm.__next_tick_callbacks.slice(0);
        vm.__next_tick_callbacks.length = 0;
        for (var i = 0; i < copies.length; i++) {
            copies[i]();
        }
    }
}

function hasRenderWatcher(vm) {
    return queue.find(function (watcher) { return vm._watcher === watcher; })
}

function nextTick$1(vm, cb) {
    //1.nextTick 之前 已 setData 且 setData 还未回调完成
    //2.nextTick 之前存在 render watcher
    if (!vm.__next_tick_pending && !hasRenderWatcher(vm)) {
        if(Object({"NODE_ENV":"development","VUE_APP_NAME":"watchapp-frontend","VUE_APP_PLATFORM":"mp-weixin","BASE_URL":"/"}).VUE_APP_DEBUG){
            var mpInstance = vm.$scope;
            console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + vm._uid +
                ']:nextVueTick');
        }
        return nextTick(cb, vm)
    }else{
        if(Object({"NODE_ENV":"development","VUE_APP_NAME":"watchapp-frontend","VUE_APP_PLATFORM":"mp-weixin","BASE_URL":"/"}).VUE_APP_DEBUG){
            var mpInstance$1 = vm.$scope;
            console.log('[' + (+new Date) + '][' + (mpInstance$1.is || mpInstance$1.route) + '][' + vm._uid +
                ']:nextMPTick');
        }
    }
    var _resolve;
    if (!vm.__next_tick_callbacks) {
        vm.__next_tick_callbacks = [];
    }
    vm.__next_tick_callbacks.push(function () {
        if (cb) {
            try {
                cb.call(vm);
            } catch (e) {
                handleError(e, vm, 'nextTick');
            }
        } else if (_resolve) {
            _resolve(vm);
        }
    });
    // $flow-disable-line
    if (!cb && typeof Promise !== 'undefined') {
        return new Promise(function (resolve) {
            _resolve = resolve;
        })
    }
}

/*  */

function cloneWithData(vm) {
  // 确保当前 vm 所有数据被同步
  var ret = Object.create(null);
  var dataKeys = [].concat(
    Object.keys(vm._data || {}),
    Object.keys(vm._computedWatchers || {}));

  dataKeys.reduce(function(ret, key) {
    ret[key] = vm[key];
    return ret
  }, ret);

  // vue-composition-api
  var compositionApiState = vm.__composition_api_state__ || vm.__secret_vfa_state__;
  var rawBindings = compositionApiState && compositionApiState.rawBindings;
  if (rawBindings) {
    Object.keys(rawBindings).forEach(function (key) {
      ret[key] = vm[key];
    });
  }

  //TODO 需要把无用数据处理掉，比如 list=>l0 则 list 需要移除，否则多传输一份数据
  Object.assign(ret, vm.$mp.data || {});
  if (
    Array.isArray(vm.$options.behaviors) &&
    vm.$options.behaviors.indexOf('uni://form-field') !== -1
  ) { //form-field
    ret['name'] = vm.name;
    ret['value'] = vm.value;
  }

  return JSON.parse(JSON.stringify(ret))
}

var patch = function(oldVnode, vnode) {
  var this$1 = this;

  if (vnode === null) { //destroy
    return
  }
  if (this.mpType === 'page' || this.mpType === 'component') {
    var mpInstance = this.$scope;
    var data = Object.create(null);
    try {
      data = cloneWithData(this);
    } catch (err) {
      console.error(err);
    }
    data.__webviewId__ = mpInstance.data.__webviewId__;
    var mpData = Object.create(null);
    Object.keys(data).forEach(function (key) { //仅同步 data 中有的数据
      mpData[key] = mpInstance.data[key];
    });
    var diffData = this.$shouldDiffData === false ? data : diff(data, mpData);
    if (Object.keys(diffData).length) {
      if (Object({"NODE_ENV":"development","VUE_APP_NAME":"watchapp-frontend","VUE_APP_PLATFORM":"mp-weixin","BASE_URL":"/"}).VUE_APP_DEBUG) {
        console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + this._uid +
          ']差量更新',
          JSON.stringify(diffData));
      }
      this.__next_tick_pending = true;
      mpInstance.setData(diffData, function () {
        this$1.__next_tick_pending = false;
        flushCallbacks$1(this$1);
      });
    } else {
      flushCallbacks$1(this);
    }
  }
};

/*  */

function createEmptyRender() {

}

function mountComponent$1(
  vm,
  el,
  hydrating
) {
  if (!vm.mpType) {//main.js 中的 new Vue
    return vm
  }
  if (vm.mpType === 'app') {
    vm.$options.render = createEmptyRender;
  }
  if (!vm.$options.render) {
    vm.$options.render = createEmptyRender;
    if (true) {
      /* istanbul ignore if */
      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||
        vm.$options.el || el) {
        warn(
          'You are using the runtime-only build of Vue where the template ' +
          'compiler is not available. Either pre-compile the templates into ' +
          'render functions, or use the compiler-included build.',
          vm
        );
      } else {
        warn(
          'Failed to mount component: template or render function not defined.',
          vm
        );
      }
    }
  }

  !vm._$fallback && callHook(vm, 'beforeMount');

  var updateComponent = function () {
    vm._update(vm._render(), hydrating);
  };

  // we set this to vm._watcher inside the watcher's constructor
  // since the watcher's initial patch may call $forceUpdate (e.g. inside child
  // component's mounted hook), which relies on vm._watcher being already defined
  new Watcher(vm, updateComponent, noop, {
    before: function before() {
      if (vm._isMounted && !vm._isDestroyed) {
        callHook(vm, 'beforeUpdate');
      }
    }
  }, true /* isRenderWatcher */);
  hydrating = false;
  return vm
}

/*  */

function renderClass (
  staticClass,
  dynamicClass
) {
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass))
  }
  /* istanbul ignore next */
  return ''
}

function concat (a, b) {
  return a ? b ? (a + ' ' + b) : a : (b || '')
}

function stringifyClass (value) {
  if (Array.isArray(value)) {
    return stringifyArray(value)
  }
  if (isObject(value)) {
    return stringifyObject(value)
  }
  if (typeof value === 'string') {
    return value
  }
  /* istanbul ignore next */
  return ''
}

function stringifyArray (value) {
  var res = '';
  var stringified;
  for (var i = 0, l = value.length; i < l; i++) {
    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
      if (res) { res += ' '; }
      res += stringified;
    }
  }
  return res
}

function stringifyObject (value) {
  var res = '';
  for (var key in value) {
    if (value[key]) {
      if (res) { res += ' '; }
      res += key;
    }
  }
  return res
}

/*  */

var parseStyleText = cached(function (cssText) {
  var res = {};
  var listDelimiter = /;(?![^(]*\))/g;
  var propertyDelimiter = /:(.+)/;
  cssText.split(listDelimiter).forEach(function (item) {
    if (item) {
      var tmp = item.split(propertyDelimiter);
      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return res
});

// normalize possible array / string values into Object
function normalizeStyleBinding (bindingStyle) {
  if (Array.isArray(bindingStyle)) {
    return toObject(bindingStyle)
  }
  if (typeof bindingStyle === 'string') {
    return parseStyleText(bindingStyle)
  }
  return bindingStyle
}

/*  */

var MP_METHODS = ['createSelectorQuery', 'createIntersectionObserver', 'selectAllComponents', 'selectComponent'];

function getTarget(obj, path) {
  var parts = path.split('.');
  var key = parts[0];
  if (key.indexOf('__$n') === 0) { //number index
    key = parseInt(key.replace('__$n', ''));
  }
  if (parts.length === 1) {
    return obj[key]
  }
  return getTarget(obj[key], parts.slice(1).join('.'))
}

function internalMixin(Vue) {

  Vue.config.errorHandler = function(err, vm, info) {
    Vue.util.warn(("Error in " + info + ": \"" + (err.toString()) + "\""), vm);
    console.error(err);
    /* eslint-disable no-undef */
    var app = typeof getApp === 'function' && getApp();
    if (app && app.onError) {
      app.onError(err);
    }
  };

  var oldEmit = Vue.prototype.$emit;

  Vue.prototype.$emit = function(event) {
    if (this.$scope && event) {
      (this.$scope['_triggerEvent'] || this.$scope['triggerEvent'])
        .call(this.$scope, event, {
          __args__: toArray(arguments, 1)
        })
    }
    return oldEmit.apply(this, arguments)
  };

  Vue.prototype.$nextTick = function(fn) {
    return nextTick$1(this, fn)
  };

  MP_METHODS.forEach(function (method) {
    Vue.prototype[method] = function(args) {
      if (this.$scope && this.$scope[method]) {
        return this.$scope[method](args)
      }
      // mp-alipay
      if (typeof my === 'undefined') {
        return
      }
      if (method === 'createSelectorQuery') {
        /* eslint-disable no-undef */
        return my.createSelectorQuery(args)
      } else if (method === 'createIntersectionObserver') {
        /* eslint-disable no-undef */
        return my.createIntersectionObserver(args)
      }
      // TODO mp-alipay 暂不支持 selectAllComponents,selectComponent
    };
  });

  Vue.prototype.__init_provide = initProvide;

  Vue.prototype.__init_injections = initInjections;

  Vue.prototype.__call_hook = function(hook, args) {
    var vm = this;
    // #7573 disable dep collection when invoking lifecycle hooks
    pushTarget();
    var handlers = vm.$options[hook];
    var info = hook + " hook";
    var ret;
    if (handlers) {
      for (var i = 0, j = handlers.length; i < j; i++) {
        ret = invokeWithErrorHandling(handlers[i], vm, args ? [args] : null, vm, info);
      }
    }
    if (vm._hasHookEvent) {
      vm.$emit('hook:' + hook, args);
    }
    popTarget();
    return ret
  };

  Vue.prototype.__set_model = function(target, key, value, modifiers) {
    if (Array.isArray(modifiers)) {
      if (modifiers.indexOf('trim') !== -1) {
        value = value.trim();
      }
      if (modifiers.indexOf('number') !== -1) {
        value = this._n(value);
      }
    }
    if (!target) {
      target = this;
    }
    // 解决动态属性添加
    Vue.set(target, key, value)
  };

  Vue.prototype.__set_sync = function(target, key, value) {
    if (!target) {
      target = this;
    }
    // 解决动态属性添加
    Vue.set(target, key, value)
  };

  Vue.prototype.__get_orig = function(item) {
    if (isPlainObject(item)) {
      return item['$orig'] || item
    }
    return item
  };

  Vue.prototype.__get_value = function(dataPath, target) {
    return getTarget(target || this, dataPath)
  };


  Vue.prototype.__get_class = function(dynamicClass, staticClass) {
    return renderClass(staticClass, dynamicClass)
  };

  Vue.prototype.__get_style = function(dynamicStyle, staticStyle) {
    if (!dynamicStyle && !staticStyle) {
      return ''
    }
    var dynamicStyleObj = normalizeStyleBinding(dynamicStyle);
    var styleObj = staticStyle ? extend(staticStyle, dynamicStyleObj) : dynamicStyleObj;
    return Object.keys(styleObj).map(function (name) { return ((hyphenate(name)) + ":" + (styleObj[name])); }).join(';')
  };

  Vue.prototype.__map = function(val, iteratee) {
    //TODO 暂不考虑 string
    var ret, i, l, keys, key;
    if (Array.isArray(val)) {
      ret = new Array(val.length);
      for (i = 0, l = val.length; i < l; i++) {
        ret[i] = iteratee(val[i], i);
      }
      return ret
    } else if (isObject(val)) {
      keys = Object.keys(val);
      ret = Object.create(null);
      for (i = 0, l = keys.length; i < l; i++) {
        key = keys[i];
        ret[key] = iteratee(val[key], key, i);
      }
      return ret
    } else if (typeof val === 'number') {
      ret = new Array(val);
      for (i = 0, l = val; i < l; i++) {
        // 第一个参数暂时仍和小程序一致
        ret[i] = iteratee(i, i);
      }
      return ret
    }
    return []
  };

}

/*  */

var LIFECYCLE_HOOKS$1 = [
    //App
    'onLaunch',
    'onShow',
    'onHide',
    'onUniNViewMessage',
    'onPageNotFound',
    'onThemeChange',
    'onError',
    'onUnhandledRejection',
    //Page
    'onInit',
    'onLoad',
    // 'onShow',
    'onReady',
    // 'onHide',
    'onUnload',
    'onPullDownRefresh',
    'onReachBottom',
    'onTabItemTap',
    'onAddToFavorites',
    'onShareTimeline',
    'onShareAppMessage',
    'onResize',
    'onPageScroll',
    'onNavigationBarButtonTap',
    'onBackPress',
    'onNavigationBarSearchInputChanged',
    'onNavigationBarSearchInputConfirmed',
    'onNavigationBarSearchInputClicked',
    //Component
    // 'onReady', // 兼容旧版本，应该移除该事件
    'onPageShow',
    'onPageHide',
    'onPageResize'
];
function lifecycleMixin$1(Vue) {

    //fixed vue-class-component
    var oldExtend = Vue.extend;
    Vue.extend = function(extendOptions) {
        extendOptions = extendOptions || {};

        var methods = extendOptions.methods;
        if (methods) {
            Object.keys(methods).forEach(function (methodName) {
                if (LIFECYCLE_HOOKS$1.indexOf(methodName)!==-1) {
                    extendOptions[methodName] = methods[methodName];
                    delete methods[methodName];
                }
            });
        }

        return oldExtend.call(this, extendOptions)
    };

    var strategies = Vue.config.optionMergeStrategies;
    var mergeHook = strategies.created;
    LIFECYCLE_HOOKS$1.forEach(function (hook) {
        strategies[hook] = mergeHook;
    });

    Vue.prototype.__lifecycle_hooks__ = LIFECYCLE_HOOKS$1;
}

/*  */

// install platform patch function
Vue.prototype.__patch__ = patch;

// public mount method
Vue.prototype.$mount = function(
    el ,
    hydrating
) {
    return mountComponent$1(this, el, hydrating)
};

lifecycleMixin$1(Vue);
internalMixin(Vue);

/*  */

/* harmony default export */ __webpack_exports__["default"] = (Vue);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/global.js */ 2)))

/***/ }),

/***/ 4:
/*!*************************************************************!*\
  !*** ./node_modules/@dcloudio/uni-i18n/dist/uni-i18n.es.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(uni, global) {Object.defineProperty(exports, "__esModule", { value: true });exports.compileI18nJsonStr = compileI18nJsonStr;exports.hasI18nJson = hasI18nJson;exports.initVueI18n = initVueI18n;exports.isI18nStr = isI18nStr;exports.normalizeLocale = normalizeLocale;exports.parseI18nJson = parseI18nJson;exports.resolveLocale = resolveLocale;exports.isString = exports.LOCALE_ZH_HANT = exports.LOCALE_ZH_HANS = exports.LOCALE_FR = exports.LOCALE_ES = exports.LOCALE_EN = exports.I18n = exports.Formatter = void 0;function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function _iterableToArrayLimit(arr, i) {if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"] != null) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}var isArray = Array.isArray;
var isObject = function isObject(val) {return val !== null && typeof val === 'object';};
var defaultDelimiters = ['{', '}'];var
BaseFormatter = /*#__PURE__*/function () {
  function BaseFormatter() {_classCallCheck(this, BaseFormatter);
    this._caches = Object.create(null);
  }_createClass(BaseFormatter, [{ key: "interpolate", value: function interpolate(
    message, values) {var delimiters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultDelimiters;
      if (!values) {
        return [message];
      }
      var tokens = this._caches[message];
      if (!tokens) {
        tokens = parse(message, delimiters);
        this._caches[message] = tokens;
      }
      return compile(tokens, values);
    } }]);return BaseFormatter;}();exports.Formatter = BaseFormatter;

var RE_TOKEN_LIST_VALUE = /^(?:\d)+/;
var RE_TOKEN_NAMED_VALUE = /^(?:\w)+/;
function parse(format, _ref) {var _ref2 = _slicedToArray(_ref, 2),startDelimiter = _ref2[0],endDelimiter = _ref2[1];
  var tokens = [];
  var position = 0;
  var text = '';
  while (position < format.length) {
    var char = format[position++];
    if (char === startDelimiter) {
      if (text) {
        tokens.push({ type: 'text', value: text });
      }
      text = '';
      var sub = '';
      char = format[position++];
      while (char !== undefined && char !== endDelimiter) {
        sub += char;
        char = format[position++];
      }
      var isClosed = char === endDelimiter;
      var type = RE_TOKEN_LIST_VALUE.test(sub) ?
      'list' :
      isClosed && RE_TOKEN_NAMED_VALUE.test(sub) ?
      'named' :
      'unknown';
      tokens.push({ value: sub, type: type });
    }
    //  else if (char === '%') {
    //   // when found rails i18n syntax, skip text capture
    //   if (format[position] !== '{') {
    //     text += char
    //   }
    // }
    else {
        text += char;
      }
  }
  text && tokens.push({ type: 'text', value: text });
  return tokens;
}
function compile(tokens, values) {
  var compiled = [];
  var index = 0;
  var mode = isArray(values) ?
  'list' :
  isObject(values) ?
  'named' :
  'unknown';
  if (mode === 'unknown') {
    return compiled;
  }
  while (index < tokens.length) {
    var token = tokens[index];
    switch (token.type) {
      case 'text':
        compiled.push(token.value);
        break;
      case 'list':
        compiled.push(values[parseInt(token.value, 10)]);
        break;
      case 'named':
        if (mode === 'named') {
          compiled.push(values[token.value]);
        } else
        {
          if (true) {
            console.warn("Type of token '".concat(token.type, "' and format of value '").concat(mode, "' don't match!"));
          }
        }
        break;
      case 'unknown':
        if (true) {
          console.warn("Detect 'unknown' type of token!");
        }
        break;}

    index++;
  }
  return compiled;
}

var LOCALE_ZH_HANS = 'zh-Hans';exports.LOCALE_ZH_HANS = LOCALE_ZH_HANS;
var LOCALE_ZH_HANT = 'zh-Hant';exports.LOCALE_ZH_HANT = LOCALE_ZH_HANT;
var LOCALE_EN = 'en';exports.LOCALE_EN = LOCALE_EN;
var LOCALE_FR = 'fr';exports.LOCALE_FR = LOCALE_FR;
var LOCALE_ES = 'es';exports.LOCALE_ES = LOCALE_ES;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var hasOwn = function hasOwn(val, key) {return hasOwnProperty.call(val, key);};
var defaultFormatter = new BaseFormatter();
function include(str, parts) {
  return !!parts.find(function (part) {return str.indexOf(part) !== -1;});
}
function startsWith(str, parts) {
  return parts.find(function (part) {return str.indexOf(part) === 0;});
}
function normalizeLocale(locale, messages) {
  if (!locale) {
    return;
  }
  locale = locale.trim().replace(/_/g, '-');
  if (messages && messages[locale]) {
    return locale;
  }
  locale = locale.toLowerCase();
  if (locale.indexOf('zh') === 0) {
    if (locale.indexOf('-hans') > -1) {
      return LOCALE_ZH_HANS;
    }
    if (locale.indexOf('-hant') > -1) {
      return LOCALE_ZH_HANT;
    }
    if (include(locale, ['-tw', '-hk', '-mo', '-cht'])) {
      return LOCALE_ZH_HANT;
    }
    return LOCALE_ZH_HANS;
  }
  var lang = startsWith(locale, [LOCALE_EN, LOCALE_FR, LOCALE_ES]);
  if (lang) {
    return lang;
  }
}var
I18n = /*#__PURE__*/function () {
  function I18n(_ref3) {var locale = _ref3.locale,fallbackLocale = _ref3.fallbackLocale,messages = _ref3.messages,watcher = _ref3.watcher,formater = _ref3.formater;_classCallCheck(this, I18n);
    this.locale = LOCALE_EN;
    this.fallbackLocale = LOCALE_EN;
    this.message = {};
    this.messages = {};
    this.watchers = [];
    if (fallbackLocale) {
      this.fallbackLocale = fallbackLocale;
    }
    this.formater = formater || defaultFormatter;
    this.messages = messages || {};
    this.setLocale(locale || LOCALE_EN);
    if (watcher) {
      this.watchLocale(watcher);
    }
  }_createClass(I18n, [{ key: "setLocale", value: function setLocale(
    locale) {var _this = this;
      var oldLocale = this.locale;
      this.locale = normalizeLocale(locale, this.messages) || this.fallbackLocale;
      if (!this.messages[this.locale]) {
        // 可能初始化时不存在
        this.messages[this.locale] = {};
      }
      this.message = this.messages[this.locale];
      // 仅发生变化时，通知
      if (oldLocale !== this.locale) {
        this.watchers.forEach(function (watcher) {
          watcher(_this.locale, oldLocale);
        });
      }
    } }, { key: "getLocale", value: function getLocale()
    {
      return this.locale;
    } }, { key: "watchLocale", value: function watchLocale(
    fn) {var _this2 = this;
      var index = this.watchers.push(fn) - 1;
      return function () {
        _this2.watchers.splice(index, 1);
      };
    } }, { key: "add", value: function add(
    locale, message) {var override = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var curMessages = this.messages[locale];
      if (curMessages) {
        if (override) {
          Object.assign(curMessages, message);
        } else
        {
          Object.keys(message).forEach(function (key) {
            if (!hasOwn(curMessages, key)) {
              curMessages[key] = message[key];
            }
          });
        }
      } else
      {
        this.messages[locale] = message;
      }
    } }, { key: "f", value: function f(
    message, values, delimiters) {
      return this.formater.interpolate(message, values, delimiters).join('');
    } }, { key: "t", value: function t(
    key, locale, values) {
      var message = this.message;
      if (typeof locale === 'string') {
        locale = normalizeLocale(locale, this.messages);
        locale && (message = this.messages[locale]);
      } else
      {
        values = locale;
      }
      if (!hasOwn(message, key)) {
        console.warn("Cannot translate the value of keypath ".concat(key, ". Use the value of keypath as default."));
        return key;
      }
      return this.formater.interpolate(message[key], values).join('');
    } }]);return I18n;}();exports.I18n = I18n;


function watchAppLocale(appVm, i18n) {
  // 需要保证 watch 的触发在组件渲染之前
  if (appVm.$watchLocale) {
    // vue2
    appVm.$watchLocale(function (newLocale) {
      i18n.setLocale(newLocale);
    });
  } else
  {
    appVm.$watch(function () {return appVm.$locale;}, function (newLocale) {
      i18n.setLocale(newLocale);
    });
  }
}
function getDefaultLocale() {
  if (typeof uni !== 'undefined' && uni.getLocale) {
    return uni.getLocale();
  }
  // 小程序平台，uni 和 uni-i18n 互相引用，导致访问不到 uni，故在 global 上挂了 getLocale
  if (typeof global !== 'undefined' && global.getLocale) {
    return global.getLocale();
  }
  return LOCALE_EN;
}
function initVueI18n(locale) {var messages = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};var fallbackLocale = arguments.length > 2 ? arguments[2] : undefined;var watcher = arguments.length > 3 ? arguments[3] : undefined;
  // 兼容旧版本入参
  if (typeof locale !== 'string') {var _ref4 =
    [
    messages,
    locale];locale = _ref4[0];messages = _ref4[1];

  }
  if (typeof locale !== 'string') {
    // 因为小程序平台，uni-i18n 和 uni 互相引用，导致此时访问 uni 时，为 undefined
    locale = getDefaultLocale();
  }
  if (typeof fallbackLocale !== 'string') {
    fallbackLocale =
    typeof __uniConfig !== 'undefined' && __uniConfig.fallbackLocale ||
    LOCALE_EN;
  }
  var i18n = new I18n({
    locale: locale,
    fallbackLocale: fallbackLocale,
    messages: messages,
    watcher: watcher });

  var _t = function t(key, values) {
    if (typeof getApp !== 'function') {
      // app view
      /* eslint-disable no-func-assign */
      _t = function t(key, values) {
        return i18n.t(key, values);
      };
    } else
    {
      var isWatchedAppLocale = false;
      _t = function t(key, values) {
        var appVm = getApp().$vm;
        // 可能$vm还不存在，比如在支付宝小程序中，组件定义较早，在props的default里使用了t()函数（如uni-goods-nav），此时app还未初始化
        // options: {
        // 	type: Array,
        // 	default () {
        // 		return [{
        // 			icon: 'shop',
        // 			text: t("uni-goods-nav.options.shop"),
        // 		}, {
        // 			icon: 'cart',
        // 			text: t("uni-goods-nav.options.cart")
        // 		}]
        // 	}
        // },
        if (appVm) {
          // 触发响应式
          appVm.$locale;
          if (!isWatchedAppLocale) {
            isWatchedAppLocale = true;
            watchAppLocale(appVm, i18n);
          }
        }
        return i18n.t(key, values);
      };
    }
    return _t(key, values);
  };
  return {
    i18n: i18n,
    f: function f(message, values, delimiters) {
      return i18n.f(message, values, delimiters);
    },
    t: function t(key, values) {
      return _t(key, values);
    },
    add: function add(locale, message) {var override = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      return i18n.add(locale, message, override);
    },
    watch: function watch(fn) {
      return i18n.watchLocale(fn);
    },
    getLocale: function getLocale() {
      return i18n.getLocale();
    },
    setLocale: function setLocale(newLocale) {
      return i18n.setLocale(newLocale);
    } };

}

var isString = function isString(val) {return typeof val === 'string';};exports.isString = isString;
var formater;
function hasI18nJson(jsonObj, delimiters) {
  if (!formater) {
    formater = new BaseFormatter();
  }
  return walkJsonObj(jsonObj, function (jsonObj, key) {
    var value = jsonObj[key];
    if (isString(value)) {
      if (isI18nStr(value, delimiters)) {
        return true;
      }
    } else
    {
      return hasI18nJson(value, delimiters);
    }
  });
}
function parseI18nJson(jsonObj, values, delimiters) {
  if (!formater) {
    formater = new BaseFormatter();
  }
  walkJsonObj(jsonObj, function (jsonObj, key) {
    var value = jsonObj[key];
    if (isString(value)) {
      if (isI18nStr(value, delimiters)) {
        jsonObj[key] = compileStr(value, values, delimiters);
      }
    } else
    {
      parseI18nJson(value, values, delimiters);
    }
  });
  return jsonObj;
}
function compileI18nJsonStr(jsonStr, _ref5) {var locale = _ref5.locale,locales = _ref5.locales,delimiters = _ref5.delimiters;
  if (!isI18nStr(jsonStr, delimiters)) {
    return jsonStr;
  }
  if (!formater) {
    formater = new BaseFormatter();
  }
  var localeValues = [];
  Object.keys(locales).forEach(function (name) {
    if (name !== locale) {
      localeValues.push({
        locale: name,
        values: locales[name] });

    }
  });
  localeValues.unshift({ locale: locale, values: locales[locale] });
  try {
    return JSON.stringify(compileJsonObj(JSON.parse(jsonStr), localeValues, delimiters), null, 2);
  }
  catch (e) {}
  return jsonStr;
}
function isI18nStr(value, delimiters) {
  return value.indexOf(delimiters[0]) > -1;
}
function compileStr(value, values, delimiters) {
  return formater.interpolate(value, values, delimiters).join('');
}
function compileValue(jsonObj, key, localeValues, delimiters) {
  var value = jsonObj[key];
  if (isString(value)) {
    // 存在国际化
    if (isI18nStr(value, delimiters)) {
      jsonObj[key] = compileStr(value, localeValues[0].values, delimiters);
      if (localeValues.length > 1) {
        // 格式化国际化语言
        var valueLocales = jsonObj[key + 'Locales'] = {};
        localeValues.forEach(function (localValue) {
          valueLocales[localValue.locale] = compileStr(value, localValue.values, delimiters);
        });
      }
    }
  } else
  {
    compileJsonObj(value, localeValues, delimiters);
  }
}
function compileJsonObj(jsonObj, localeValues, delimiters) {
  walkJsonObj(jsonObj, function (jsonObj, key) {
    compileValue(jsonObj, key, localeValues, delimiters);
  });
  return jsonObj;
}
function walkJsonObj(jsonObj, walk) {
  if (isArray(jsonObj)) {
    for (var i = 0; i < jsonObj.length; i++) {
      if (walk(jsonObj, i)) {
        return true;
      }
    }
  } else
  if (isObject(jsonObj)) {
    for (var key in jsonObj) {
      if (walk(jsonObj, key)) {
        return true;
      }
    }
  }
  return false;
}

function resolveLocale(locales) {
  return function (locale) {
    if (!locale) {
      return locale;
    }
    locale = normalizeLocale(locale) || locale;
    return resolveLocaleChain(locale).find(function (locale) {return locales.indexOf(locale) > -1;});
  };
}
function resolveLocaleChain(locale) {
  var chain = [];
  var tokens = locale.split('-');
  while (tokens.length) {
    chain.push(tokens.join('-'));
    tokens.pop();
  }
  return chain;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-mp-weixin/dist/index.js */ 1)["default"], __webpack_require__(/*! ./../../../webpack/buildin/global.js */ 2)))

/***/ }),

/***/ 5:
/*!*******************************************************************!*\
  !*** C:/Users/Administrator/Desktop/watchapp-frontend/pages.json ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {



/***/ }),

/***/ 78:
/*!*************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/watchapp-frontend/common/map-distance-utils.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var MapDistanceUtils = {
  getDistance: function getDistance(latA, lngA, latB, lngB) {
    var radLat1 = latA * Math.PI / 180.0;
    var radLat2 = latB * Math.PI / 180.0;
    var radLng1 = lngA * Math.PI / 180.0;
    var radLng2 = lngB * Math.PI / 180.0;
    var radLatTotal = radLat1 - radLat2;
    var radLngTotal = radLng1 - radLng2;
    var distance = 2 * Math.asin(
    Math.sqrt(Math.pow(Math.sin(radLatTotal / 2), 2) +
    Math.cos(radLat1) *
    Math.cos(radLat2) *
    Math.pow(Math.sin(radLngTotal / 2), 2)));
    distance = distance * 6378.137; // EARTH_RADIUS;
    distance = Math.round(distance * 10000) / 10000; // 保留4位小数
    return distance;
  } };


module.exports = MapDistanceUtils;

/***/ })

}]);
//# sourceMappingURL=../../.sourcemap/mp-weixin/common/vendor.js.map